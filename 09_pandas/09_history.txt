
mspacek@Godel:~/SciPyCourse2020/notes/09_pandas$ ipython
Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: t = (1, 2, 3)

In [2]: t
Out[2]: (1, 2, 3)

In [3]: l = [1, 2, 3]

In [4]: t[0]
Out[4]: 1

In [5]: l[-1]
Out[5]: 3

In [6]: d = {}

In [7]: d
Out[7]: {}

In [8]: type(d)
Out[8]: dict

In [9]: d['sdflkj'] = 5

In [10]: d
Out[10]: {'sdflkj': 5}

In [11]: d['name'] = 'Joe'

In [12]: a = np.arange(10)

In [13]: a
Out[13]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [14]: a[0]
Out[14]: 0

In [15]: a[5]
Out[15]: 5

In [16]: b = np.arange(10)

In [17]: a - b
Out[17]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

In [18]: import pandas as pd

In [19]: pd
Out[19]: <module 'pandas' from '/usr/local/lib/python3.6/dist-packages/pandas/__init__.py'>

In [20]: pd.Series
Out[20]: pandas.core.series.Series

In [21]: pd.Series?

In [22]: fl = np.random.random(20)

In [23]: fl
Out[23]:
array([0.84099234, 0.95212054, 0.35308176, 0.21148265, 0.61187185,
       0.04118177, 0.99881118, 0.5860148 , 0.65461342, 0.35624895,
       0.76026981, 0.85208445, 0.05272686, 0.57382402, 0.19486825,
       0.72659728, 0.7725638 , 0.8525207 , 0.06487049, 0.48844408])

In [24]: t = np.arange(0, 400, 20)

In [25]: t
Out[25]:
array([  0,  20,  40,  60,  80, 100, 120, 140, 160, 180, 200, 220, 240,
       260, 280, 300, 320, 340, 360, 380])

In [26]: fl
Out[26]:
array([0.84099234, 0.95212054, 0.35308176, 0.21148265, 0.61187185,
       0.04118177, 0.99881118, 0.5860148 , 0.65461342, 0.35624895,
       0.76026981, 0.85208445, 0.05272686, 0.57382402, 0.19486825,
       0.72659728, 0.7725638 , 0.8525207 , 0.06487049, 0.48844408])

In [27]: t
Out[27]:
array([  0,  20,  40,  60,  80, 100, 120, 140, 160, 180, 200, 220, 240,
       260, 280, 300, 320, 340, 360, 380])

In [28]: len(fl)
Out[28]: 20

In [29]: len(t)
Out[29]: 20

In [30]: fl
Out[30]:
array([0.84099234, 0.95212054, 0.35308176, 0.21148265, 0.61187185,
       0.04118177, 0.99881118, 0.5860148 , 0.65461342, 0.35624895,
       0.76026981, 0.85208445, 0.05272686, 0.57382402, 0.19486825,
       0.72659728, 0.7725638 , 0.8525207 , 0.06487049, 0.48844408])

In [31]: t
Out[31]:
array([  0,  20,  40,  60,  80, 100, 120, 140, 160, 180, 200, 220, 240,
       260, 280, 300, 320, 340, 360, 380])

In [32]: fl[:5]
Out[32]: array([0.84099234, 0.95212054, 0.35308176, 0.21148265, 0.61187185])

In [33]: t[:5]
Out[33]: array([ 0, 20, 40, 60, 80])

In [34]: t == 120
Out[34]:
array([False, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False])

In [35]: fl[t == 120]
Out[35]: array([0.99881118])

In [36]: fl[6]
Out[36]: 0.9988111804128706

In [37]: fl[t == 120]
Out[37]: array([0.99881118])

In [38]: fl[t == 120][0]
Out[38]: 0.9988111804128706

In [39]: s = pd.Series(data=fl, index=t)

In [40]: s
Out[40]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [41]: len(s)
Out[41]: 20

In [42]: s.iloc[4]
Out[42]: 0.6118718528193511

In [43]: s.iloc[:5]
Out[43]:
0     0.840992
20    0.952121
40    0.353082
60    0.211483
80    0.611872
dtype: float64

In [44]: s.loc[60]
Out[44]: 0.2114826525586767

In [45]: s.loc[:60]
Out[45]:
0     0.840992
20    0.952121
40    0.353082
60    0.211483
dtype: float64

In [46]: s.iloc[:3]
Out[46]:
0     0.840992
20    0.952121
40    0.353082
dtype: float64

In [47]: s.iloc[:4]
Out[47]:
0     0.840992
20    0.952121
40    0.353082
60    0.211483
dtype: float64

In [48]: s
Out[48]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [49]: s.loc[30:70]
Out[49]:
40    0.353082
60    0.211483
dtype: float64

In [50]: s.iloc[:4]
Out[50]:
0     0.840992
20    0.952121
40    0.353082
60    0.211483
dtype: float64

In [51]: s.loc[30:70].values
Out[51]: array([0.35308176, 0.21148265])

In [52]: s.loc[30:70].values
Out[52]: array([0.35308176, 0.21148265])

In [53]: list(s.loc[30:70].values)
Out[53]: [0.35308175647643725, 0.2114826525586767]

In [54]: tuple(s.loc[30:70].values)
Out[54]: (0.35308175647643725, 0.2114826525586767)

In [55]: s.loc[30:70].values[0]
Out[55]: 0.35308175647643725

In [56]: s.loc[30:70].values[1]
Out[56]: 0.2114826525586767

In [57]: s.loc[30:70].iloc[0]
Out[57]: 0.35308175647643725

In [58]: s.loc[30:70].iloc[1]
Out[58]: 0.2114826525586767

In [59]: s.iloc
Out[59]: <pandas.core.indexing._iLocIndexer at 0x7f1f595bc318>

In [60]: s.loc
Out[60]: <pandas.core.indexing._LocIndexer at 0x7f1f5bfad4a8>

In [61]: s
Out[61]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [62]: s[25]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-62-cc105b48e387> in <module>
----> 1 s[25]

/usr/local/lib/python3.6/dist-packages/pandas/core/series.py in __getitem__(self, key)
   1069         key = com.apply_if_callable(key, self)
   1070         try:
-> 1071             result = self.index.get_value(self, key)
   1072
   1073             if not is_scalar(result):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_value(self, series, key)
   4728         k = self._convert_scalar_indexer(k, kind="getitem")
   4729         try:
-> 4730             return self._engine.get_value(s, k, tz=getattr(series.dtype, "tz", None))
   4731         except KeyError as e1:
   4732             if len(self) > 0 and (self.holds_integer() or self.is_boolean()):

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

KeyError: 25
> /home/mspacek/SciPyCourse2020/notes/09_pandas/pandas/_libs/hashtable_class_helper.pxi(998)pandas._libs.hashtable.Int64HashTable.get_item()

ipdb> c

In [63]: s
Out[63]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [64]: s[20]
Out[64]: 0.9521205367710549

In [65]: s.loc[20]
Out[65]: 0.9521205367710549

In [66]: s[30:70]
Out[66]: Series([], dtype: float64)

In [67]: s.loc[30:70]
Out[67]:
40    0.353082
60    0.211483
dtype: float64

In [68]: s.values
Out[68]:
array([0.84099234, 0.95212054, 0.35308176, 0.21148265, 0.61187185,
       0.04118177, 0.99881118, 0.5860148 , 0.65461342, 0.35624895,
       0.76026981, 0.85208445, 0.05272686, 0.57382402, 0.19486825,
       0.72659728, 0.7725638 , 0.8525207 , 0.06487049, 0.48844408])

In [69]: s
Out[69]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [70]: s[30:70].values
Out[70]: array([], dtype=float64)

In [71]: s.loc[30:70].values
Out[71]: array([0.35308176, 0.21148265])

In [72]: s.index
Out[72]:
Int64Index([  0,  20,  40,  60,  80, 100, 120, 140, 160, 180, 200, 220, 240,
            260, 280, 300, 320, 340, 360, 380],
           dtype='int64')

In [73]: s.loc[30:70]
Out[73]:
40    0.353082
60    0.211483
dtype: float64

In [74]: s.loc[30:70].index
Out[74]: Int64Index([40, 60], dtype='int64')

In [75]: s.loc[30:70].index.values
Out[75]: array([40, 60])

In [76]: s.loc[30:70].values
Out[76]: array([0.35308176, 0.21148265])

In [77]: tfloat = np.arange(0, 2, 0.1)

In [78]: tfloat
Out[78]:
array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9])

In [79]: len(20)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-79-888849bddf93> in <module>
----> 1 len(20)

TypeError: object of type 'int' has no len()
> <ipython-input-79-888849bddf93>(1)<module>()
----> 1 len(20)

ipdb> c

In [80]: len(tfloat)
Out[80]: 20

In [81]: len(fl)
Out[81]: 20

In [82]: sfloat = pd.Series(data=fl, index=tfloat)

In [83]: sfloat
Out[83]:
0.0    0.840992
0.1    0.952121
0.2    0.353082
0.3    0.211483
0.4    0.611872
0.5    0.041182
0.6    0.998811
0.7    0.586015
0.8    0.654613
0.9    0.356249
1.0    0.760270
1.1    0.852084
1.2    0.052727
1.3    0.573824
1.4    0.194868
1.5    0.726597
1.6    0.772564
1.7    0.852521
1.8    0.064870
1.9    0.488444
dtype: float64

In [84]: s
Out[84]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [85]: sfloat
Out[85]:
0.0    0.840992
0.1    0.952121
0.2    0.353082
0.3    0.211483
0.4    0.611872
0.5    0.041182
0.6    0.998811
0.7    0.586015
0.8    0.654613
0.9    0.356249
1.0    0.760270
1.1    0.852084
1.2    0.052727
1.3    0.573824
1.4    0.194868
1.5    0.726597
1.6    0.772564
1.7    0.852521
1.8    0.064870
1.9    0.488444
dtype: float64

In [86]: sfloat[0.0]
Out[86]: 0.8409923420808239

In [87]: sfloat[0.1]
Out[87]: 0.9521205367710549

In [88]: sfloat[0.2]
Out[88]: 0.35308175647643725

In [89]: sfloat[0.3]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2896             try:
-> 2897                 return self._engine.get_loc(key)
   2898             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

KeyError: 0.3

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-89-feb3d725fcf0> in <module>
----> 1 sfloat[0.3]

/usr/local/lib/python3.6/dist-packages/pandas/core/series.py in __getitem__(self, key)
   1069         key = com.apply_if_callable(key, self)
   1070         try:
-> 1071             result = self.index.get_value(self, key)
   1072
   1073             if not is_scalar(result):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/numeric.py in get_value(self, series, key)
    418
    419         k = com.values_from_object(key)
--> 420         loc = self.get_loc(k)
    421         new_values = com.values_from_object(series)[loc]
    422

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/numeric.py in get_loc(self, key, method, tolerance)
    477         except (TypeError, NotImplementedError):
    478             pass
--> 479         return super().get_loc(key, method=method, tolerance=tolerance)
    480
    481     @cache_readonly

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2897                 return self._engine.get_loc(key)
   2898             except KeyError:
-> 2899                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   2900         indexer = self.get_indexer([key], method=method, tolerance=tolerance)
   2901         if indexer.ndim > 1 or indexer.size > 1:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

KeyError: 0.3
> /home/mspacek/SciPyCourse2020/notes/09_pandas/pandas/_libs/hashtable_class_helper.pxi(390)pandas._libs.hashtable.Float64HashTable.get_item()

ipdb> c

In [90]: sfloat
Out[90]:
0.0    0.840992
0.1    0.952121
0.2    0.353082
0.3    0.211483
0.4    0.611872
0.5    0.041182
0.6    0.998811
0.7    0.586015
0.8    0.654613
0.9    0.356249
1.0    0.760270
1.1    0.852084
1.2    0.052727
1.3    0.573824
1.4    0.194868
1.5    0.726597
1.6    0.772564
1.7    0.852521
1.8    0.064870
1.9    0.488444
dtype: float64

In [91]: sfloat.index
Out[91]:
Float64Index([                0.0,                 0.1,                 0.2,
              0.30000000000000004,                 0.4,                 0.5,
               0.6000000000000001,  0.7000000000000001,                 0.8,
                              0.9,                 1.0,                 1.1,
               1.2000000000000002,                 1.3,  1.4000000000000001,
                              1.5,                 1.6,  1.7000000000000002,
                              1.8,  1.9000000000000001],
             dtype='float64')

In [92]: sfloat.loc[0.25:0.35]
Out[92]:
0.3    0.211483
dtype: float64

In [93]: sfloat.loc[0.3]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2896             try:
-> 2897                 return self._engine.get_loc(key)
   2898             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

KeyError: 0.3

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-93-54a69c1be8be> in <module>
----> 1 sfloat.loc[0.3]

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in __getitem__(self, key)
   1422
   1423             maybe_callable = com.apply_if_callable(key, self.obj)
-> 1424             return self._getitem_axis(maybe_callable, axis=axis)
   1425
   1426     def _is_scalar_access(self, key: Tuple):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _getitem_axis(self, key, axis)
   1848         # fall thru to straight lookup
   1849         self._validate_key(key, axis)
-> 1850         return self._get_label(key, axis=axis)
   1851
   1852

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _get_label(self, label, axis)
    154             # but will fail when the index is not present
    155             # see GH5667
--> 156             return self.obj._xs(label, axis=axis)
    157         elif isinstance(label, tuple) and isinstance(label[axis], slice):
    158             raise IndexingError("no slices here, handle elsewhere")

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in xs(self, key, axis, level, drop_level)
   3735             loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)
   3736         else:
-> 3737             loc = self.index.get_loc(key)
   3738
   3739             if isinstance(loc, np.ndarray):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/numeric.py in get_loc(self, key, method, tolerance)
    477         except (TypeError, NotImplementedError):
    478             pass
--> 479         return super().get_loc(key, method=method, tolerance=tolerance)
    480
    481     @cache_readonly

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2897                 return self._engine.get_loc(key)
   2898             except KeyError:
-> 2899                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   2900         indexer = self.get_indexer([key], method=method, tolerance=tolerance)
   2901         if indexer.ndim > 1 or indexer.size > 1:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Float64HashTable.get_item()

KeyError: 0.3
> /home/mspacek/SciPyCourse2020/notes/09_pandas/pandas/_libs/hashtable_class_helper.pxi(390)pandas._libs.hashtable.Float64HashTable.get_item()

ipdb> c

In [94]: sfloat.loc[0.25:0.35]
Out[94]:
0.3    0.211483
dtype: float64

In [95]: sfloat
Out[95]:
0.0    0.840992
0.1    0.952121
0.2    0.353082
0.3    0.211483
0.4    0.611872
0.5    0.041182
0.6    0.998811
0.7    0.586015
0.8    0.654613
0.9    0.356249
1.0    0.760270
1.1    0.852084
1.2    0.052727
1.3    0.573824
1.4    0.194868
1.5    0.726597
1.6    0.772564
1.7    0.852521
1.8    0.064870
1.9    0.488444
dtype: float64

In [96]: s
Out[96]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [97]: s - 5
Out[97]:
0     -4.159008
20    -4.047879
40    -4.646918
60    -4.788517
80    -4.388128
100   -4.958818
120   -4.001189
140   -4.413985
160   -4.345387
180   -4.643751
200   -4.239730
220   -4.147916
240   -4.947273
260   -4.426176
280   -4.805132
300   -4.273403
320   -4.227436
340   -4.147479
360   -4.935130
380   -4.511556
dtype: float64

In [98]: s < 0.5
Out[98]:
0      False
20     False
40      True
60      True
80     False
100     True
120    False
140    False
160    False
180     True
200    False
220    False
240     True
260    False
280     True
300    False
320    False
340    False
360     True
380     True
dtype: bool

In [99]: s
Out[99]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [100]: s > 0.5
Out[100]:
0       True
20      True
40     False
60     False
80      True
100    False
120     True
140     True
160     True
180    False
200     True
220     True
240    False
260     True
280    False
300     True
320     True
340     True
360    False
380    False
dtype: bool

In [101]: s[s > 0.5]
Out[101]:
0      0.840992
20     0.952121
80     0.611872
120    0.998811
140    0.586015
160    0.654613
200    0.760270
220    0.852084
260    0.573824
300    0.726597
320    0.772564
340    0.852521
dtype: float64

In [102]: s.loc[s > 0.5]
Out[102]:
0      0.840992
20     0.952121
80     0.611872
120    0.998811
140    0.586015
160    0.654613
200    0.760270
220    0.852084
260    0.573824
300    0.726597
320    0.772564
340    0.852521
dtype: float64

In [103]: s.loc[s > 0.5].index
Out[103]: Int64Index([0, 20, 80, 120, 140, 160, 200, 220, 260, 300, 320, 340], dtype='int64')

In [104]: s.loc[s > 0.5].values
Out[104]:
array([0.84099234, 0.95212054, 0.61187185, 0.99881118, 0.5860148 ,
       0.65461342, 0.76026981, 0.85208445, 0.57382402, 0.72659728,
       0.7725638 , 0.8525207 ])

In [105]: s.plot()
Out[105]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f7e29a7f0>

In [106]: s
Out[106]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [107]: from matplotlib.pyplot as plt
  File "<ipython-input-107-819dae71ed12>", line 1
    from matplotlib.pyplot as plt
                            ^
SyntaxError: invalid syntax


In [108]: import matplotlib.pyplot as plt

In [109]: f, ax = plt.subplots()

In [110]: ax.plot(s.index, s.values)
Out[110]: [<matplotlib.lines.Line2D at 0x7f1f58e4e630>]

In [111]: type(s)
Out[111]: pandas.core.series.Series

In [112]: s.plot.bar()
Out[112]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f7e29a7f0>

In [113]: s.plot.bar()
Out[113]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f1afe6908>

In [114]: s.plot.hist()
Out[114]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f1ae081d0>

In [115]: s.min()
Out[115]: 0.04118176952797836

In [116]: s
Out[116]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [117]: s.max()
Out[117]: 0.9988111804128706

In [118]: s.sum()
Out[118]: 10.945188990895025

In [119]: s.mean()
Out[119]: 0.5472594495447513

In [120]: s.median()
Out[120]: 0.5989433254991199

In [121]: s.std()
Out[121]: 0.3107164098347217

In [122]: s.describe()
Out[122]:
count    20.000000
mean      0.547259
std       0.310716
min       0.041182
25%       0.317682
50%       0.598943
75%       0.789671
max       0.998811
dtype: float64

In [123]: type(s.describe())
Out[123]: pandas.core.series.Series

In [124]: report = s.describe()

In [125]: report.index
Out[125]: Index(['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max'], dtype='object')

In [126]: report.loc['count']
Out[126]: 20.0

In [127]: report.loc['75%']
Out[127]: 0.7896709345164181

In [128]: dr = pd.date_range('2017-06-01', periods=10, freq='D')

In [129]: dr
Out[129]:
DatetimeIndex(['2017-06-01', '2017-06-02', '2017-06-03', '2017-06-04',
               '2017-06-05', '2017-06-06', '2017-06-07', '2017-06-08',
               '2017-06-09', '2017-06-10'],
              dtype='datetime64[ns]', freq='D')

In [130]: np.arange(10)
Out[130]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [131]: s3 = pd.Series(data=fl[:10], index=dr)

In [132]: s3
Out[132]:
2017-06-01    0.840992
2017-06-02    0.952121
2017-06-03    0.353082
2017-06-04    0.211483
2017-06-05    0.611872
2017-06-06    0.041182
2017-06-07    0.998811
2017-06-08    0.586015
2017-06-09    0.654613
2017-06-10    0.356249
Freq: D, dtype: float64

In [133]: s3.index
Out[133]:
DatetimeIndex(['2017-06-01', '2017-06-02', '2017-06-03', '2017-06-04',
               '2017-06-05', '2017-06-06', '2017-06-07', '2017-06-08',
               '2017-06-09', '2017-06-10'],
              dtype='datetime64[ns]', freq='D')

In [134]: s3.loc['2017-06-01']
Out[134]: 0.8409923420808239

In [135]: s
Out[135]:
0      0.840992
20     0.952121
40     0.353082
60     0.211483
80     0.611872
100    0.041182
120    0.998811
140    0.586015
160    0.654613
180    0.356249
200    0.760270
220    0.852084
240    0.052727
260    0.573824
280    0.194868
300    0.726597
320    0.772564
340    0.852521
360    0.064870
380    0.488444
dtype: float64

In [136]: t2 = np.array([ 50, 70, 40, 20, 10, 80, 90, 30, 0, 60])

In [137]: t2
Out[137]: array([50, 70, 40, 20, 10, 80, 90, 30,  0, 60])

In [138]: s2 = pd.Series(data=fl[:10], index=t2)

In [139]: s2
Out[139]:
50    0.840992
70    0.952121
40    0.353082
20    0.211483
10    0.611872
80    0.041182
90    0.998811
30    0.586015
0     0.654613
60    0.356249
dtype: float64

In [140]: s.loc[70]
-----------------------------------------------------------------------
KeyError                              Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2896             try:
-> 2897                 return self._engine.get_loc(key)
   2898             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

KeyError: 70

During handling of the above exception, another exception occurred:

KeyError                              Traceback (most recent call last)
<ipython-input-140-872374715cda> in <module>
----> 1 s.loc[70]

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in __getitem__(self, key)
   1422
   1423             maybe_callable = com.apply_if_callable(key, self.obj)
-> 1424             return self._getitem_axis(maybe_callable, axis=axis)
   1425
   1426     def _is_scalar_access(self, key: Tuple):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _getitem_axis(self, key, axis)
   1848         # fall thru to straight lookup
   1849         self._validate_key(key, axis)
-> 1850         return self._get_label(key, axis=axis)
   1851
   1852

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _get_label(self, label, axis)
    154             # but will fail when the index is not present
    155             # see GH5667
--> 156             return self.obj._xs(label, axis=axis)
    157         elif isinstance(label, tuple) and isinstance(label[axis], slice):
    158             raise IndexingError("no slices here, handle elsewhere")

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in xs(self, key, axis, level, drop_level)
   3735             loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)
   3736         else:
-> 3737             loc = self.index.get_loc(key)
   3738
   3739             if isinstance(loc, np.ndarray):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2897                 return self._engine.get_loc(key)
   2898             except KeyError:
-> 2899                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   2900         indexer = self.get_indexer([key], method=method, tolerance=tolerance)
   2901         if indexer.ndim > 1 or indexer.size > 1:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item()

KeyError: 70
> /home/mspacek/SciPyCourse2020/notes/09_pandas/pandas/_libs/hashtable_class_helper.pxi(998)pandas._libs.hashtable.Int64HashTable.get_item()

ipdb> c

In [141]: s2.loc[70]
Out[141]: 0.9521205367710549

In [142]: s2
Out[142]:
50    0.840992
70    0.952121
40    0.353082
20    0.211483
10    0.611872
80    0.041182
90    0.998811
30    0.586015
0     0.654613
60    0.356249
dtype: float64

In [143]: s2.loc[70]
Out[143]: 0.9521205367710549

In [144]: s2.loc[70:10]
Out[144]:
70    0.952121
40    0.353082
20    0.211483
10    0.611872
dtype: float64

In [145]: tstr = ['a', 'b', 'c', 'd', 'x', 'z', 'q', 'f', 'g', 'h']

In [146]: len(tstr)
Out[146]: 10

In [147]: sstr = pd.Series(data=fl[:10], index=tstr)

In [148]: sstr
Out[148]:
a    0.840992
b    0.952121
c    0.353082
d    0.211483
x    0.611872
z    0.041182
q    0.998811
f    0.586015
g    0.654613
h    0.356249
dtype: float64

In [149]: sstr.sort_index()
Out[149]:
a    0.840992
b    0.952121
c    0.353082
d    0.211483
f    0.586015
g    0.654613
h    0.356249
q    0.998811
x    0.611872
z    0.041182
dtype: float64

In [150]: sstr.sort_values()
Out[150]:
z    0.041182
d    0.211483
c    0.353082
h    0.356249
f    0.586015
x    0.611872
g    0.654613
a    0.840992
b    0.952121
q    0.998811
dtype: float64

In [151]: ax = s.plot()

In [152]: ax
Out[152]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f1ae081d0>

In [153]: ax = s.plot()

In [154]: pwd
Out[154]: '/home/mspacek/SciPyCourse2020/notes/09_pandas'

In [155]: pwd
Out[155]: '/home/mspacek/SciPyCourse2020/notes/09_pandas'

In [156]: ls
09_pandas.md   exp1.csv  exp.xlsx    t.npy
09_pandas.pdf  exp2.csv  Galton.csv  V.npy

In [157]: t = np.load('t.npy')

In [158]: len(t)
Out[158]: 100

In [159]: t
Out[159]:
array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,
       0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,
       0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,
       0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,
       0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,
       0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,
       0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,
       0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,
       0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
       0.99])

In [160]: V = np.load('V.npy')

In [161]: len(v)
-----------------------------------------------------------------------
NameError                             Traceback (most recent call last)
<ipython-input-161-a878aa1e2fde> in <module>
----> 1 len(v)

NameError: name 'v' is not defined
> <ipython-input-161-a878aa1e2fde>(1)<module>()
----> 1 len(v)

ipdb> c

In [162]: len(V)
Out[162]: 100

In [163]: V
Out[163]:
array([8.24777758e+01, 6.02342590e+01, 3.08380753e+01, 8.64603373e+01,
       3.56536647e+00, 2.00348496e+01, 5.91368637e+01, 4.15162129e+01,
       5.06776828e+01, 1.00000000e+03, 7.54405999e+01, 6.86314204e+01,
       2.61417936e+01, 3.51484713e+01, 2.58092387e+01, 1.04773450e+01,
       1.32408917e+01, 3.18672503e+01, 5.94482817e+01, 2.66580904e+01,
       5.91594717e+01, 6.53570651e+00, 8.58836573e+00, 1.00000000e+03,
       1.00000000e+03, 8.38927097e+01, 2.21202156e+01, 4.25819646e+01,
       3.83306221e+01, 2.09746967e+01, 7.53824835e+01, 4.45993633e+01,
       2.80853871e+01, 4.17249415e+01, 1.00000000e+03, 7.02201328e+01,
       3.63630564e+01, 5.22943367e+01, 1.00000000e+03, 6.16236716e+01,
       3.81947390e+01, 4.38238019e+01, 6.11110182e+01, 5.44227315e+01,
       2.45454038e+01, 4.02545425e+01, 2.14279017e+01, 6.62861764e+01,
       2.82545726e+01, 1.68717858e+01, 7.61757221e+01, 9.97308451e+00,
       4.37940989e+01, 8.95652919e+01, 3.18723823e+00, 8.79707384e+01,
       4.75663828e+01, 5.34237421e+01, 7.42926799e+01, 1.82295787e+01,
       5.64432797e+01, 5.74893311e+01, 1.00000000e+03, 7.39651359e+01,
       2.21320752e+01, 1.00000000e+03, 1.09191910e+01, 2.26514960e+01,
       1.69261930e+01, 4.44302184e+00, 8.89804525e+01, 8.77941436e+01,
       1.32775860e+01, 8.02132297e+01, 4.58869800e+01, 1.54311492e+01,
       7.52881650e+01, 3.07195208e+01, 3.12770187e+01, 3.49414948e+01,
       8.72803186e+01, 4.22898083e+01, 6.60830128e+01, 7.20574664e+01,
       1.00000000e+03, 5.18257219e+00, 6.97242785e+01, 4.99391302e+01,
       7.90815702e+01, 7.60846665e+01, 2.80442394e+01, 1.00118143e+01,
       5.65604354e+01, 8.32990442e+01, 4.40094004e+01, 5.55926930e+01,
       7.09025454e+01, 2.90419840e+01, 3.45839593e+01, 7.90880387e-01])

In [164]: s = pd.Series(data=V, index=t)

In [165]: s
Out[165]:
0.00    82.477776
0.01    60.234259
0.02    30.838075
0.03    86.460337
0.04     3.565366
          ...
0.95    55.592693
0.96    70.902545
0.97    29.041984
0.98    34.583959
0.99     0.790880
Length: 100, dtype: float64

In [166]: ax = s.plot()

In [167]: ax
Out[167]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f227d8d68>

In [168]: s > 600
Out[168]:
0.00    False
0.01    False
0.02    False
0.03    False
0.04    False
        ...
0.95    False
0.96    False
0.97    False
0.98    False
0.99    False
Length: 100, dtype: bool

In [169]: s[s > 600]
Out[169]:
0.09    1000.0
0.23    1000.0
0.24    1000.0
0.34    1000.0
0.38    1000.0
0.62    1000.0
0.65    1000.0
0.84    1000.0
dtype: float64

In [170]: s[s > 600].index
Out[170]: Float64Index([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84], dtype='float64')

In [171]: type(s[s > 600].index)
Out[171]: pandas.core.indexes.numeric.Float64Index

In [172]: s[s > 600].index
Out[172]: Float64Index([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84], dtype='float64')

In [173]: s[s > 600].index.values
Out[173]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [174]: np.array(s[s > 600].index)
Out[174]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [175]: s[s > 600].index.values
Out[175]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [176]: st = s[s > 600].index.values

In [177]: st
Out[177]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [178]: np.save?

In [179]: np.save('spike_times.npy', st)

In [180]: ls
09_pandas.md   exp1.csv  exp.xlsx    spike_times.npy  V.npy
09_pandas.pdf  exp2.csv  Galton.csv  t.npy

In [181]: spiketimes = np.load('spike_times.npy')

In [182]: spiketimes
Out[182]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [183]: st
Out[183]: array([0.09, 0.23, 0.24, 0.34, 0.38, 0.62, 0.65, 0.84])

In [184]: type(st)
Out[184]: numpy.ndarray

In [185]: st.dteyp
-----------------------------------------------------------------------
AttributeError                        Traceback (most recent call last)
<ipython-input-185-b5a6c42bf264> in <module>
----> 1 st.dteyp

AttributeError: 'numpy.ndarray' object has no attribute 'dteyp'
> <ipython-input-185-b5a6c42bf264>(1)<module>()
----> 1 st.dteyp

ipdb> c

In [186]: st.dtype
Out[186]: dtype('float64')

In [187]: spiketimes.dtype
Out[187]: dtype('float64')

In [188]: ax
Out[188]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f227d8d68>

In [189]: plt.xlabel('time')
Out[189]: Text(0.5, 13.94444444444443, 'time')

In [190]: ax.set_xlabel('Time (s)')
Out[190]: Text(0.5, 37.50000000000002, 'Time (s)')

In [191]: ax.set_ylabel('Voltage (mV)')
Out[191]: Text(13.944444444444438, 0.5, 'Voltage (mV)')

In [192]: s[s > 600]
Out[192]:
0.09    1000.0
0.23    1000.0
0.24    1000.0
0.34    1000.0
0.38    1000.0
0.62    1000.0
0.65    1000.0
0.84    1000.0
dtype: float64

In [193]: s[s > 600].plot(ls='', marker='.')
Out[193]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1f227d8d68>

In [194]: eeg = np.random.random((20, 3))

In [195]: eeg
Out[195]:
array([[0.17758922, 0.32047066, 0.97353477],
       [0.23184497, 0.20683191, 0.96884171],
       [0.67739324, 0.1331483 , 0.2512512 ],
       [0.88008501, 0.86929242, 0.99027374],
       [0.6200342 , 0.22084263, 0.77724924],
       [0.25963738, 0.56121302, 0.57762678],
       [0.38182716, 0.92200297, 0.85104727],
       [0.01277947, 0.5311098 , 0.87419246],
       [0.48733545, 0.41247789, 0.43655416],
       [0.01673815, 0.20776655, 0.80889549],
       [0.33356953, 0.32122853, 0.73711656],
       [0.89060851, 0.74184825, 0.77497235],
       [0.97107145, 0.53820529, 0.93305324],
       [0.75529537, 0.54992752, 0.01344004],
       [0.76390841, 0.82197398, 0.42526478],
       [0.06837545, 0.21185074, 0.39936427],
       [0.60556934, 0.30645686, 0.28731717],
       [0.79082777, 0.90244723, 0.22021924],
       [0.15162115, 0.02032963, 0.81239431],
       [0.53118251, 0.99722924, 0.39734553]])

In [196]: eeg.shape
Out[196]: (20, 3)

In [197]: t = np.arange(0, 20*50, 50)

In [198]: t
Out[198]:
array([  0,  50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600,
       650, 700, 750, 800, 850, 900, 950])

In [199]: t.shape
Out[199]: (20,)

In [200]: chans = ['Fz', 'Cz', 'Pz']

In [201]: chans
Out[201]: ['Fz', 'Cz', 'Pz']

In [202]: df = pd.DataFrame(data=eeg, index=t, columns=chans)

In [203]: df
Out[203]:
           Fz        Cz        Pz
0    0.177589  0.320471  0.973535
50   0.231845  0.206832  0.968842
100  0.677393  0.133148  0.251251
150  0.880085  0.869292  0.990274
200  0.620034  0.220843  0.777249
250  0.259637  0.561213  0.577627
300  0.381827  0.922003  0.851047
350  0.012779  0.531110  0.874192
400  0.487335  0.412478  0.436554
450  0.016738  0.207767  0.808895
500  0.333570  0.321229  0.737117
550  0.890609  0.741848  0.774972
600  0.971071  0.538205  0.933053
650  0.755295  0.549928  0.013440
700  0.763908  0.821974  0.425265
750  0.068375  0.211851  0.399364
800  0.605569  0.306457  0.287317
850  0.790828  0.902447  0.220219
900  0.151621  0.020330  0.812394
950  0.531183  0.997229  0.397346

In [204]: d.iloc[:5]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-204-2cc1c5163afb> in <module>
----> 1 d.iloc[:5]

AttributeError: 'dict' object has no attribute 'iloc'
> <ipython-input-204-2cc1c5163afb>(1)<module>()
----> 1 d.iloc[:5]

ipdb> c

In [205]: df.iloc[:5]
Out[205]:
           Fz        Cz        Pz
0    0.177589  0.320471  0.973535
50   0.231845  0.206832  0.968842
100  0.677393  0.133148  0.251251
150  0.880085  0.869292  0.990274
200  0.620034  0.220843  0.777249

In [206]: type(df.iloc[:5])
Out[206]: pandas.core.frame.DataFrame

In [207]: df
Out[207]:
           Fz        Cz        Pz
0    0.177589  0.320471  0.973535
50   0.231845  0.206832  0.968842
100  0.677393  0.133148  0.251251
150  0.880085  0.869292  0.990274
200  0.620034  0.220843  0.777249
250  0.259637  0.561213  0.577627
300  0.381827  0.922003  0.851047
350  0.012779  0.531110  0.874192
400  0.487335  0.412478  0.436554
450  0.016738  0.207767  0.808895
500  0.333570  0.321229  0.737117
550  0.890609  0.741848  0.774972
600  0.971071  0.538205  0.933053
650  0.755295  0.549928  0.013440
700  0.763908  0.821974  0.425265
750  0.068375  0.211851  0.399364
800  0.605569  0.306457  0.287317
850  0.790828  0.902447  0.220219
900  0.151621  0.020330  0.812394
950  0.531183  0.997229  0.397346

In [208]: df.iloc[0, 0]
Out[208]: 0.17758921580094222

In [209]: df.iloc[0, 1]
Out[209]: 0.3204706637830397

In [210]: df.iloc[-1, -1]
Out[210]: 0.39734553126911

In [211]: eeg[-1, -1]
Out[211]: 0.39734553126911

In [212]: df['Fz']
Out[212]:
0      0.177589
50     0.231845
100    0.677393
150    0.880085
200    0.620034
250    0.259637
300    0.381827
350    0.012779
400    0.487335
450    0.016738
500    0.333570
550    0.890609
600    0.971071
650    0.755295
700    0.763908
750    0.068375
800    0.605569
850    0.790828
900    0.151621
950    0.531183
Name: Fz, dtype: float64

In [213]: type(df['Fz'])
Out[213]: pandas.core.series.Series

In [214]: df['Fz']
Out[214]:
0      0.177589
50     0.231845
100    0.677393
150    0.880085
200    0.620034
250    0.259637
300    0.381827
350    0.012779
400    0.487335
450    0.016738
500    0.333570
550    0.890609
600    0.971071
650    0.755295
700    0.763908
750    0.068375
800    0.605569
850    0.790828
900    0.151621
950    0.531183
Name: Fz, dtype: float64

In [215]: df
Out[215]:
           Fz        Cz        Pz
0    0.177589  0.320471  0.973535
50   0.231845  0.206832  0.968842
100  0.677393  0.133148  0.251251
150  0.880085  0.869292  0.990274
200  0.620034  0.220843  0.777249
250  0.259637  0.561213  0.577627
300  0.381827  0.922003  0.851047
350  0.012779  0.531110  0.874192
400  0.487335  0.412478  0.436554
450  0.016738  0.207767  0.808895
500  0.333570  0.321229  0.737117
550  0.890609  0.741848  0.774972
600  0.971071  0.538205  0.933053
650  0.755295  0.549928  0.013440
700  0.763908  0.821974  0.425265
750  0.068375  0.211851  0.399364
800  0.605569  0.306457  0.287317
850  0.790828  0.902447  0.220219
900  0.151621  0.020330  0.812394
950  0.531183  0.997229  0.397346

In [216]: df.loc[50]
Out[216]:
Fz    0.231845
Cz    0.206832
Pz    0.968842
Name: 50, dtype: float64

In [217]: type(df.loc[50])
Out[217]: pandas.core.series.Series

In [218]: df.loc[50]
Out[218]:
Fz    0.231845
Cz    0.206832
Pz    0.968842
Name: 50, dtype: float64

In [219]: df.loc[50][0]
Out[219]: 0.2318449665920993

In [220]: df.loc[50].iloc[0]
Out[220]: 0.2318449665920993

In [221]: df.loc[50].loc['Fz']
Out[221]: 0.2318449665920993

In [222]: df.loc[50].loc['Pz']
Out[222]: 0.9688417130986567

In [223]: df.loc[50]['Fz']
Out[223]: 0.2318449665920993

In [224]: df.loc[50].loc['Pz']
Out[224]: 0.9688417130986567

In [225]: df['Fz']
Out[225]:
0      0.177589
50     0.231845
100    0.677393
150    0.880085
200    0.620034
250    0.259637
300    0.381827
350    0.012779
400    0.487335
450    0.016738
500    0.333570
550    0.890609
600    0.971071
650    0.755295
700    0.763908
750    0.068375
800    0.605569
850    0.790828
900    0.151621
950    0.531183
Name: Fz, dtype: float64

In [226]: df.loc[50]
Out[226]:
Fz    0.231845
Cz    0.206832
Pz    0.968842
Name: 50, dtype: float64

In [227]: df.loc[50]['Fz']
Out[227]: 0.2318449665920993

In [228]: df['Fz']
Out[228]:
0      0.177589
50     0.231845
100    0.677393
150    0.880085
200    0.620034
250    0.259637
300    0.381827
350    0.012779
400    0.487335
450    0.016738
500    0.333570
550    0.890609
600    0.971071
650    0.755295
700    0.763908
750    0.068375
800    0.605569
850    0.790828
900    0.151621
950    0.531183
Name: Fz, dtype: float64

In [229]: df['Fz'].loc[50]
Out[229]: 0.2318449665920993

In [230]: df.loc[50]['Fz']
Out[230]: 0.2318449665920993

In [231]: df
Out[231]:
           Fz        Cz        Pz
0    0.177589  0.320471  0.973535
50   0.231845  0.206832  0.968842
100  0.677393  0.133148  0.251251
150  0.880085  0.869292  0.990274
200  0.620034  0.220843  0.777249
250  0.259637  0.561213  0.577627
300  0.381827  0.922003  0.851047
350  0.012779  0.531110  0.874192
400  0.487335  0.412478  0.436554
450  0.016738  0.207767  0.808895
500  0.333570  0.321229  0.737117
550  0.890609  0.741848  0.774972
600  0.971071  0.538205  0.933053
650  0.755295  0.549928  0.013440
700  0.763908  0.821974  0.425265
750  0.068375  0.211851  0.399364
800  0.605569  0.306457  0.287317
850  0.790828  0.902447  0.220219
900  0.151621  0.020330  0.812394
950  0.531183  0.997229  0.397346

In [232]: df.dtype
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-232-b959c06452a1> in <module>
----> 1 df.dtype

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in __getattr__(self, name)
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'dtype'
> /usr/local/lib/python3.6/dist-packages/pandas/core/generic.py(5179)__getattr__()
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

ipdb> c

In [233]: df['Fz'].dtype
Out[233]: dtype('float64')

In [234]: eeg.dtype
Out[234]: dtype('float64')

In [235]: eeg
Out[235]:
array([[0.17758922, 0.32047066, 0.97353477],
       [0.23184497, 0.20683191, 0.96884171],
       [0.67739324, 0.1331483 , 0.2512512 ],
       [0.88008501, 0.86929242, 0.99027374],
       [0.6200342 , 0.22084263, 0.77724924],
       [0.25963738, 0.56121302, 0.57762678],
       [0.38182716, 0.92200297, 0.85104727],
       [0.01277947, 0.5311098 , 0.87419246],
       [0.48733545, 0.41247789, 0.43655416],
       [0.01673815, 0.20776655, 0.80889549],
       [0.33356953, 0.32122853, 0.73711656],
       [0.89060851, 0.74184825, 0.77497235],
       [0.97107145, 0.53820529, 0.93305324],
       [0.75529537, 0.54992752, 0.01344004],
       [0.76390841, 0.82197398, 0.42526478],
       [0.06837545, 0.21185074, 0.39936427],
       [0.60556934, 0.30645686, 0.28731717],
       [0.79082777, 0.90244723, 0.22021924],
       [0.15162115, 0.02032963, 0.81239431],
       [0.53118251, 0.99722924, 0.39734553]])

In [236]: df['Fz'].dtype
Out[236]: dtype('float64')

In [237]: df['Cz'].dtype
Out[237]: dtype('float64')

In [238]: pd.read_csv?

In [239]: ls
09_pandas.md   exp1.csv  exp.xlsx    spikes.png       t.npy
09_pandas.pdf  exp2.csv  Galton.csv  spike_times.npy  V.npy

In [240]: df = pd.read_csv('exp1.csv')

In [241]: df
Out[241]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [242]: df.columns
Out[242]: Index(['subject', 'start_time', 'end_time', 'stimulus', 'outcome'], dtype='object')

In [243]: df.index
Out[243]: RangeIndex(start=0, stop=8, step=1)

In [244]: df.index.values
Out[244]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [245]: df['start_time']
Out[245]:
0    2.3
1    1.6
2    2.3
3    4.0
4    2.8
5    0.7
6    3.5
7    2.7
Name: start_time, dtype: float64

In [246]: df['subject']
Out[246]:
0    A01
1    A01
2    A01
3    A01
4    A01
5    A01
6    A01
7    A01
Name: subject, dtype: object

In [247]: df['subject'].values
Out[247]:
array(['A01', 'A01', 'A01', 'A01', 'A01', 'A01', 'A01', 'A01'],
      dtype=object)

In [248]: df['subject'].values[0]
Out[248]: 'A01'

In [249]: df['subject'].iloc[0]
Out[249]: 'A01'

In [250]: df['subject'].loc[7]
Out[250]: 'A01'

In [251]: df['subject'].loc[8]
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/range.py in get_loc(self, key, method, tolerance)
    375             try:
--> 376                 return self._range.index(new_key)
    377             except ValueError:

ValueError: 8 is not in range

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-251-1e0d1e15c74a> in <module>
----> 1 df['subject'].loc[8]

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in __getitem__(self, key)
   1422
   1423             maybe_callable = com.apply_if_callable(key, self.obj)
-> 1424             return self._getitem_axis(maybe_callable, axis=axis)
   1425
   1426     def _is_scalar_access(self, key: Tuple):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _getitem_axis(self, key, axis)
   1848         # fall thru to straight lookup
   1849         self._validate_key(key, axis)
-> 1850         return self._get_label(key, axis=axis)
   1851
   1852

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _get_label(self, label, axis)
    154             # but will fail when the index is not present
    155             # see GH5667
--> 156             return self.obj._xs(label, axis=axis)
    157         elif isinstance(label, tuple) and isinstance(label[axis], slice):
    158             raise IndexingError("no slices here, handle elsewhere")

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in xs(self, key, axis, level, drop_level)
   3735             loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)
   3736         else:
-> 3737             loc = self.index.get_loc(key)
   3738
   3739             if isinstance(loc, np.ndarray):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/range.py in get_loc(self, key, method, tolerance)
    376                 return self._range.index(new_key)
    377             except ValueError:
--> 378                 raise KeyError(key)
    379         return super().get_loc(key, method=method, tolerance=tolerance)
    380

KeyError: 8
> /usr/local/lib/python3.6/dist-packages/pandas/core/indexes/range.py(378)get_loc()
    376                 return self._range.index(new_key)
    377             except ValueError:
--> 378                 raise KeyError(key)
    379         return super().get_loc(key, method=method, tolerance=tolerance)
    380

ipdb> c

In [252]: df
Out[252]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [253]: exp1 = pd.read_csv('exp1.csv')

In [254]: exp1
Out[254]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [255]: exp1.plot()
Out[255]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1ef0db2588>

In [256]: exp1.hist()
Out[256]:
array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f1ef0e21438>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f1ef0d48e48>]],
      dtype=object)

In [257]: exp1.plot.hist()
Out[257]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1edb090c88>

In [258]: exp1.hist()
Out[258]:
array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f1edaccf438>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f1edb15f438>]],
      dtype=object)

In [259]: axs = exp1.hist()

In [260]: len(axs)
Out[260]: 1

In [261]: axs.shape
Out[261]: (1, 2)

In [262]: axs[0, 0]
Out[262]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1edb06c1d0>

In [263]: axs[0, 1]
Out[263]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1ef13d8b00>

In [264]: exp2 = pd.read_csv('exp2.csv')

In [265]: exp2
Out[265]:
   subject  start_time  end_time stimulus outcome
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [266]: exp1
Out[266]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [267]: exp2
Out[267]:
   subject  start_time  end_time stimulus outcome
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [268]: pd.concat([exp1, exp2])
Out[268]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [269]: pd.concat([exp1, exp2]).loc[0]
Out[269]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
0     A02         2.7       5.6        L    pass

In [270]: pd.concat([exp1, exp2], axis=1)
Out[270]:
   subject  start_time end_time  ... end_time stimulus outcome
0      A01         2.3      5.6  ...      5.6        L    pass
1      A01         1.6      2.1  ...      4.3        L    pass
2      A01         2.3      5.6  ...     10.4        R    fail
3      A01         4.0     10.2  ...      5.6        R    pass
4      A01         2.8      4.5  ...     10.0        R    fail
5      A01         0.7      6.1  ...     12.1        R    fail
6      A01         3.5     11.2  ...      4.5        L    pass
7      A01         2.7      5.6  ...      3.1        R    pass
8      NaN         NaN      NaN  ...      4.1        L    pass
9      NaN         NaN      NaN  ...     12.4        R    fail
10     NaN         NaN      NaN  ...     13.3        R    fail

[11 rows x 10 columns]

In [271]: pd.concat([exp1, exp2], axis=1)
Out[271]:
   subject  start_time  end_time stimulus outcome subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass     A02         2.7       5.6        L    pass
1      A01         1.6       2.1        R    pass     A02         1.2       4.3        L    pass
2      A01         2.3       5.6        R    pass     A02         4.0      10.4        R    fail
3      A01         4.0      10.2        R    fail     A02         2.3       5.6        R    pass
4      A01         2.8       4.5        L    pass     A02         4.1      10.0        R    fail
5      A01         0.7       6.1        L    pass     A02         3.9      12.1        R    fail
6      A01         3.5      11.2        R    fail     A02         2.8       4.5        L    pass
7      A01         2.7       5.6        L    pass     A02         1.3       3.1        R    pass
8      NaN         NaN       NaN      NaN     NaN     A02         0.8       4.1        L    pass
9      NaN         NaN       NaN      NaN     NaN     A02         3.6      12.4        R    fail
10     NaN         NaN       NaN      NaN     NaN     A02         5.5      13.3        R    fail

In [272]: pd.concat([exp1, exp2])
Out[272]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [273]: pd.concat([exp1, exp2]).index = np.arange(19)

In [274]: exp12 = pd.concat([exp1, exp2])

In [275]: exp12
Out[275]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [276]: exp12.index = np.arange(19)

In [277]: exp12
Out[277]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [278]: exp12
Out[278]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [279]: pd.concat([exp1, exp2])
Out[279]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [280]: exp12 = pd.concat([exp1, exp2])

In [281]: exp12.index
Out[281]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype='int64')

In [282]: exp12.index = np.arange(19)

In [283]: exp12
Out[283]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [284]: exps.plot.scatter('start_time', 'end_time')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-284-c914116c25ce> in <module>
----> 1 exps.plot.scatter('start_time', 'end_time')

NameError: name 'exps' is not defined
> <ipython-input-284-c914116c25ce>(1)<module>()
----> 1 exps.plot.scatter('start_time', 'end_time')

ipdb> c

In [285]: exp12.plot.scatter('start_time', 'end_time')
Out[285]: <matplotlib.axes._subplots.AxesSubplot at 0x7f1ef0c352b0>

In [286]: exp12.corr?

In [287]: exp12.corr()
Out[287]:
            start_time  end_time
start_time    1.000000  0.841829
end_time      0.841829  1.000000

In [288]: exp12
Out[288]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [289]: exp12.sort_values('start_time')
Out[289]:
   subject  start_time  end_time stimulus outcome
5      A01         0.7       6.1        L    pass
16     A02         0.8       4.1        L    pass
9      A02         1.2       4.3        L    pass
15     A02         1.3       3.1        R    pass
1      A01         1.6       2.1        R    pass
11     A02         2.3       5.6        R    pass
0      A01         2.3       5.6        L    pass
2      A01         2.3       5.6        R    pass
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
4      A01         2.8       4.5        L    pass
14     A02         2.8       4.5        L    pass
6      A01         3.5      11.2        R    fail
17     A02         3.6      12.4        R    fail
13     A02         3.9      12.1        R    fail
10     A02         4.0      10.4        R    fail
3      A01         4.0      10.2        R    fail
12     A02         4.1      10.0        R    fail
18     A02         5.5      13.3        R    fail

In [290]: exp1 = pd.read_excel('exp.xlsx', sheet_name='exp1')

In [291]: exp1
Out[291]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [292]: exp2 = pd.read_excel('exp.xlsx', sheet_name='exp2')

In [293]: exp2
Out[293]:
   subject  start_time  end_time stimulus outcome
0      A02         2.7       5.6        L    pass
1      A02         1.2       4.3        L    pass
2      A02         4.0      10.4        R    fail
3      A02         2.3       5.6        R    pass
4      A02         4.1      10.0        R    fail
5      A02         3.9      12.1        R    fail
6      A02         2.8       4.5        L    pass
7      A02         1.3       3.1        R    pass
8      A02         0.8       4.1        L    pass
9      A02         3.6      12.4        R    fail
10     A02         5.5      13.3        R    fail

In [294]: df
Out[294]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [295]: df.to_csv?

In [296]: df.to_excel('new_dataframe.xlsx')

In [297]: df
Out[297]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [298]: exp12.min()
Out[298]:
subject        A01
start_time     0.7
end_time       2.1
stimulus         L
outcome       fail
dtype: object

In [299]: type(exp12.min())
Out[299]: pandas.core.series.Series

In [300]: exp12.max()
Out[300]:
subject        A02
start_time     5.5
end_time      13.3
stimulus         R
outcome       pass
dtype: object

In [301]: exp12.sum()
Out[301]:
subject       A01A01A01A01A01A01A01A01A02A02A02A02A02A02A02A...
start_time                                                 52.1
end_time                                                  136.3
stimulus                                    LRRRLLRLLLRRRRLRLRR
outcome       passpasspassfailpasspassfailpasspasspassfailpa...
dtype: object

In [302]: exp12.mean()
Out[302]:
start_time    2.742105
end_time      7.173684
dtype: float64

In [303]: exp12.median()
Out[303]:
start_time    2.7
end_time      5.6
dtype: float64

In [304]: exp12.std()
Out[304]:
start_time    1.281629
end_time      3.502038
dtype: float64

In [305]: exp12
Out[305]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [306]: exp12['start_time']
Out[306]:
0     2.3
1     1.6
2     2.3
3     4.0
4     2.8
5     0.7
6     3.5
7     2.7
8     2.7
9     1.2
10    4.0
11    2.3
12    4.1
13    3.9
14    2.8
15    1.3
16    0.8
17    3.6
18    5.5
Name: start_time, dtype: float64

In [307]: exp12['start_time'].mean()
Out[307]: 2.7421052631578946

In [308]: exp12.describe()
Out[308]:
       start_time   end_time
count   19.000000  19.000000
mean     2.742105   7.173684
std      1.281629   3.502038
min      0.700000   2.100000
25%      1.950000   4.500000
50%      2.700000   5.600000
75%      3.750000  10.300000
max      5.500000  13.300000

In [309]: type(exp12.describe())
Out[309]: pandas.core.frame.DataFrame

In [310]: type(exp12.describe())['start_time']
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-310-16b73c08a4a8> in <module>
----> 1 type(exp12.describe())['start_time']

TypeError: 'type' object is not subscriptable
> <ipython-input-310-16b73c08a4a8>(1)<module>()
----> 1 type(exp12.describe())['start_time']

ipdb> c

In [311]: exp12.describe()['start_time']
Out[311]:
count    19.000000
mean      2.742105
std       1.281629
min       0.700000
25%       1.950000
50%       2.700000
75%       3.750000
max       5.500000
Name: start_time, dtype: float64

In [312]: type(exp12.describe()['start_time'])
Out[312]: pandas.core.series.Series

In [313]: exp12.describe()['start_time']
Out[313]:
count    19.000000
mean      2.742105
std       1.281629
min       0.700000
25%       1.950000
50%       2.700000
75%       3.750000
max       5.500000
Name: start_time, dtype: float64

In [314]: exp12.describe()['start_time'].loc['mean']
Out[314]: 2.7421052631578946

In [315]: exp12
Out[315]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [316]: exp12['subject']
Out[316]:
0     A01
1     A01
2     A01
3     A01
4     A01
5     A01
6     A01
7     A01
8     A02
9     A02
10    A02
11    A02
12    A02
13    A02
14    A02
15    A02
16    A02
17    A02
18    A02
Name: subject, dtype: object

In [317]: exp12['subject'].nunique()
Out[317]: 2

In [318]: exp12
Out[318]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [319]: exp12.groupby('outcome')
Out[319]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f1f138980b8>

In [320]: exp12.groupby('outcome').mean()
Out[320]:
         start_time   end_time
outcome
fail       4.085714  11.371429
pass       1.958333   4.725000

In [321]: exp12.groupby('outcome')
Out[321]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f1f138b0940>

In [322]: exp12.groupby('outcome').mean()
Out[322]:
         start_time   end_time
outcome
fail       4.085714  11.371429
pass       1.958333   4.725000

In [323]: exp12.groupby('outcome').std()
Out[323]:
         start_time  end_time
outcome
fail       0.661888  1.260574
pass       0.793678  1.203121

In [324]: exp12.groupby('outcome').sum()
Out[324]:
         start_time  end_time
outcome
fail           28.6      79.6
pass           23.5      56.7

In [325]: exp12.groupby('outcome').count()
Out[325]:
         subject  start_time  end_time  stimulus
outcome
fail           7           7         7         7
pass          12          12        12        12

In [326]: exp12.groupby('outcome').mean()
Out[326]:
         start_time   end_time
outcome
fail       4.085714  11.371429
pass       1.958333   4.725000

In [327]: exp12.groupby('outcome').describe()
Out[327]:
        start_time                                       ...  end_time
             count      mean       std  min    25%  50%  ...       std   min    25%    50%    75%   max
outcome                                                  ...
fail           7.0  4.085714  0.661888  3.5  3.750  4.0  ...  1.260574  10.0  10.30  11.20  12.25  13.3
pass          12.0  1.958333  0.793678  0.7  1.275  2.3  ...  1.203121   2.1   4.25   5.05   5.60   6.1

[2 rows x 16 columns]

In [328]: exp12.groupby('outcome').describe()['start_time']
Out[328]:
         count      mean       std  min    25%  50%   75%  max
outcome
fail       7.0  4.085714  0.661888  3.5  3.750  4.0  4.05  5.5
pass      12.0  1.958333  0.793678  0.7  1.275  2.3  2.70  2.8

In [329]: exp12
Out[329]:
   subject  start_time  end_time stimulus outcome
0      A01         2.3       5.6        L    pass
1      A01         1.6       2.1        R    pass
2      A01         2.3       5.6        R    pass
3      A01         4.0      10.2        R    fail
4      A01         2.8       4.5        L    pass
5      A01         0.7       6.1        L    pass
6      A01         3.5      11.2        R    fail
7      A01         2.7       5.6        L    pass
8      A02         2.7       5.6        L    pass
9      A02         1.2       4.3        L    pass
10     A02         4.0      10.4        R    fail
11     A02         2.3       5.6        R    pass
12     A02         4.1      10.0        R    fail
13     A02         3.9      12.1        R    fail
14     A02         2.8       4.5        L    pass
15     A02         1.3       3.1        R    pass
16     A02         0.8       4.1        L    pass
17     A02         3.6      12.4        R    fail
18     A02         5.5      13.3        R    fail

In [330]: exp12['end_time']
Out[330]:
0      5.6
1      2.1
2      5.6
3     10.2
4      4.5
5      6.1
6     11.2
7      5.6
8      5.6
9      4.3
10    10.4
11     5.6
12    10.0
13    12.1
14     4.5
15     3.1
16     4.1
17    12.4
18    13.3
Name: end_time, dtype: float64

In [331]: exp12['end_time'] - exp12['start_time']
Out[331]:
0     3.3
1     0.5
2     3.3
3     6.2
4     1.7
5     5.4
6     7.7
7     2.9
8     2.9
9     3.1
10    6.4
11    3.3
12    5.9
13    8.2
14    1.7
15    1.8
16    3.3
17    8.8
18    7.8
dtype: float64

In [332]: exp12['duration'] = exp12['end_time'] - exp12['start_time']

In [333]: exp12
Out[333]:
   subject  start_time  end_time stimulus outcome  duration
0      A01         2.3       5.6        L    pass       3.3
1      A01         1.6       2.1        R    pass       0.5
2      A01         2.3       5.6        R    pass       3.3
3      A01         4.0      10.2        R    fail       6.2
4      A01         2.8       4.5        L    pass       1.7
5      A01         0.7       6.1        L    pass       5.4
6      A01         3.5      11.2        R    fail       7.7
7      A01         2.7       5.6        L    pass       2.9
8      A02         2.7       5.6        L    pass       2.9
9      A02         1.2       4.3        L    pass       3.1
10     A02         4.0      10.4        R    fail       6.4
11     A02         2.3       5.6        R    pass       3.3
12     A02         4.1      10.0        R    fail       5.9
13     A02         3.9      12.1        R    fail       8.2
14     A02         2.8       4.5        L    pass       1.7
15     A02         1.3       3.1        R    pass       1.8
16     A02         0.8       4.1        L    pass       3.3
17     A02         3.6      12.4        R    fail       8.8
18     A02         5.5      13.3        R    fail       7.8

In [334]: exp12.groupby('outcome').mean()
Out[334]:
         start_time   end_time  duration
outcome
fail       4.085714  11.371429  7.285714
pass       1.958333   4.725000  2.766667

In [335]: nestedcols = exp12.groupby('outcome').describe()

In [336]: nestedcols.columns
Out[336]:
MultiIndex([('start_time', 'count'),
            ('start_time',  'mean'),
            ('start_time',   'std'),
            ('start_time',   'min'),
            ('start_time',   '25%'),
            ('start_time',   '50%'),
            ('start_time',   '75%'),
            ('start_time',   'max'),
            (  'end_time', 'count'),
            (  'end_time',  'mean'),
            (  'end_time',   'std'),
            (  'end_time',   'min'),
            (  'end_time',   '25%'),
            (  'end_time',   '50%'),
            (  'end_time',   '75%'),
            (  'end_time',   'max'),
            (  'duration', 'count'),
            (  'duration',  'mean'),
            (  'duration',   'std'),
            (  'duration',   'min'),
            (  'duration',   '25%'),
            (  'duration',   '50%'),
            (  'duration',   '75%'),
            (  'duration',   'max')],
           )

In [337]: nestcols
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-337-26c1c59ab69b> in <module>
----> 1 nestcols

NameError: name 'nestcols' is not defined
> <ipython-input-337-26c1c59ab69b>(1)<module>()
----> 1 nestcols

ipdb> c

In [338]: nestedcols
Out[338]:
        start_time                                             ...  duration
             count      mean       std  min    25%  50%   75%  ...      mean       std  min    25%  50%  75%  max
outcome                                                        ...
fail           7.0  4.085714  0.661888  3.5  3.750  4.0  4.05  ...  7.285714  1.114194  5.9  6.300  7.7  8.0  8.8
pass          12.0  1.958333  0.793678  0.7  1.275  2.3  2.70  ...  2.766667  1.227217  0.5  1.775  3.0  3.3  5.4

[2 rows x 24 columns]

In [339]: df
Out[339]:
  subject  start_time  end_time stimulus outcome
0     A01         2.3       5.6        L    pass
1     A01         1.6       2.1        R    pass
2     A01         2.3       5.6        R    pass
3     A01         4.0      10.2        R    fail
4     A01         2.8       4.5        L    pass
5     A01         0.7       6.1        L    pass
6     A01         3.5      11.2        R    fail
7     A01         2.7       5.6        L    pass

In [340]: levels = [[-180, -90, 0, 90, 180], [-45, 0, 45]]

In [341]: names = ['longitude', 'latitude']

In [342]: mi = pd.MultiIndex.from_product(levels, names=names)

In [343]: df = pd.DataFrame(index=mi, columns=columns)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-343-fec86e439d56> in <module>
----> 1 df = pd.DataFrame(index=mi, columns=columns)

NameError: name 'columns' is not defined
> <ipython-input-343-fec86e439d56>(1)<module>()
----> 1 df = pd.DataFrame(index=mi, columns=columns)

ipdb> c

In [344]: columns = ['elevation', 'temperature']

In [345]: df = pd.DataFrame(index=mi, columns=columns)

In [346]: df
Out[346]:
                   elevation temperature
longitude latitude
-180      -45            NaN         NaN
           0             NaN         NaN
           45            NaN         NaN
-90       -45            NaN         NaN
           0             NaN         NaN
           45            NaN         NaN
 0        -45            NaN         NaN
           0             NaN         NaN
           45            NaN         NaN
 90       -45            NaN         NaN
           0             NaN         NaN
           45            NaN         NaN
 180      -45            NaN         NaN
           0             NaN         NaN
           45            NaN         NaN

In [347]: missd = [[1, 2, 3],
     ...:          [4, 5],
     ...:          [7, 8, 9]]

In [348]: type(missd)
Out[348]: list

In [349]: len(missd)
Out[349]: 3

In [350]: np.array(missd)
Out[350]: array([list([1, 2, 3]), list([4, 5]), list([7, 8, 9])], dtype=object)

In [351]: np.array(missd).ndim
Out[351]: 1

In [352]: np.array(missd).shape
Out[352]: (3,)

In [353]: missd = [[1, 2, 3],
     ...:          [4, 5, np.nan],
     ...:          [7, 8, 9]]

In [354]: np.array(missd)
Out[354]:
array([[ 1.,  2.,  3.],
       [ 4.,  5., nan],
       [ 7.,  8.,  9.]])

In [355]: missd = [[1, 2, 3],
     ...:          [4, 5],
     ...:          [7, 8, 9]]

In [356]: missd
Out[356]: [[1, 2, 3], [4, 5], [7, 8, 9]]

In [357]: pd.DataFrame(missd)
Out[357]:
   0  1    2
0  1  2  3.0
1  4  5  NaN
2  7  8  9.0

In [358]: pd.DataFrame(missd).mean()
Out[358]:
0    4.0
1    5.0
2    6.0
dtype: float64

In [359]:

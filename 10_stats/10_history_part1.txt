
mspacek@Godel:~/SciPyCourse2020/notes/09_pandas$ ipython
Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: pd.read_csv
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-5b631b2e1c67> in <module>
----> 1 pd.read_csv

NameError: name 'pd' is not defined
> <ipython-input-1-5b631b2e1c67>(1)<module>()
----> 1 pd.read_csv

ipdb> c

In [2]: import pandas as pd

In [3]: ls
09_history.txt  09_pandas.pdf                    exp1.csv  exp.xlsx    t.npy
09_pandas.md    DataFrame_exercise_solutions.py  exp2.csv  Galton.csv  V.npy

In [4]: gdf = pd.read_csv('Galton.csv')

In [5]: gdf
Out[5]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [6]: nrows = len(gdf)

In [7]: gdf.shape
Out[7]: (898, 6)

In [8]: fam = gdf.groupby('Family')

In [9]: len(fam)
Out[9]: 197

In [10]: fam
Out[10]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f96ec00da90>

In [11]: fam.shape
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-11-e61691287406> in <module>
----> 1 fam.shape

/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py in __getattr__(self, attr)
    561             return self[attr]
    562         if hasattr(self.obj, attr):
--> 563             return self._make_wrapper(attr)
    564
    565         raise AttributeError(

/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py in _make_wrapper(self, name)
    602                 "using the 'apply' method".format(kind, name, type(self).__name__)
    603             )
--> 604             raise AttributeError(msg)
    605
    606         self._set_group_selection()

AttributeError: Cannot access attribute 'shape' of 'DataFrameGroupBy' objects, try using the 'apply' method
> /usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py(604)_make_wrapper()
    602                 "using the 'apply' method".format(kind, name, type(self).__name__)
    603             )
--> 604             raise AttributeError(msg)
    605
    606         self._set_group_selection()

ipdb> c

In [12]: len(fam)
Out[12]: 197

In [13]: gdf
Out[13]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [14]: gdf['Family'].nunique()
Out[14]: 197

In [15]: fam.describe()
Out[15]:
       Father                               ... Kids
        count  mean  std   min   25%   50%  ...  std   min   25%   50%   75%   max
Family                                      ...
1         4.0  78.5  0.0  78.5  78.5  78.5  ...  0.0   4.0   4.0   4.0   4.0   4.0
10        1.0  74.0  NaN  74.0  74.0  74.0  ...  NaN   1.0   1.0   1.0   1.0   1.0
100       3.0  69.0  0.0  69.0  69.0  69.0  ...  0.0   3.0   3.0   3.0   3.0   3.0
101       6.0  69.0  0.0  69.0  69.0  69.0  ...  0.0   6.0   6.0   6.0   6.0   6.0
102       6.0  69.0  0.0  69.0  69.0  69.0  ...  0.0   6.0   6.0   6.0   6.0   6.0
...       ...   ...  ...   ...   ...   ...  ...  ...   ...   ...   ...   ...   ...
95        3.0  70.0  0.0  70.0  70.0  70.0  ...  0.0   3.0   3.0   3.0   3.0   3.0
96        5.0  70.0  0.0  70.0  70.0  70.0  ...  0.0   5.0   5.0   5.0   5.0   5.0
97       10.0  69.0  0.0  69.0  69.0  69.0  ...  0.0  10.0  10.0  10.0  10.0  10.0
98        1.0  69.0  NaN  69.0  69.0  69.0  ...  NaN   1.0   1.0   1.0   1.0   1.0
99        8.0  69.0  0.0  69.0  69.0  69.0  ...  0.0   8.0   8.0   8.0   8.0   8.0

[197 rows x 32 columns]

In [16]: fam['Kids'].describe()
Out[16]:
        count  mean  std   min   25%   50%   75%   max
Family
1         4.0   4.0  0.0   4.0   4.0   4.0   4.0   4.0
10        1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
100       3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
101       6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
102       6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
...       ...   ...  ...   ...   ...   ...   ...   ...
95        3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
96        5.0   5.0  0.0   5.0   5.0   5.0   5.0   5.0
97       10.0  10.0  0.0  10.0  10.0  10.0  10.0  10.0
98        1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
99        8.0   8.0  0.0   8.0   8.0   8.0   8.0   8.0

[197 rows x 8 columns]

In [17]: gdf
Out[17]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [18]: fam['Kids'].count()
Out[18]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [19]: fam['Kids'].count().sum()
Out[19]: 898

In [20]: len(gdf)
Out[20]: 898

In [21]: fam['Kids']
Out[21]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f971bd0f278>

In [22]: fam['Kids']
Out[22]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f971bceadd8>

In [23]: fam.max()
Out[23]:
        Father  Mother Gender  Height  Kids
Family
1         78.5    67.0      M    73.2     4
10        74.0    65.5      F    65.5     1
100       69.0    66.0      M    71.2     3
101       69.0    66.7      M    75.0     6
102       69.0    66.0      M    70.0     6
...        ...     ...    ...     ...   ...
95        70.0    58.5      M    71.5     3
96        70.0    58.0      M    72.0     5
97        69.0    68.5      M    75.0    10
98        69.0    67.0      F    64.0     1
99        69.0    66.0      M    73.0     8

[197 rows x 5 columns]

In [24]: fam.max()['Kids']
Out[24]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [25]: fam.min()['Kids']
Out[25]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [26]: fam.median()['Kids']
Out[26]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [27]: fam.mean()['Kids']
Out[27]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [28]: fam.mean()['Kids'].sum()
Out[28]: 899

In [29]: len(gdf)
Out[29]: 898

In [30]: fam.max()['Kids'].sum()
Out[30]: 899

In [31]: fam['Kids'].max().sum()
Out[31]: 899

In [32]: fam.max()['Kids'].sum()
Out[32]: 899

In [33]: fam['Kids'].max().sum()
Out[33]: 899

In [34]: fam['Kids'].count()
Out[34]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [35]: fam['Kids'].max()
Out[35]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [36]: pd.set_option('display.max_rows', None)

In [37]: fam['Kids'].max()
Out[37]:
Family
1        4
10       1
100      3
101      6
102      6
103      5
104      4
105      6
106      7
107      9
108      7
109      7
11       8
110      4
112      3
113      1
114      6
115      7
116      3
117      1
118      3
119      5
12       1
121      8
122      4
123      5
124      9
125      3
126      4
127      1
128      2
129      3
130     11
131      2
132      2
133      7
134      4
135      8
136     10
136A     8
137      4
138      5
139      1
14       2
140     10
141      8
142      4
143      1
144      4
145      8
146      6
147      1
148      1
149      5
15       3
150      1
151      2
152      1
153      5
154      1
155      7
156      4
157      1
158     10
159      5
16       9
160      1
162      6
163      5
164      4
165      3
166     11
167      4
168      8
169      3
17       6
170      5
171      1
172      8
173      9
174      5
175      6
176      8
177      5
178      1
179      2
18       3
180      6
181      7
182      1
183      4
184      1
185     15
186      4
187      1
188      4
19       1
190      9
191      2
192      6
193      6
194      2
195      3
196      4
197      5
198      7
199      7
2        4
20       8
200      1
201      2
203      3
204      2
21       3
22       3
23       7
24       1
25       2
26       5
27       3
28       6
29       3
3        2
30       1
31       6
32       5
33       5
34       1
35       5
36       4
37       4
38       6
39       2
4        5
40       5
41       1
42       6
43       2
44       2
45       3
46       8
47       4
48       3
49       7
5        6
51       2
52       5
53       9
54       4
55       5
56       5
57       5
58       7
59       1
6        1
60       2
61       4
62       6
63       1
64       5
65       1
66      11
67       4
68       5
69       8
7        6
70       5
71       6
72       7
73       3
74       2
75       7
76       7
77       4
78       5
79       8
8        3
80       1
81       4
82       9
83       8
85       5
86       4
87       4
88       4
89       8
9        1
90       7
91       3
92       2
93       4
94       2
95       3
96       5
97      10
98       1
99       8
Name: Kids, dtype: int64

In [38]: fam['Kids'].count()
Out[38]:
Family
1        4
10       1
100      3
101      6
102      6
103      5
104      4
105      6
106      7
107      9
108      7
109      7
11       8
110      4
112      3
113      1
114      6
115      7
116      3
117      1
118      3
119      5
12       1
121      8
122      4
123      5
124      9
125      3
126      4
127      1
128      2
129      3
130     10
131      2
132      2
133      7
134      4
135      8
136     10
136A     8
137      4
138      5
139      1
14       2
140     10
141      8
142      4
143      1
144      4
145      8
146      6
147      1
148      1
149      5
15       3
150      1
151      2
152      1
153      5
154      1
155      7
156      4
157      1
158     10
159      5
16       9
160      1
162      6
163      5
164      4
165      3
166     11
167      4
168      8
169      3
17       6
170      5
171      1
172      8
173      9
174      5
175      6
176      8
177      5
178      1
179      2
18       3
180      6
181      7
182      1
183      4
184      1
185     15
186      4
187      1
188      4
19       1
190      9
191      2
192      6
193      6
194      2
195      3
196      4
197      5
198      7
199      7
2        4
20       8
200      1
201      2
203      3
204      2
21       3
22       3
23       7
24       1
25       2
26       5
27       3
28       6
29       3
3        2
30       1
31       6
32       5
33       5
34       1
35       5
36       4
37       4
38       6
39       2
4        5
40       5
41       1
42       6
43       2
44       2
45       3
46       8
47       4
48       3
49       7
5        6
51       2
52       5
53       9
54       4
55       5
56       5
57       5
58       7
59       1
6        1
60       2
61       4
62       6
63       1
64       5
65       1
66      11
67       4
68       5
69       8
7        6
70       5
71       6
72       7
73       3
74       2
75       7
76       7
77       4
78       5
79       8
8        3
80       1
81       4
82       9
83       8
85       5
86       4
87       4
88       4
89       8
9        1
90       7
91       3
92       2
93       4
94       2
95       3
96       5
97      10
98       1
99       8
Name: Kids, dtype: int64

In [39]: fam['Kids'].max()
Out[39]:
Family
1        4
10       1
100      3
101      6
102      6
103      5
104      4
105      6
106      7
107      9
108      7
109      7
11       8
110      4
112      3
113      1
114      6
115      7
116      3
117      1
118      3
119      5
12       1
121      8
122      4
123      5
124      9
125      3
126      4
127      1
128      2
129      3
130     11
131      2
132      2
133      7
134      4
135      8
136     10
136A     8
137      4
138      5
139      1
14       2
140     10
141      8
142      4
143      1
144      4
145      8
146      6
147      1
148      1
149      5
15       3
150      1
151      2
152      1
153      5
154      1
155      7
156      4
157      1
158     10
159      5
16       9
160      1
162      6
163      5
164      4
165      3
166     11
167      4
168      8
169      3
17       6
170      5
171      1
172      8
173      9
174      5
175      6
176      8
177      5
178      1
179      2
18       3
180      6
181      7
182      1
183      4
184      1
185     15
186      4
187      1
188      4
19       1
190      9
191      2
192      6
193      6
194      2
195      3
196      4
197      5
198      7
199      7
2        4
20       8
200      1
201      2
203      3
204      2
21       3
22       3
23       7
24       1
25       2
26       5
27       3
28       6
29       3
3        2
30       1
31       6
32       5
33       5
34       1
35       5
36       4
37       4
38       6
39       2
4        5
40       5
41       1
42       6
43       2
44       2
45       3
46       8
47       4
48       3
49       7
5        6
51       2
52       5
53       9
54       4
55       5
56       5
57       5
58       7
59       1
6        1
60       2
61       4
62       6
63       1
64       5
65       1
66      11
67       4
68       5
69       8
7        6
70       5
71       6
72       7
73       3
74       2
75       7
76       7
77       4
78       5
79       8
8        3
80       1
81       4
82       9
83       8
85       5
86       4
87       4
88       4
89       8
9        1
90       7
91       3
92       2
93       4
94       2
95       3
96       5
97      10
98       1
99       8
Name: Kids, dtype: int64

In [40]: pd.set_option('display.max_rows', 10)

In [41]: fam['Kids'].max()
Out[41]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [42]: fam['Kids'].count()
Out[42]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [43]: type(fam['Kids'].count())
Out[43]: pandas.core.series.Series

In [44]: type(fam['Kids'].max())
Out[44]: pandas.core.series.Series

In [45]: fam['Kids'].count() == fam['Kids'].max()
Out[45]:
Family
1      True
10     True
100    True
101    True
102    True
       ...
95     True
96     True
97     True
98     True
99     True
Name: Kids, Length: 197, dtype: bool

In [46]: (fam['Kids'].count() == fam['Kids'].max()).all()
Out[46]: False

In [47]: (fam['Kids'].count() != fam['Kids'].max())
Out[47]:
Family
1      False
10     False
100    False
101    False
102    False
       ...
95     False
96     False
97     False
98     False
99     False
Name: Kids, Length: 197, dtype: bool

In [48]: np.where(fam['Kids'].count() != fam['Kids'].max())
Out[48]: (array([32]),)

In [49]: np.where(fam['Kids'].count() != fam['Kids'].max())[0]
Out[49]: array([32])

In [50]: fam.max()
Out[50]:
        Father  Mother Gender  Height  Kids
Family
1         78.5    67.0      M    73.2     4
10        74.0    65.5      F    65.5     1
100       69.0    66.0      M    71.2     3
101       69.0    66.7      M    75.0     6
102       69.0    66.0      M    70.0     6
...        ...     ...    ...     ...   ...
95        70.0    58.5      M    71.5     3
96        70.0    58.0      M    72.0     5
97        69.0    68.5      M    75.0    10
98        69.0    67.0      F    64.0     1
99        69.0    66.0      M    73.0     8

[197 rows x 5 columns]

In [51]: fam.max().iloc[32]
Out[51]:
Father    68.5
Mother    66.5
Gender       M
Height      70
Kids        11
Name: 130, dtype: object

In [52]: fam.count().iloc[32]
Out[52]:
Father    10
Mother    10
Gender    10
Height    10
Kids      10
Name: 130, dtype: int64

In [53]: len(gdf)
Out[53]: 898

In [54]: fam['Kids'].max().sum()
Out[54]: 899

In [55]: gdf.mean()
Out[55]:
Father    69.232851
Mother    64.084410
Height    66.760690
Kids       6.135857
dtype: float64

In [56]: gdf.mean()
Out[56]:
Father    69.232851
Mother    64.084410
Height    66.760690
Kids       6.135857
dtype: float64

In [57]: gdf['Kids']
Out[57]:
0      4
1      4
2      4
3      4
4      4
      ..
893    8
894    8
895    8
896    8
897    8
Name: Kids, Length: 898, dtype: int64

In [58]: gdf['Height']
Out[58]:
0      73.2
1      69.2
2      69.0
3      69.0
4      73.5
       ...
893    68.5
894    67.7
895    64.0
896    63.5
897    63.0
Name: Height, Length: 898, dtype: float64

In [59]: gdf['Height'].mean()
Out[59]: 66.76069042316259

In [60]: ax = gdf['Height'].plot.hist()

In [61]: ax = gdf['Height'].hist()

In [62]: ax = gdf['Height'].plot.hist()

In [63]: ax.set_xlabel('Child height (in)')
Out[63]: Text(0.5, 13.94444444444443, 'Child height (in)')

In [64]: ax.set_ylabel('Count')
Out[64]: Text(37.5, 0.5, 'Count')

In [65]: gdf
Out[65]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [66]: gdf['Family'] != '136A'
Out[66]:
0       True
1       True
2       True
3       True
4       True
       ...
893    False
894    False
895    False
896    False
897    False
Name: Family, Length: 898, dtype: bool

In [67]: keepis = gdf['Family'] != '136A'

In [68]: gdf[keepis]
Out[68]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [69]: gdf.loc[keepis]
Out[69]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [70]: gdf.loc[gdf['Family'] != '136A']
Out[70]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [71]: subset = gdf.loc[gdf['Family'] != '136A']

In [72]: subset.shape
Out[72]: (890, 6)

In [73]: subset['Family'].nunique()
Out[73]: 196

In [74]: len(subset.groupby('Family))
  File "<ipython-input-74-0a5e07d0ad59>", line 1
    len(subset.groupby('Family))
                                ^
SyntaxError: EOL while scanning string literal


In [75]: len(subset.groupby('Family'))
Out[75]: 196

In [76]: gdf['Father'].mean()
Out[76]: 69.23285077951002

In [77]: fam = gdf.groupby('Family')

In [78]: fam['Father']
Out[78]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f971bd3b400>

In [79]: fam['Father'].max()
Out[79]:
Family
1      78.5
10     74.0
100    69.0
101    69.0
102    69.0
       ...
95     70.0
96     70.0
97     69.0
98     69.0
99     69.0
Name: Father, Length: 197, dtype: float64

In [80]: fam['Father'].max().mean()
Out[80]: 69.3492385786802

In [81]: fam['Mother'].max().mean()
Out[81]: 63.98426395939087

In [82]: ax = gdf.plot.scatter('Father', 'Mother')

In [83]: fam[['Father', 'Mother']]
Out[83]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f96ce8791d0>

In [84]: fam[['Father', 'Mother']].max()
Out[84]:
        Father  Mother
Family
1         78.5    67.0
10        74.0    65.5
100       69.0    66.0
101       69.0    66.7
102       69.0    66.0
...        ...     ...
95        70.0    58.5
96        70.0    58.0
97        69.0    68.5
98        69.0    67.0
99        69.0    66.0

[197 rows x 2 columns]

In [85]: fam.max()
Out[85]:
        Father  Mother Gender  Height  Kids
Family
1         78.5    67.0      M    73.2     4
10        74.0    65.5      F    65.5     1
100       69.0    66.0      M    71.2     3
101       69.0    66.7      M    75.0     6
102       69.0    66.0      M    70.0     6
...        ...     ...    ...     ...   ...
95        70.0    58.5      M    71.5     3
96        70.0    58.0      M    72.0     5
97        69.0    68.5      M    75.0    10
98        69.0    67.0      F    64.0     1
99        69.0    66.0      M    73.0     8

[197 rows x 5 columns]

In [86]: fam[['Father', 'Mother']].max()
Out[86]:
        Father  Mother
Family
1         78.5    67.0
10        74.0    65.5
100       69.0    66.0
101       69.0    66.7
102       69.0    66.0
...        ...     ...
95        70.0    58.5
96        70.0    58.0
97        69.0    68.5
98        69.0    67.0
99        69.0    66.0

[197 rows x 2 columns]

In [87]: fam[['Father', 'Mother']].plot.scatter('Father', 'Mother')
Out[87]:
Family
1      AxesSubplot(0.1,0.1;0.85x0.8)
10     AxesSubplot(0.1,0.1;0.85x0.8)
100    AxesSubplot(0.1,0.1;0.85x0.8)
101    AxesSubplot(0.1,0.1;0.85x0.8)
102    AxesSubplot(0.1,0.1;0.85x0.8)
                   ...
95     AxesSubplot(0.1,0.1;0.85x0.8)
96     AxesSubplot(0.1,0.1;0.85x0.8)
97     AxesSubplot(0.1,0.1;0.85x0.8)
98     AxesSubplot(0.1,0.1;0.85x0.8)
99     AxesSubplot(0.1,0.1;0.85x0.8)
Length: 197, dtype: object

In [88]: plt.close('all')

In [89]: ax = gdf.plot.scatter('Father', 'Mother')

In [90]: gdf[['Father', 'Mother']].corr()
Out[90]:
          Father    Mother
Father  1.000000  0.073665
Mother  0.073665  1.000000

In [91]: gdf[['Father', 'Mother']].corr().iloc[1, 0]
Out[91]: 0.07366461114144433

In [92]: fam.corr()
Out[92]:
               Father  Mother  Height  Kids
Family
1      Father     NaN     NaN     NaN   NaN
       Mother     NaN     NaN     NaN   NaN
       Height     NaN     NaN     1.0   NaN
       Kids       NaN     NaN     NaN   NaN
10     Father     NaN     NaN     NaN   NaN
...               ...     ...     ...   ...
98     Kids       NaN     NaN     NaN   NaN
99     Father     NaN     NaN     NaN   NaN
       Mother     NaN     NaN     NaN   NaN
       Height     NaN     NaN     1.0   NaN
       Kids       NaN     NaN     NaN   NaN

[788 rows x 4 columns]

In [93]: fam[['Father', 'Mother']].corr()
Out[93]:
               Father  Mother
Family
1      Father     NaN     NaN
       Mother     NaN     NaN
10     Father     NaN     NaN
       Mother     NaN     NaN
100    Father     NaN     NaN
...               ...     ...
97     Mother     NaN     NaN
98     Father     NaN     NaN
       Mother     NaN     NaN
99     Father     NaN     NaN
       Mother     NaN     NaN

[394 rows x 2 columns]

In [94]: fam[['Father', 'Mother']].max().corr()
Out[94]:
          Father    Mother
Father  1.000000  0.100606
Mother  0.100606  1.000000

In [95]: mgdf = pd.DataFrame()

In [96]: mgdf
Out[96]:
Empty DataFrame
Columns: []
Index: []

In [97]: mgdf['MeanHeight'] = fam['Height'].mean()

In [98]: mgdf
Out[98]:
        MeanHeight
Family
1        70.100000
10       65.500000
100      70.733333
101      70.416667
102      66.166667
...            ...
95       66.333333
96       66.400000
97       67.150000
98       64.000000
99       67.987500

[197 rows x 1 columns]

In [99]: mgdf['Father'] = fam['Father'].max()

In [100]: mgdf['Mother'] = fam['Mother'].max()

In [101]: mgdf
Out[101]:
        MeanHeight  Father  Mother
Family
1        70.100000    78.5    67.0
10       65.500000    74.0    65.5
100      70.733333    69.0    66.0
101      70.416667    69.0    66.7
102      66.166667    69.0    66.0
...            ...     ...     ...
95       66.333333    70.0    58.5
96       66.400000    70.0    58.0
97       67.150000    69.0    68.5
98       64.000000    69.0    67.0
99       67.987500    69.0    66.0

[197 rows x 3 columns]

In [102]: ax = mgdf.plot.scatter('Father', 'MeanHeight')

In [103]: ax = mgdf.plot.scatter('Mother', 'MeanHeight')

In [104]: mgdf.corr()
Out[104]:
            MeanHeight    Father    Mother
MeanHeight     1.00000  0.334510  0.261300
Father         0.33451  1.000000  0.100606
Mother         0.26130  0.100606  1.000000

In [105]: pwd
Out[105]: '/home/mspacek/SciPyCourse2020/notes/09_pandas'

In [106]: cd ..
/home/mspacek/SciPyCourse2020/notes

In [107]: ls
00_intro/            04_numpy/         08_images/      12_organizing/  homework4/
01_Python_basics/    05_numpy_dtype/   09_pandas/      homework1/      old_notes/
02_Python_basics_2/  06_fileio_mpl/    10_stats/       homework2/      README.md
03_collections/      07_mpl_matrices/  11_clustering/  homework3/

In [108]: cd homework4/
/home/mspacek/SciPyCourse2020/notes/homework4

In [109]: ls
homework4.md          homework4_solutions.pdf  nissl_gray.png   student_solutions/
homework4.pdf         homework4_solutions.py   nissl.tif
homework4_samples.py  misc/                    stroop_data.csv

In [110]: data = pd.read_csv('stroop_data.csv')

In [111]: data
Out[111]:
      subject  trial stimword stimcolor respcolor  reaction_time
0      156772      1        Y         Y         Y           1389
1      156772      2        G         G         G           2043
2      156772      3        R         R         R           1389
3      156772      4        Y         Y         Y           1092
4      156772      5        G         G         G           1310
...       ...    ...      ...       ...       ...            ...
1948   156875     86        G         G         G            936
1949   156875     87        Y         Y         Y            944
1950   156875     88        R         R         R            984
1951   156875     89        G         G         G           1096
1952   156875     90        R         R         R            984

[1953 rows x 6 columns]

In [112]: len(data)
Out[112]: 1953

In [113]: data.grouby('subject').describe()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-113-d949c5a1d0da> in <module>
----> 1 data.grouby('subject').describe()

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in __getattr__(self, name)
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'grouby'
> /usr/local/lib/python3.6/dist-packages/pandas/core/generic.py(5179)__getattr__()
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

ipdb> c

In [114]: data.groupby('subject').describe()
Out[114]:
        trial                                    ... reaction_time
        count       mean        std  min    25%  ...           min      25%     50%     75%     max
subject                                          ...
156772   90.0  45.500000  26.124701  1.0  23.25  ...         639.0  1029.00  1389.0  1572.0  2387.0
156839   90.0  45.500000  26.124701  1.0  23.25  ...         119.0   200.00   452.0   624.0  5770.0
156856   90.0  45.500000  26.124701  1.0  23.25  ...         219.0   826.25   998.0  1275.0  2355.0
156857   89.0  46.000000  25.836021  2.0  24.00  ...         584.0   944.00  1263.0  1696.0  5312.0
156858   89.0  46.000000  25.836021  2.0  24.00  ...         584.0   944.00  1263.0  1696.0  5312.0
...       ...        ...        ...  ...    ...  ...           ...      ...     ...     ...     ...
156871   89.0  45.898876  25.995649  1.0  24.00  ...         440.0  1056.00  1583.0  2149.0  4208.0
156872   87.0  46.931034  25.377060  2.0  25.50  ...        1176.0  1560.00  1944.0  2279.5  4600.0
156873   89.0  45.898876  25.995649  1.0  24.00  ...         440.0  1056.00  1583.0  2149.0  4208.0
156874   89.0  45.898876  25.995649  1.0  24.00  ...         440.0  1056.00  1583.0  2149.0  4208.0
156875   85.0  46.858824  25.735908  3.0  25.00  ...         896.0  1096.00  1551.0  1968.0  5760.0

[22 rows x 16 columns]

In [115]: data.groupby('subject').describe()
Out[115]:
        trial                                                      reaction_time
        count       mean        std  min    25%   50%    75%   max         count         mean          std     min      25%     50%     75%     max
subject
156772   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1339.344444   360.489840   639.0  1029.00  1389.0  1572.0  2387.0
156839   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0   601.711111   739.645029   119.0   200.00   452.0   624.0  5770.0
156856   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1080.044444   379.719202   219.0   826.25   998.0  1275.0  2355.0
156857   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
156858   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
...       ...        ...        ...  ...    ...   ...    ...   ...           ...          ...          ...     ...      ...     ...     ...     ...
156871   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156872   87.0  46.931034  25.377060  2.0  25.50  47.0  68.50  90.0          87.0  2064.712644   659.718666  1176.0  1560.00  1944.0  2279.5  4600.0
156873   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156874   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156875   85.0  46.858824  25.735908  3.0  25.00  47.0  69.00  90.0          85.0  1844.541176  1111.735693   896.0  1096.00  1551.0  1968.0  5760.0

[22 rows x 16 columns]

In [116]: data
Out[116]:
      subject  trial stimword stimcolor respcolor  reaction_time
0      156772      1        Y         Y         Y           1389
1      156772      2        G         G         G           2043
2      156772      3        R         R         R           1389
3      156772      4        Y         Y         Y           1092
4      156772      5        G         G         G           1310
...       ...    ...      ...       ...       ...            ...
1948   156875     86        G         G         G            936
1949   156875     87        Y         Y         Y            944
1950   156875     88        R         R         R            984
1951   156875     89        G         G         G           1096
1952   156875     90        R         R         R            984

[1953 rows x 6 columns]

In [117]: len(data.groupby('subject'))
Out[117]: 22

In [118]: description = data.grouby('subject').describe()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-118-089002b479c3> in <module>
----> 1 description = data.grouby('subject').describe()

/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py in __getattr__(self, name)
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'grouby'
> /usr/local/lib/python3.6/dist-packages/pandas/core/generic.py(5179)__getattr__()
   5177             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   5178                 return self[name]
-> 5179             return object.__getattribute__(self, name)
   5180
   5181     def __setattr__(self, name, value):

ipdb> c

In [119]: description = data.groupby('subject').describe()

In [120]: description
Out[120]:
        trial                                                      reaction_time
        count       mean        std  min    25%   50%    75%   max         count         mean          std     min      25%     50%     75%     max
subject
156772   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1339.344444   360.489840   639.0  1029.00  1389.0  1572.0  2387.0
156839   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0   601.711111   739.645029   119.0   200.00   452.0   624.0  5770.0
156856   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1080.044444   379.719202   219.0   826.25   998.0  1275.0  2355.0
156857   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
156858   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
...       ...        ...        ...  ...    ...   ...    ...   ...           ...          ...          ...     ...      ...     ...     ...     ...
156871   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156872   87.0  46.931034  25.377060  2.0  25.50  47.0  68.50  90.0          87.0  2064.712644   659.718666  1176.0  1560.00  1944.0  2279.5  4600.0
156873   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156874   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156875   85.0  46.858824  25.735908  3.0  25.00  47.0  69.00  90.0          85.0  1844.541176  1111.735693   896.0  1096.00  1551.0  1968.0  5760.0

[22 rows x 16 columns]

In [121]: description['reaction_time']
Out[121]:
         count         mean          std     min      25%     50%     75%     max
subject
156772    90.0  1339.344444   360.489840   639.0  1029.00  1389.0  1572.0  2387.0
156839    90.0   601.711111   739.645029   119.0   200.00   452.0   624.0  5770.0
156856    90.0  1080.044444   379.719202   219.0   826.25   998.0  1275.0  2355.0
156857    89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
156858    89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
...        ...          ...          ...     ...      ...     ...     ...     ...
156871    89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156872    87.0  2064.712644   659.718666  1176.0  1560.00  1944.0  2279.5  4600.0
156873    89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156874    89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156875    85.0  1844.541176  1111.735693   896.0  1096.00  1551.0  1968.0  5760.0

[22 rows x 8 columns]

In [122]: description['reaction_time']['mean']
Out[122]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: mean, Length: 22, dtype: float64

In [123]: description['reaction_time']['mean'].mean()
Out[123]: 1644.6076765320759

In [124]: data.groupby('subject').describe()
Out[124]:
        trial                                                      reaction_time
        count       mean        std  min    25%   50%    75%   max         count         mean          std     min      25%     50%     75%     max
subject
156772   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1339.344444   360.489840   639.0  1029.00  1389.0  1572.0  2387.0
156839   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0   601.711111   739.645029   119.0   200.00   452.0   624.0  5770.0
156856   90.0  45.500000  26.124701  1.0  23.25  45.5  67.75  90.0          90.0  1080.044444   379.719202   219.0   826.25   998.0  1275.0  2355.0
156857   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
156858   89.0  46.000000  25.836021  2.0  24.00  46.0  68.00  90.0          89.0  1523.977528   888.860302   584.0   944.00  1263.0  1696.0  5312.0
...       ...        ...        ...  ...    ...   ...    ...   ...           ...          ...          ...     ...      ...     ...     ...     ...
156871   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156872   87.0  46.931034  25.377060  2.0  25.50  47.0  68.50  90.0          87.0  2064.712644   659.718666  1176.0  1560.00  1944.0  2279.5  4600.0
156873   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156874   89.0  45.898876  25.995649  1.0  24.00  46.0  68.00  90.0          89.0  1700.865169   819.255124   440.0  1056.00  1583.0  2149.0  4208.0
156875   85.0  46.858824  25.735908  3.0  25.00  47.0  69.00  90.0          85.0  1844.541176  1111.735693   896.0  1096.00  1551.0  1968.0  5760.0

[22 rows x 16 columns]

In [125]: data.groupby('subject')['reaction_time']
Out[125]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f96ce856ba8>

In [126]: data.groupby('subject')['reaction_time'].mean()
Out[126]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: reaction_time, Length: 22, dtype: float64

In [127]: data.groupby('subject')['reaction_time'].mean()
Out[127]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: reaction_time, Length: 22, dtype: float64

In [128]: data.groupby('subject')['reaction_time'].mean()
Out[128]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: reaction_time, Length: 22, dtype: float64

In [129]: data.groupby('subject')['reaction_time'].mean()
Out[129]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: reaction_time, Length: 22, dtype: float64

In [130]: data.groupby('subject')['reaction_time'].mean()
Out[130]:
subject
156772    1339.344444
156839     601.711111
156856    1080.044444
156857    1523.977528
156858    1523.977528
             ...
156871    1700.865169
156872    2064.712644
156873    1700.865169
156874    1700.865169
156875    1844.541176
Name: reaction_time, Length: 22, dtype: float64

In [131]: data.groupby('subject')['reaction_time'].mean().mean()
Out[131]: 1644.6076765320759

In [132]: f, ax = plt.subplots()

In [133]: nbins = 30

In [134]: ax.hist(data['reaction_time'], bins=nbins)
Out[134]:
(array([ 37.,  28.,  50., 135., 259., 233., 225., 174., 149., 159., 110.,
         87.,  69.,  55.,  34.,  29.,  34.,   5.,   8.,  24.,  15.,   9.,
          3.,   2.,   3.,   1.,   7.,   7.,   0.,   2.]),
 array([ 119.        ,  307.36666667,  495.73333333,  684.1       ,
         872.46666667, 1060.83333333, 1249.2       , 1437.56666667,
        1625.93333333, 1814.3       , 2002.66666667, 2191.03333333,
        2379.4       , 2567.76666667, 2756.13333333, 2944.5       ,
        3132.86666667, 3321.23333333, 3509.6       , 3697.96666667,
        3886.33333333, 4074.7       , 4263.06666667, 4451.43333333,
        4639.8       , 4828.16666667, 5016.53333333, 5204.9       ,
        5393.26666667, 5581.63333333, 5770.        ]),
 <a list of 30 Patch objects>)

In [135]: f2, ax2 = plt.subplots()

In [136]: np.logspace?

In [137]: edges = np.logspace(2, 4, nbins+1)

In [138]: edges
Out[138]:
array([  100.        ,   116.59144012,   135.93563909,   158.48931925,
         184.78497974,   215.443469  ,   251.18864315,   292.86445646,
         341.45488738,   398.10717055,   464.15888336,   541.16952655,
         630.95734448,   735.64225446,   857.69589859,  1000.        ,
        1165.91440118,  1359.35639088,  1584.89319246,  1847.84979742,
        2154.43469003,  2511.88643151,  2928.64456463,  3414.54887383,
        3981.07170553,  4641.58883361,  5411.69526546,  6309.5734448 ,
        7356.4225446 ,  8576.95898591, 10000.        ])

In [139]: ax2.hist(data['reaction_time'], bins=edges)
Out[139]:
(array([  0.,   4.,   5.,  10.,  12.,   4.,   2.,   1.,   4.,  18.,  19.,
         28.,  33.,  93., 187., 206., 249., 196., 243., 229., 167.,  84.,
         76.,  35.,  28.,  18.,   2.,   0.,   0.,   0.]),
 array([  100.        ,   116.59144012,   135.93563909,   158.48931925,
          184.78497974,   215.443469  ,   251.18864315,   292.86445646,
          341.45488738,   398.10717055,   464.15888336,   541.16952655,
          630.95734448,   735.64225446,   857.69589859,  1000.        ,
         1165.91440118,  1359.35639088,  1584.89319246,  1847.84979742,
         2154.43469003,  2511.88643151,  2928.64456463,  3414.54887383,
         3981.07170553,  4641.58883361,  5411.69526546,  6309.5734448 ,
         7356.4225446 ,  8576.95898591, 10000.        ]),
 <a list of 30 Patch objects>)

In [140]: ax2.set_xscale('log')

In [141]: ax2.set_xlabel('Log Reaction time (ms)')
Out[141]: Text(0.5, 13.944444444444438, 'Log Reaction time (ms)')

In [142]: ax2.set_ylabel('Trial count')
Out[142]: Text(13.944444444444438, 0.5, 'Trial count')

In [143]: f2.canvas.set_window_title('Log Reaction time distribution')

In [144]:

In [144]:

In [144]:

In [144]: pwd
Out[144]: '/home/mspacek/SciPyCourse2020/notes/homework4'

In [145]: ls
homework4.md                        misc/
homework4.pdf                       nissl_gray.png
homework4_samples.py                nissl.tif
homework4_solutions.pdf             stroop_data.csv
homework4_solutions.py              student_solutions/
Log_Reaction_time_distribution.png

In [146]: from skimage import io

In [147]: io.imread?
Signature: io.imread(fname, as_gray=False, plugin=None, **plugin_args)
Docstring:
Load an image from file.

Parameters
----------
fname : string
    Image file name, e.g. ``test.jpg`` or URL.
as_gray : bool, optional
    If True, convert color images to gray-scale (64-bit floats).
    Images that are already in gray-scale format are not converted.
plugin : str, optional
    Name of plugin to use.  By default, the different plugins are
    tried (starting with imageio) until a suitable
    candidate is found.  If not given and fname is a tiff file, the
    tifffile plugin will be used.

Other Parameters
----------------
plugin_args : keywords
    Passed to the given plugin.

Returns
-------
img_array : ndarray
    The different color bands/channels are stored in the
    third dimension, such that a gray-image is MxN, an
    RGB-image MxNx3 and an RGBA-image MxNx4.
File:      /usr/local/lib/python3.6/dist-packages/skimage/io/_io.py
Type:      function

In [148]: data = io.imread('nissl.tif')

In [149]: data.shape
Out[149]: (2048, 2048, 3)

In [150]: data.dtype
Out[150]: dtype('uint8')

In [151]: 2**8
Out[151]: 256

In [152]: 0, 255
Out[152]: (0, 255)

In [153]: f1, ax1 = plt.subplots()

In [154]: ax1.imshow(data)
Out[154]: <matplotlib.image.AxesImage at 0x7f96a1a897f0>

In [155]: data
Out[155]:
array([[[ 0,  0,  0],
        [ 0,  0,  0],
        [ 0,  0,  0],
        ...,
        [ 0,  0,  0],
        [ 0,  0,  0],
        [ 0,  0,  0]],

       [[ 0,  1,  0],
        [ 0,  0,  0],
        [ 0,  1,  0],
        ...,
        [ 0,  0,  0],
        [ 0,  0,  0],
        [ 0,  0,  0]],

       [[ 0,  0,  0],
        [ 0,  1,  0],
        [ 0,  0,  0],
        ...,
        [ 0,  0,  0],
        [ 0,  0,  0],
        [ 0,  0,  0]],

       ...,

       [[ 0, 13,  0],
        [ 0, 24,  0],
        [ 0, 32,  0],
        ...,
        [ 0, 34,  0],
        [ 0, 16,  0],
        [ 0,  7,  0]],

       [[ 0, 19,  0],
        [ 0, 26,  0],
        [ 0, 62,  0],
        ...,
        [ 0,  8,  0],
        [ 0,  3,  0],
        [ 0, 14,  0]],

       [[ 0, 43,  0],
        [ 0, 67,  0],
        [ 0, 55,  0],
        ...,
        [ 0,  9,  0],
        [ 0,  3,  0],
        [ 0, 19,  0]]], dtype=uint8)

In [156]: data.shape
Out[156]: (2048, 2048, 3)

In [157]: data[:, :, 0]
Out[157]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [158]: data[:, :, 0].shape
Out[158]: (2048, 2048)

In [159]: data[:, :, 0].ravel.sum() > 0
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-159-2532ecc7773d> in <module>
----> 1 data[:, :, 0].ravel.sum() > 0

AttributeError: 'builtin_function_or_method' object has no attribute 'sum'
> <ipython-input-159-2532ecc7773d>(1)<module>()
----> 1 data[:, :, 0].ravel.sum() > 0

ipdb> c

In [160]: data[:, :, 0].ravel().sum() > 0
Out[160]: False

In [161]: data[:, :, 0].sum()
Out[161]: 0

In [162]: data[:, :, 0].sum?
Signature: sum(iterable, start=0, /)
Docstring:
Return the sum of a 'start' value (default: 0) plus an iterable of numbers

When the iterable is empty, return the start value.
This function is intended specifically for use with numeric values and may
reject non-numeric types.
Type:      builtin_function_or_method

In [163]: red = data[:, :, 0]

In [164]: red.sum?
Docstring:
a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)

Return the sum of the array elements over the given axis.

Refer to `numpy.sum` for full documentation.

See Also
--------
numpy.sum : equivalent function
Type:      builtin_function_or_method

In [165]: data[:, :, 0] == 0
Out[165]:
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])

In [166]: (data[:, :, 0] == 0).all()
Out[166]: True

In [167]: (data[:, :, 0] != 0).any()
Out[167]: False

In [168]: (data[:, :, 1] == 0).all()
Out[168]: False

In [169]: (data[:, :, 1] != 0).any()
Out[169]: True

In [170]: (data[:, :, 2] != 0).any()
Out[170]: False

In [171]: (data != 0).any(axis=2)
Out[171]:
array([[False, False, False, ..., False, False, False],
       [ True, False,  True, ..., False, False, False],
       [False,  True, False, ..., False, False, False],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])

In [172]: (data[:, :, 1] != 0).any()
Out[172]: True

In [173]: data[:, :, 1]
Out[173]:
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 1,  0,  1, ...,  0,  0,  0],
       [ 0,  1,  0, ...,  0,  0,  0],
       ...,
       [13, 24, 32, ..., 34, 16,  7],
       [19, 26, 62, ...,  8,  3, 14],
       [43, 67, 55, ...,  9,  3, 19]], dtype=uint8)

In [174]: green = data[:, :, 1]

In [175]: green.shape
Out[175]: (2048, 2048)

In [176]: green.dtype
Out[176]: dtype('uint8')

In [177]: np.invert
Out[177]: <ufunc 'invert'>

In [178]: np.invert?

In [179]: 255 - green
Out[179]:
array([[255, 255, 255, ..., 255, 255, 255],
       [254, 255, 254, ..., 255, 255, 255],
       [255, 254, 255, ..., 255, 255, 255],
       ...,
       [242, 231, 223, ..., 221, 239, 248],
       [236, 229, 193, ..., 247, 252, 241],
       [212, 188, 200, ..., 246, 252, 236]], dtype=uint8)

In [180]: inv = 255 - green

In [181]: green
Out[181]:
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 1,  0,  1, ...,  0,  0,  0],
       [ 0,  1,  0, ...,  0,  0,  0],
       ...,
       [13, 24, 32, ..., 34, 16,  7],
       [19, 26, 62, ...,  8,  3, 14],
       [43, 67, 55, ...,  9,  3, 19]], dtype=uint8)

In [182]: inv
Out[182]:
array([[255, 255, 255, ..., 255, 255, 255],
       [254, 255, 254, ..., 255, 255, 255],
       [255, 254, 255, ..., 255, 255, 255],
       ...,
       [242, 231, 223, ..., 221, 239, 248],
       [236, 229, 193, ..., 247, 252, 241],
       [212, 188, 200, ..., 246, 252, 236]], dtype=uint8)

In [183]: subsampled = inv[::2, ::2]

In [184]: subsample.shape
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-184-8535dceae3bb> in <module>
----> 1 subsample.shape

NameError: name 'subsample' is not defined
> <ipython-input-184-8535dceae3bb>(1)<module>()
----> 1 subsample.shape

ipdb> c

In [185]: subsampled.shape
Out[185]: (1024, 1024)

In [186]: green.shape
Out[186]: (2048, 2048)

In [187]: f2, ax2 = plt.subplots()

In [188]: ax2.imshow(subsampled, cmap='gray')
Out[188]: <matplotlib.image.AxesImage at 0x7f965d148b70>

In [189]: io.imsave('nissl_gray.png', subsampled)

In [190]: ls
homework4.md                        misc/
homework4.pdf                       nissl_gray.png
homework4_samples.py                nissl.tif
homework4_solutions.pdf             stroop_data.csv
homework4_solutions.py              student_solutions/
Log_Reaction_time_distribution.png

In [191]: import scipy.stats

In [192]: np
Out[192]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [193]: import numpy as np

In [194]: np.random.random?
Docstring:
random(size=None)

Return random floats in the half-open interval [0.0, 1.0). Alias for
`random_sample` to ease forward-porting to the new random API.
Type:      builtin_function_or_method

In [195]: np.random.random(1000)
Out[195]:
array([1.19659758e-01, 1.27800706e-01, 7.58819643e-01, 9.68232998e-01,
       6.72760638e-01, 3.80626351e-01, 2.55004342e-01, 9.06816754e-01,
       3.27313822e-01, 3.56853087e-01, 4.90316103e-01, 3.19506327e-01,
       9.81518682e-01, 4.38117743e-01, 3.52341633e-01, 3.75744799e-01,
       6.53988817e-01, 5.64350537e-01, 4.81810175e-01, 4.21788192e-01,
       4.63478002e-01, 6.03016065e-01, 8.94940204e-01, 9.37400946e-01,
       7.27119321e-01, 3.07022899e-01, 5.24902681e-01, 8.91588428e-01,
       9.61543489e-01, 3.33597416e-01, 4.64484586e-01, 4.10752737e-01,
       8.03975113e-01, 3.58547726e-01, 4.22140894e-01, 2.12230039e-02,
       4.57209827e-01, 4.38805036e-01, 9.56176223e-01, 1.98592616e-01,
       1.06708671e-01, 5.67375178e-01, 3.79997925e-01, 7.74656830e-01,
       6.69489961e-01, 4.90006747e-01, 6.54941951e-01, 5.88381224e-02,
       4.84417597e-02, 5.24607075e-01, 2.30868273e-01, 5.87324094e-01,
       4.65909505e-01, 4.19232326e-01, 4.67321052e-01, 3.94983634e-01,
       5.08487908e-01, 2.28286190e-01, 5.79280449e-01, 3.76713807e-01,
       2.02192002e-01, 1.80921991e-01, 5.79542420e-01, 2.87317236e-01,
       7.76913081e-01, 2.08355357e-01, 6.76015568e-01, 4.04984535e-02,
       3.30508396e-01, 7.81812067e-01, 4.19861910e-01, 4.84908761e-01,
       2.86582809e-01, 4.52849567e-01, 4.91796991e-01, 8.35347398e-01,
       9.38492903e-01, 3.82337269e-01, 5.98897970e-01, 2.69096618e-01,
       8.15716673e-01, 7.50747872e-01, 1.28168589e-01, 2.71417226e-01,
       5.66148501e-01, 2.77010267e-01, 2.32725846e-01, 2.46538486e-01,
       5.02345963e-01, 7.68975890e-01, 7.01594017e-01, 3.41185499e-01,
       4.10055997e-01, 6.44608741e-01, 6.01058749e-01, 7.14299249e-01,
       6.55342580e-01, 7.92772871e-01, 9.69000523e-01, 9.84064462e-01,
       1.78937562e-01, 7.73032691e-03, 6.37122945e-01, 6.66380504e-01,
       3.78076380e-01, 6.24468430e-01, 4.25227810e-01, 2.94485187e-01,
       1.61984464e-01, 2.21331396e-01, 2.65735258e-01, 2.74783988e-02,
       5.72657233e-01, 6.95195262e-01, 2.80470812e-02, 9.11152778e-01,
       2.97699274e-01, 1.93898546e-01, 1.54123673e-02, 2.82011867e-01,
       6.18197696e-01, 5.35281035e-01, 6.76490301e-01, 6.06766032e-01,
       4.95559389e-01, 3.60400230e-01, 4.01694169e-01, 3.78363189e-01,
       2.48472105e-01, 9.52302020e-01, 5.03265309e-01, 5.81227138e-01,
       1.53681548e-01, 6.75349907e-01, 2.92353547e-01, 2.46381607e-01,
       1.40944517e-01, 2.13359630e-01, 5.73410181e-01, 9.81493657e-01,
       7.67527423e-01, 2.07881763e-01, 9.35774739e-01, 9.89644735e-01,
       2.77223123e-01, 5.92922492e-01, 8.27722594e-02, 6.63391165e-01,
       3.31219123e-01, 4.67721309e-02, 3.83322208e-01, 9.02705091e-01,
       1.45148272e-01, 7.71862009e-01, 1.51033404e-01, 6.98030385e-01,
       5.60917173e-02, 8.36053030e-03, 8.28679395e-01, 8.93479125e-01,
       3.83216804e-01, 5.11898103e-01, 8.72166208e-01, 4.46018424e-01,
       2.42637628e-01, 2.02957708e-01, 5.69461742e-02, 4.45913414e-01,
       5.24422946e-01, 7.95211076e-01, 1.34506840e-01, 5.27944503e-01,
       3.94362090e-01, 1.60925137e-02, 7.35611997e-01, 3.55953358e-01,
       9.74805189e-01, 4.05446625e-01, 9.65247819e-01, 5.55177070e-01,
       3.62138501e-01, 5.48450935e-02, 4.50149191e-01, 1.74423281e-01,
       2.02819032e-01, 5.67543292e-01, 1.66941863e-01, 6.65081180e-01,
       4.16419100e-02, 9.47629873e-01, 6.48581695e-01, 2.44289877e-01,
       1.23626560e-02, 3.04753756e-01, 8.62274548e-02, 3.63231460e-01,
       9.20753042e-01, 6.39330650e-02, 3.34238527e-01, 3.88430727e-01,
       5.96220261e-01, 6.92668325e-01, 4.73165577e-01, 3.05518996e-01,
       3.37182870e-02, 7.74558498e-02, 5.74863291e-01, 6.77400458e-01,
       6.25384483e-01, 5.45957986e-01, 8.89055333e-01, 4.00858106e-01,
       1.34285044e-01, 6.17338998e-01, 7.35784374e-01, 9.79728505e-01,
       1.64900679e-01, 7.51459828e-01, 3.78663032e-01, 2.60443839e-01,
       6.92867963e-01, 6.25571639e-01, 3.49691705e-01, 6.72951418e-01,
       3.80661921e-01, 4.50100285e-01, 9.96229114e-01, 3.22842215e-01,
       5.27385364e-01, 2.34361561e-01, 8.36966948e-01, 9.52381557e-01,
       8.93108361e-01, 5.78994688e-01, 2.72093705e-01, 7.79923895e-01,
       1.33064693e-01, 4.35647743e-01, 3.96567891e-02, 4.82639071e-01,
       5.70443137e-01, 7.76469912e-01, 7.31228343e-01, 9.49469429e-01,
       2.60216228e-01, 4.75599935e-01, 1.17334543e-01, 4.89658962e-01,
       7.25719858e-01, 7.67341554e-01, 8.64809201e-02, 4.94788593e-01,
       8.94159676e-01, 2.80933193e-02, 6.61973654e-01, 8.27846897e-01,
       2.44660778e-01, 6.70815484e-01, 6.34562567e-01, 4.32016500e-01,
       6.18140137e-01, 4.85064108e-01, 5.06831698e-01, 3.70213361e-01,
       8.41792473e-01, 2.17817144e-01, 9.84312368e-01, 6.01172944e-01,
       2.59954919e-01, 7.36968165e-01, 4.39243224e-01, 8.25521391e-01,
       3.30172205e-01, 4.33246224e-01, 1.78466027e-02, 7.91671222e-01,
       5.40190927e-01, 8.58173701e-01, 3.95231898e-01, 7.01355360e-01,
       7.09085284e-01, 2.07598114e-01, 7.18438608e-01, 7.44472990e-01,
       3.56222277e-01, 7.92717145e-01, 5.83319200e-01, 9.95835868e-01,
       6.37414647e-01, 2.73203193e-01, 5.53598417e-01, 4.68151907e-01,
       6.23111594e-01, 9.30472184e-01, 5.48621018e-01, 1.62120660e-01,
       4.18629582e-01, 3.76272790e-01, 1.90159828e-02, 3.16357975e-01,
       1.41863896e-01, 4.84629324e-01, 1.49005856e-01, 1.90860864e-01,
       2.66875243e-01, 6.23283979e-01, 5.78053357e-01, 3.85176320e-01,
       9.00870271e-01, 4.28583388e-02, 2.36922878e-01, 2.59285313e-01,
       7.48223321e-01, 6.61076444e-01, 5.66801994e-01, 3.53262568e-01,
       2.67366673e-02, 2.13647323e-01, 6.16141655e-01, 3.20692412e-01,
       9.20651895e-01, 1.12277755e-02, 9.07097104e-01, 1.32974751e-01,
       6.48912544e-01, 3.75829811e-02, 1.33971483e-01, 7.99507221e-01,
       9.81212581e-01, 9.94275388e-01, 5.38699101e-01, 8.39879615e-01,
       8.51210446e-01, 6.36938738e-01, 2.84032375e-01, 9.66680620e-01,
       3.02512883e-01, 9.11935421e-01, 4.93957524e-01, 7.66735061e-01,
       8.89785295e-01, 9.33618611e-01, 6.01771458e-01, 3.36072203e-01,
       8.26783255e-01, 3.46307328e-01, 3.14036206e-01, 4.56915248e-02,
       6.98855616e-01, 6.95048093e-02, 2.69531848e-01, 9.18571845e-01,
       5.97442171e-02, 1.12013367e-01, 3.38135108e-01, 9.96037430e-01,
       8.57367715e-01, 1.46891614e-01, 5.45339364e-01, 4.97113823e-01,
       5.95409990e-01, 8.93297969e-01, 1.94081404e-01, 3.19301772e-01,
       4.01434658e-01, 6.73573662e-01, 1.67609534e-01, 5.51830539e-01,
       7.91960873e-01, 4.32959759e-01, 6.39524067e-01, 2.75340207e-01,
       5.02452588e-01, 9.69330879e-01, 6.63764810e-01, 6.03088988e-01,
       7.53210276e-01, 8.99025270e-02, 2.77612378e-01, 8.02826627e-01,
       4.83866652e-01, 5.43755514e-01, 5.58115800e-01, 3.11161435e-01,
       1.34995962e-02, 5.30453414e-01, 1.09100513e-01, 3.52861242e-01,
       4.23776106e-01, 8.20883271e-01, 8.86573555e-01, 7.09862248e-01,
       6.75012795e-01, 9.13717262e-01, 1.88255958e-01, 8.41348379e-01,
       3.69823440e-01, 4.99408616e-01, 8.22374638e-01, 8.12195569e-01,
       3.38034738e-02, 9.52336568e-01, 9.16085044e-01, 6.39781138e-01,
       5.34539971e-01, 6.94436361e-01, 7.57099198e-01, 1.62337665e-02,
       1.48262848e-02, 9.08134620e-01, 5.67288778e-01, 1.51521456e-01,
       6.00255414e-01, 9.17698306e-01, 9.71015191e-01, 6.75600429e-01,
       1.23600499e-01, 9.90950285e-02, 8.04840076e-01, 9.17651335e-01,
       7.64088419e-01, 7.16325276e-01, 2.26982882e-01, 8.95932468e-01,
       5.47947491e-01, 9.46405193e-01, 5.63500075e-01, 5.32291795e-01,
       6.99450997e-01, 8.36430914e-01, 4.59562735e-01, 3.30525398e-01,
       8.32583993e-01, 4.93431689e-01, 8.26266187e-01, 8.85482160e-01,
       3.74534747e-01, 8.83048023e-01, 5.26577019e-01, 9.59453410e-01,
       2.86932619e-01, 5.46376036e-01, 5.77823698e-01, 9.13380373e-01,
       3.18661773e-01, 6.41865685e-01, 5.68353925e-02, 3.87199351e-01,
       1.97028708e-01, 6.45937886e-01, 8.55290826e-01, 2.84289494e-02,
       1.28004703e-01, 5.65288984e-01, 8.55812150e-01, 1.17248074e-01,
       3.64552587e-01, 5.27091175e-01, 6.64775893e-01, 5.04225640e-01,
       2.04643104e-01, 6.95963112e-01, 7.54604410e-01, 3.76136658e-01,
       4.07563331e-01, 3.86323136e-01, 1.51078560e-01, 1.63798815e-01,
       3.05432439e-01, 7.18364484e-01, 5.46371268e-01, 2.47783703e-01,
       2.33220859e-01, 5.67171630e-01, 2.83347329e-01, 9.19943227e-01,
       7.23900080e-02, 4.09999541e-01, 4.16655110e-01, 3.07828926e-02,
       3.37022076e-01, 8.43371166e-02, 2.89376053e-01, 2.10355053e-01,
       5.99934167e-01, 3.94575277e-01, 3.03337364e-02, 2.87350801e-01,
       1.11823737e-01, 8.78905417e-01, 4.31000070e-01, 7.45697913e-03,
       3.56882827e-01, 6.36492072e-01, 1.82593755e-01, 8.93521751e-01,
       4.08477080e-01, 9.85206662e-01, 2.53197702e-01, 5.43033795e-03,
       8.81154732e-01, 4.15928101e-01, 4.73892381e-01, 9.87949792e-01,
       6.54195247e-01, 6.92478199e-01, 2.24167087e-01, 7.04302601e-01,
       7.36657150e-01, 7.40807983e-02, 8.85777857e-01, 8.79787245e-03,
       4.48019773e-01, 2.30982447e-01, 9.95312953e-01, 7.29575670e-01,
       5.69910636e-03, 5.36509281e-01, 1.67794024e-01, 3.96616410e-01,
       5.76298172e-01, 1.05641954e-01, 5.04459242e-01, 9.72679478e-01,
       9.40968834e-01, 5.37936702e-01, 9.73433620e-01, 9.49896737e-01,
       9.46138375e-01, 4.43549367e-02, 6.30383340e-04, 8.14405158e-01,
       2.97258785e-01, 2.59655132e-01, 9.81429610e-01, 9.18504467e-01,
       1.09445228e-01, 6.10459453e-01, 2.82368049e-01, 6.68152188e-01,
       8.00593404e-01, 2.02368574e-01, 8.80827601e-01, 3.59599228e-01,
       5.36973567e-01, 7.29637679e-01, 9.63035365e-02, 8.38709966e-01,
       1.53693282e-01, 9.42014640e-01, 7.05741264e-01, 7.28974846e-01,
       3.52429126e-01, 6.60947611e-01, 9.80527209e-01, 8.11130044e-01,
       8.54836310e-01, 4.36984684e-01, 7.59281920e-01, 6.43752857e-01,
       5.91814796e-02, 6.43264563e-01, 9.88931108e-01, 7.03329472e-02,
       1.22052364e-01, 3.74610571e-01, 3.33886789e-01, 7.09801811e-01,
       1.65113615e-02, 3.85684884e-01, 7.22620492e-01, 7.94192080e-01,
       8.12719639e-01, 9.98762111e-02, 2.73845131e-01, 2.98932867e-02,
       3.02310712e-01, 9.89544723e-01, 7.75819801e-01, 2.41735685e-01,
       7.96002161e-01, 8.25056198e-01, 9.41945396e-01, 5.71958251e-01,
       3.75093992e-01, 1.87544964e-01, 3.99409780e-01, 6.34265325e-01,
       7.35718667e-01, 2.37919146e-01, 5.37640031e-01, 1.26725501e-01,
       8.98721016e-01, 9.06146814e-01, 2.82652726e-01, 9.64373230e-01,
       3.85375962e-01, 7.12624902e-01, 5.53614848e-01, 8.94471063e-01,
       4.06486088e-01, 3.53303785e-01, 3.13149010e-01, 5.94599008e-01,
       5.52466044e-01, 7.29129350e-01, 5.94171058e-01, 5.42765828e-01,
       5.94008471e-01, 2.83307560e-01, 3.37431419e-01, 5.20876513e-01,
       8.67456183e-01, 5.39379441e-01, 2.72158192e-01, 5.77091332e-01,
       9.73318959e-01, 4.96179014e-01, 8.45144491e-01, 4.37495604e-01,
       4.33859187e-02, 9.73842181e-01, 5.92687518e-01, 5.92605708e-01,
       1.81855991e-01, 9.24784797e-01, 1.81475183e-01, 4.74869503e-01,
       8.85989128e-01, 3.12753150e-01, 7.91181579e-01, 1.65825893e-01,
       6.27058126e-01, 1.84874146e-01, 6.47550126e-01, 3.55037878e-01,
       7.06978594e-01, 8.07808421e-01, 1.83238965e-01, 7.14018913e-01,
       6.60702959e-01, 7.29161404e-01, 9.87548827e-01, 3.89225754e-01,
       4.37432909e-01, 1.67190010e-02, 3.98927929e-01, 6.00026548e-01,
       2.49850303e-01, 9.10497928e-01, 5.49297620e-01, 4.38134095e-01,
       1.78181846e-01, 3.20678198e-01, 9.88747479e-01, 1.81625835e-01,
       5.76864640e-01, 9.33163167e-01, 6.43380829e-02, 5.90260271e-01,
       4.15733204e-01, 6.14400397e-01, 4.87326916e-01, 3.81226167e-01,
       9.71073043e-02, 8.22611905e-01, 8.24215775e-01, 8.05766542e-01,
       7.42725505e-01, 6.28757632e-01, 3.44344706e-02, 1.00271670e-01,
       8.82694227e-01, 9.85222945e-02, 4.19930805e-01, 2.03285653e-01,
       1.36389592e-01, 4.33718894e-01, 3.69246204e-01, 6.49461656e-01,
       3.78148892e-01, 9.70576929e-01, 1.05402465e-01, 4.85579888e-01,
       5.18051590e-01, 1.30696045e-01, 5.14981595e-01, 2.20586398e-01,
       1.39123951e-01, 5.66303602e-01, 5.81151920e-01, 7.01705330e-01,
       2.60485585e-01, 6.54101184e-01, 1.48671757e-01, 3.15601410e-01,
       7.79180271e-01, 4.03111730e-01, 1.09505182e-01, 9.17017069e-01,
       3.26738619e-01, 7.81324032e-01, 4.71247897e-01, 8.71530868e-01,
       3.31103598e-01, 9.17304588e-01, 4.06575909e-01, 8.24733299e-01,
       8.34262483e-01, 5.37759029e-01, 5.84208268e-01, 3.56387971e-02,
       7.75075952e-01, 4.81591779e-01, 1.62612566e-01, 2.59355857e-01,
       3.85892063e-01, 8.87269176e-01, 2.56837072e-02, 1.37462671e-01,
       2.50733793e-01, 2.35587262e-01, 6.20540097e-01, 4.94783285e-01,
       7.80436730e-01, 4.23703833e-01, 3.99709686e-01, 6.19440700e-01,
       6.59128606e-01, 3.19318984e-01, 6.73942768e-01, 7.00437870e-01,
       7.64614862e-01, 2.69864353e-01, 9.45934733e-01, 5.32199095e-01,
       7.96166600e-01, 3.47956258e-01, 1.34625594e-01, 4.68809440e-01,
       6.08170323e-01, 1.07439496e-01, 3.92890792e-01, 6.77411930e-01,
       5.33969447e-01, 9.28328182e-01, 7.15386359e-01, 4.65168281e-01,
       3.05412816e-01, 9.87536578e-01, 5.37953436e-01, 8.69304524e-01,
       3.24696647e-01, 2.00223202e-02, 2.95842739e-01, 9.16857177e-01,
       5.86739939e-01, 2.73580737e-02, 1.30867630e-01, 5.79040105e-01,
       7.41573827e-01, 8.29798562e-01, 8.52295263e-01, 8.68971645e-02,
       4.92020795e-01, 9.69878772e-02, 2.71189775e-01, 1.32004140e-01,
       1.80916525e-01, 3.05207418e-02, 2.69567905e-01, 5.31703293e-01,
       6.83262175e-01, 9.75364542e-01, 1.26109238e-01, 8.60147218e-01,
       4.40601919e-01, 6.70131008e-01, 7.55688197e-01, 8.67151650e-01,
       6.93402460e-02, 6.85666733e-01, 6.95049225e-01, 9.05717222e-01,
       9.69069576e-01, 4.47489344e-01, 1.28289376e-01, 1.10264790e-01,
       4.36653865e-01, 5.83466969e-01, 8.54701659e-01, 5.84142046e-02,
       6.07656714e-01, 7.24544147e-01, 3.98238821e-01, 2.53547023e-01,
       8.90520222e-01, 6.01302510e-01, 1.51424031e-01, 2.57109472e-01,
       7.58290191e-01, 4.33986210e-01, 3.90641843e-01, 7.43298440e-01,
       9.95861094e-01, 7.52145379e-01, 7.41463600e-01, 9.58216207e-01,
       1.66587315e-01, 5.35251497e-01, 4.82105973e-01, 3.14543435e-01,
       4.52499494e-01, 5.98072295e-01, 2.92967554e-01, 9.96360565e-03,
       4.39354929e-01, 4.83092795e-01, 7.50455621e-01, 6.88600362e-01,
       5.42233128e-01, 7.17296582e-01, 1.61267241e-01, 3.56820085e-01,
       1.22704476e-01, 3.65853088e-01, 1.99652967e-01, 3.47836670e-01,
       8.46407645e-02, 2.15621955e-02, 9.67688839e-01, 5.43822575e-01,
       3.41777629e-01, 1.86129669e-01, 1.10393197e-01, 5.55856416e-01,
       3.69704013e-01, 9.28880275e-01, 3.50448837e-01, 8.05361493e-02,
       2.59443054e-01, 1.60730556e-01, 5.49508103e-01, 8.58875750e-01,
       1.42143352e-01, 1.80454430e-01, 8.59973189e-01, 3.03894260e-01,
       2.42076058e-01, 9.33841179e-01, 4.26019456e-01, 9.84971594e-01,
       5.98196571e-01, 9.99955494e-01, 1.46473279e-01, 8.40419956e-01,
       8.73760412e-01, 2.58689819e-01, 5.64096486e-01, 4.71816599e-01,
       9.28805949e-01, 8.40861856e-01, 3.79433070e-01, 8.09169240e-01,
       1.46787437e-01, 9.75344139e-01, 4.90273348e-01, 9.59753714e-01,
       3.68553354e-01, 9.79065773e-01, 5.13078855e-01, 1.43927614e-01,
       1.47970511e-01, 4.99386089e-01, 6.31279725e-01, 1.93608356e-02,
       7.08658429e-01, 1.19226571e-01, 2.55428180e-01, 2.23306629e-01,
       3.24329573e-01, 1.62159978e-01, 4.41733539e-01, 7.25924081e-01,
       2.07754835e-01, 9.23368564e-04, 2.23334439e-01, 6.37511859e-01,
       6.92049271e-01, 3.29662805e-01, 7.44181761e-01, 7.84521992e-01,
       7.84536106e-01, 7.51537503e-01, 5.97202210e-02, 1.69097028e-01,
       6.87622162e-01, 3.79127626e-01, 8.27495361e-01, 3.16187904e-01,
       2.87415099e-01, 6.09158444e-01, 1.06198394e-01, 5.24615867e-02,
       9.10492820e-01, 9.97985152e-01, 6.98194534e-01, 3.66692853e-01,
       8.85319730e-01, 6.23826530e-01, 6.63864608e-01, 7.28434177e-01,
       8.62366996e-01, 4.22546552e-01, 1.65587652e-01, 8.34913444e-02,
       5.95051405e-01, 1.12692641e-01, 9.13312398e-01, 5.25200327e-01,
       6.74295936e-01, 3.65479620e-01, 5.60800415e-01, 6.24947374e-01,
       8.38456005e-01, 2.42146370e-01, 1.41206340e-01, 1.87412941e-01,
       9.57300885e-01, 5.85439476e-01, 9.22264228e-02, 9.08737216e-01,
       6.77686166e-01, 8.43590837e-01, 9.43409040e-01, 5.09479754e-01,
       6.43674548e-01, 2.00358755e-01, 3.78140755e-01, 9.13957997e-01,
       2.36772236e-02, 9.44622246e-01, 1.70796193e-01, 5.89794239e-01,
       5.92371903e-01, 5.55921571e-01, 4.73393820e-02, 5.55595189e-01,
       5.78541003e-01, 1.71595002e-01, 9.48209650e-01, 5.49336811e-01,
       6.10008896e-01, 9.65098320e-01, 6.68829316e-01, 6.85315297e-01,
       2.84945448e-02, 3.79195715e-01, 9.80517819e-01, 8.43578839e-01,
       9.74496090e-01, 7.30706440e-01, 7.17896690e-01, 9.10326364e-01,
       6.29846968e-01, 6.76331128e-03, 5.96343480e-01, 2.26424718e-01,
       1.28750869e-01, 1.55548849e-01, 3.99284275e-01, 4.66141671e-01,
       6.48416803e-01, 2.88347331e-01, 6.87694586e-01, 8.58476655e-01,
       6.06339760e-02, 2.91387867e-01, 7.17836586e-01, 3.81295442e-02,
       5.03371076e-01, 1.63952586e-01, 4.24841650e-01, 3.03909398e-01,
       8.39721705e-01, 2.47117412e-01, 7.03900410e-01, 8.85674857e-01,
       5.83793162e-01, 8.13762677e-01, 1.40413074e-01, 4.29096218e-01,
       2.93990250e-01, 4.28796013e-01, 9.63494885e-01, 4.26054714e-01,
       5.22648315e-01, 9.37137692e-01, 1.81610980e-01, 9.15280120e-01])

In [196]: c = np.random.random(1000)

In [197]: d = np.random.random(1000)

In [198]: c == d
Out[198]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False])

In [199]: d = np.random.random(1000)

In [200]: d
Out[200]:
array([0.43623456, 0.9174177 , 0.397871  , 0.21601365, 0.29272974,
       0.63417097, 0.604455  , 0.66121929, 0.29364646, 0.50195922,
       0.57557957, 0.68269528, 0.25378967, 0.56629932, 0.57558628,
       0.37831257, 0.58461665, 0.26811833, 0.83936644, 0.63076855,
       0.85113816, 0.7574621 , 0.55432478, 0.09967291, 0.98015241,
       0.76156122, 0.29695987, 0.68945284, 0.63386419, 0.53928695,
       0.23245314, 0.40426483, 0.43068861, 0.98940398, 0.97177344,
       0.08649447, 0.5210507 , 0.98806358, 0.97844379, 0.01207941,
       0.07881614, 0.17573996, 0.35923699, 0.03549376, 0.92805228,
       0.4841799 , 0.1551595 , 0.18001059, 0.28671137, 0.94329875,
       0.98391916, 0.50328327, 0.09143306, 0.94764601, 0.0397157 ,
       0.40085236, 0.94238443, 0.58872221, 0.60003021, 0.07634511,
       0.60688968, 0.1745516 , 0.85617673, 0.11928036, 0.84296914,
       0.41522212, 0.45520245, 0.09457404, 0.91274116, 0.8929784 ,
       0.17396256, 0.09969973, 0.17702115, 0.3414808 , 0.87082661,
       0.90810878, 0.2527477 , 0.74776766, 0.40586969, 0.36782964,
       0.49732908, 0.96191049, 0.44977536, 0.99715042, 0.00334775,
       0.57444145, 0.86724072, 0.58446967, 0.52394783, 0.20996982,
       0.08161915, 0.36187528, 0.37263388, 0.40382659, 0.27271379,
       0.45833734, 0.91999428, 0.05113313, 0.68848771, 0.37790918,
       0.16555926, 0.13236584, 0.34152535, 0.73287678, 0.4248581 ,
       0.77408962, 0.18987123, 0.31198303, 0.6006648 , 0.05865835,
       0.05946351, 0.59098   , 0.25327405, 0.64950083, 0.11936802,
       0.83637147, 0.46737205, 0.00479074, 0.28032382, 0.86907266,
       0.98965878, 0.24945873, 0.42611166, 0.95234037, 0.40240885,
       0.99138168, 0.92485247, 0.664623  , 0.66251434, 0.74180194,
       0.50692262, 0.84107558, 0.55814025, 0.02848515, 0.62522618,
       0.06298374, 0.99280084, 0.63582266, 0.86004314, 0.48129837,
       0.43217572, 0.19627404, 0.37949872, 0.62311207, 0.30470248,
       0.60563738, 0.47530034, 0.58539764, 0.76705469, 0.60756414,
       0.79785199, 0.93573425, 0.29190085, 0.88559408, 0.51213271,
       0.53226024, 0.15848154, 0.34445934, 0.93028238, 0.26254352,
       0.32288676, 0.80530278, 0.56776572, 0.62564258, 0.95977837,
       0.97828974, 0.13016298, 0.79280007, 0.50962188, 0.04438088,
       0.45292442, 0.35766638, 0.24522512, 0.29642472, 0.31185445,
       0.4935285 , 0.97295455, 0.05087117, 0.26608957, 0.46410604,
       0.92134445, 0.62183453, 0.70450166, 0.17679178, 0.41967684,
       0.96384236, 0.72909974, 0.24016928, 0.66102769, 0.2423071 ,
       0.83295328, 0.76654073, 0.62886558, 0.86642743, 0.67752289,
       0.07800668, 0.51629423, 0.21686102, 0.47981566, 0.92265119,
       0.34972976, 0.67225485, 0.19738761, 0.00466895, 0.51929274,
       0.78474962, 0.56586138, 0.51979047, 0.68258695, 0.72432159,
       0.57523774, 0.68125251, 0.4835748 , 0.24957215, 0.64647192,
       0.20298065, 0.360667  , 0.29737338, 0.17355486, 0.69887227,
       0.20030792, 0.65045017, 0.08951478, 0.08707915, 0.85394407,
       0.43923305, 0.42660572, 0.41382951, 0.81257252, 0.07924112,
       0.98952436, 0.27468904, 0.28425374, 0.90894902, 0.19424746,
       0.44211528, 0.5782424 , 0.86925463, 0.84236966, 0.29845992,
       0.7185123 , 0.77658064, 0.05366662, 0.93752749, 0.72046529,
       0.61076747, 0.44179165, 0.38907689, 0.62281325, 0.32286404,
       0.67963717, 0.5074262 , 0.32434011, 0.20902566, 0.53767235,
       0.0429457 , 0.0417576 , 0.08485204, 0.50969173, 0.59562713,
       0.12153585, 0.64247469, 0.87854465, 0.07176062, 0.73516966,
       0.68830484, 0.58735272, 0.48989752, 0.33889263, 0.88803069,
       0.09388769, 0.86692468, 0.62110123, 0.23642066, 0.66138812,
       0.49785593, 0.01991538, 0.29376104, 0.00992061, 0.49491949,
       0.31387759, 0.24758599, 0.83892001, 0.15868379, 0.91859278,
       0.57687365, 0.39105108, 0.43630187, 0.91044988, 0.87242231,
       0.52960397, 0.35358789, 0.92388224, 0.97426971, 0.032126  ,
       0.90071482, 0.50235082, 0.33598727, 0.22032072, 0.92912852,
       0.27580909, 0.33736443, 0.28875856, 0.22024762, 0.75216378,
       0.49258131, 0.1621186 , 0.50797607, 0.86189404, 0.07033967,
       0.39499879, 0.35659015, 0.78339164, 0.70551357, 0.08174553,
       0.26266874, 0.27315081, 0.91512971, 0.83731634, 0.4713824 ,
       0.44501748, 0.43223825, 0.7293357 , 0.65275968, 0.04085994,
       0.52934753, 0.21784608, 0.52401152, 0.17783616, 0.39951804,
       0.62082463, 0.18357296, 0.17271229, 0.26045871, 0.06531858,
       0.32986443, 0.87650605, 0.62052738, 0.05848188, 0.24545806,
       0.95292668, 0.54881303, 0.01963422, 0.5308568 , 0.21057774,
       0.05267324, 0.878461  , 0.57535848, 0.13632321, 0.02129029,
       0.07003842, 0.38997329, 0.25122221, 0.75423907, 0.37219313,
       0.41718328, 0.74555599, 0.83150295, 0.57177105, 0.21285708,
       0.7580275 , 0.37254795, 0.51072406, 0.73679797, 0.24645479,
       0.90891953, 0.53290557, 0.19579389, 0.64387692, 0.16613216,
       0.04134694, 0.90595863, 0.12939354, 0.33319883, 0.90822386,
       0.20481192, 0.48084279, 0.11015125, 0.60363437, 0.41013965,
       0.99208377, 0.7982081 , 0.77919806, 0.90021177, 0.80094441,
       0.27337467, 0.98669698, 0.96587753, 0.12125913, 0.96096199,
       0.20946737, 0.0307178 , 0.77232097, 0.95053919, 0.60356332,
       0.81156217, 0.19059598, 0.74331541, 0.53291018, 0.84299559,
       0.91834981, 0.4590045 , 0.83783055, 0.71905855, 0.13377954,
       0.76312985, 0.56651368, 0.72593146, 0.28882584, 0.52081031,
       0.29891835, 0.04933477, 0.52316665, 0.98895462, 0.07988079,
       0.43183598, 0.52723472, 0.34570306, 0.9466695 , 0.05216413,
       0.92062686, 0.46393909, 0.77524091, 0.22608501, 0.80680605,
       0.51138091, 0.91961263, 0.82219835, 0.96042164, 0.82394816,
       0.66697303, 0.52794716, 0.10255066, 0.19021274, 0.0942436 ,
       0.8928763 , 0.02043705, 0.40805305, 0.81976557, 0.10350494,
       0.04628514, 0.36155664, 0.37838667, 0.53249462, 0.11094438,
       0.62604378, 0.82289232, 0.68241743, 0.64335536, 0.46577515,
       0.43933541, 0.96748656, 0.01545479, 0.41004592, 0.45715924,
       0.93178208, 0.08227325, 0.23040671, 0.57397822, 0.01730772,
       0.11377419, 0.53301893, 0.72106114, 0.81119191, 0.27975076,
       0.76542025, 0.48300916, 0.96674662, 0.4071672 , 0.3447496 ,
       0.27178641, 0.47120555, 0.13448539, 0.47692786, 0.74462148,
       0.05974179, 0.28085154, 0.74020124, 0.17777362, 0.60414771,
       0.28882225, 0.52058742, 0.79215761, 0.1563006 , 0.35019923,
       0.50672825, 0.73154272, 0.87423632, 0.19900365, 0.86476837,
       0.76348138, 0.43640439, 0.85866091, 0.88221641, 0.0671862 ,
       0.84844591, 0.05017513, 0.96359087, 0.74142718, 0.32966271,
       0.04309833, 0.05467868, 0.62439923, 0.95758759, 0.1937101 ,
       0.67746466, 0.25525839, 0.54591743, 0.83797279, 0.61487787,
       0.58215291, 0.55019039, 0.52846856, 0.32468745, 0.4613181 ,
       0.57016623, 0.94469002, 0.46505518, 0.46683899, 0.1480879 ,
       0.69633234, 0.40528405, 0.0341247 , 0.32974198, 0.63769225,
       0.71638603, 0.95264288, 0.48130219, 0.81311992, 0.71429137,
       0.15786142, 0.98433515, 0.32011912, 0.83137535, 0.69572775,
       0.4524655 , 0.41591871, 0.66138891, 0.68446301, 0.99566245,
       0.14892224, 0.8210585 , 0.30825976, 0.18753746, 0.18450642,
       0.01299483, 0.60756372, 0.79454623, 0.05006562, 0.31312749,
       0.06784891, 0.65598081, 0.59013908, 0.58135041, 0.50640303,
       0.82362353, 0.20136414, 0.55424069, 0.8189176 , 0.21042552,
       0.79126322, 0.96644713, 0.03547774, 0.92450628, 0.25692567,
       0.99187857, 0.61759896, 0.39812863, 0.79034409, 0.56160309,
       0.73201355, 0.67126528, 0.07706608, 0.32744713, 0.36239706,
       0.07211197, 0.53452003, 0.29696726, 0.55567514, 0.45184082,
       0.06760023, 0.08141691, 0.55070122, 0.46257663, 0.16465034,
       0.26105348, 0.72464344, 0.90401236, 0.34252253, 0.31547006,
       0.89282056, 0.55865904, 0.26641166, 0.4635976 , 0.77940426,
       0.01660244, 0.2452066 , 0.40522194, 0.79042413, 0.57261742,
       0.08809887, 0.59987659, 0.20622896, 0.26747392, 0.58993031,
       0.15061187, 0.60006175, 0.20108374, 0.89109169, 0.54905253,
       0.16362295, 0.8168604 , 0.73948365, 0.30147182, 0.33422892,
       0.65067957, 0.49403916, 0.52222764, 0.25727267, 0.41543938,
       0.60095968, 0.3644311 , 0.52993681, 0.54786481, 0.56849292,
       0.28884125, 0.85988485, 0.79566765, 0.55875235, 0.02047909,
       0.72190595, 0.34924911, 0.79748907, 0.00195903, 0.32217142,
       0.39844743, 0.32264827, 0.81530267, 0.94741871, 0.40490363,
       0.52963143, 0.6894393 , 0.53151679, 0.25761708, 0.37807462,
       0.5402203 , 0.59513618, 0.30418184, 0.67137771, 0.66322789,
       0.22878039, 0.20127643, 0.50168805, 0.53991973, 0.15662842,
       0.92513822, 0.72957202, 0.24808187, 0.19194089, 0.17384655,
       0.04241848, 0.07279653, 0.82597244, 0.49614762, 0.24121425,
       0.45210155, 0.2458918 , 0.49975509, 0.88729213, 0.17659452,
       0.47181169, 0.27045048, 0.50274167, 0.26255025, 0.43748174,
       0.93926492, 0.86263366, 0.10029935, 0.09350654, 0.5941372 ,
       0.12383028, 0.4149823 , 0.17934685, 0.37853747, 0.58781886,
       0.08630015, 0.95900564, 0.17537512, 0.9636695 , 0.6396281 ,
       0.37743722, 0.43298986, 0.58944778, 0.04626884, 0.55197246,
       0.76299912, 0.44865133, 0.1725015 , 0.07686014, 0.65748217,
       0.83719177, 0.3028703 , 0.6797181 , 0.80676096, 0.68319598,
       0.97000102, 0.08750154, 0.58078197, 0.236625  , 0.42306031,
       0.61381591, 0.52829386, 0.98674498, 0.01115725, 0.26997597,
       0.16605101, 0.28413798, 0.33767426, 0.53964996, 0.99913544,
       0.10505336, 0.96795736, 0.62938668, 0.0707034 , 0.09123157,
       0.94375862, 0.82891608, 0.95076295, 0.40452591, 0.96764648,
       0.42317629, 0.01701716, 0.1701378 , 0.72217145, 0.33191403,
       0.26471239, 0.80163655, 0.75195467, 0.19294247, 0.25076874,
       0.54204437, 0.90641538, 0.88895123, 0.87427469, 0.61823439,
       0.24779871, 0.23506743, 0.05424469, 0.13807192, 0.23947728,
       0.49718987, 0.94449457, 0.79443589, 0.26714316, 0.12344278,
       0.8154745 , 0.06637338, 0.23822985, 0.33208834, 0.44974921,
       0.05020425, 0.65559392, 0.20809285, 0.32216251, 0.21821099,
       0.38215851, 0.53780594, 0.70190945, 0.67495627, 0.25058053,
       0.77656776, 0.83510331, 0.82008848, 0.60275767, 0.47833432,
       0.50801721, 0.99085989, 0.44514264, 0.88793338, 0.14801739,
       0.83285744, 0.1996269 , 0.15458735, 0.53041103, 0.41809584,
       0.12768041, 0.28944729, 0.71894712, 0.16411799, 0.16896513,
       0.84496382, 0.05158723, 0.93561098, 0.32703994, 0.4644861 ,
       0.82693339, 0.06292763, 0.4306903 , 0.55290479, 0.58644566,
       0.74173037, 0.35505813, 0.80849776, 0.21611354, 0.39452226,
       0.07882835, 0.59679751, 0.93783059, 0.41005598, 0.63373283,
       0.80667758, 0.23959877, 0.44737695, 0.41902322, 0.45771697,
       0.1526504 , 0.06305278, 0.54689744, 0.69368932, 0.65083484,
       0.17190566, 0.99229571, 0.89985281, 0.81347441, 0.2216383 ,
       0.02667927, 0.97778175, 0.10038188, 0.04665359, 0.22306047,
       0.45589626, 0.62967138, 0.26219479, 0.06150327, 0.49049033,
       0.21252237, 0.41794831, 0.34179999, 0.39767852, 0.73112046,
       0.55881143, 0.15910074, 0.57725861, 0.71888733, 0.65109648,
       0.57314646, 0.53661566, 0.31267734, 0.15347898, 0.53978629,
       0.55397351, 0.60051956, 0.50058571, 0.90482161, 0.9749138 ,
       0.04019499, 0.00703341, 0.85333798, 0.63639887, 0.66948409,
       0.15753874, 0.26443054, 0.43048241, 0.61158677, 0.63262956,
       0.10380074, 0.87826262, 0.88238053, 0.69128581, 0.79610017,
       0.01514841, 0.86764111, 0.37787667, 0.29222894, 0.71408931,
       0.25898656, 0.15355057, 0.03316496, 0.5345762 , 0.67712024,
       0.20857551, 0.43402897, 0.57828212, 0.4704473 , 0.75444664,
       0.72774469, 0.82956686, 0.04888826, 0.89396739, 0.24430832,
       0.24882352, 0.56535256, 0.68744506, 0.97489071, 0.52732309,
       0.26665807, 0.6942861 , 0.86116665, 0.03894757, 0.24518697,
       0.82939073, 0.79726751, 0.96059692, 0.78000291, 0.58173997,
       0.97333047, 0.81074143, 0.32763522, 0.495395  , 0.70081646,
       0.71926697, 0.20367336, 0.73742918, 0.75251992, 0.16075554,
       0.00744406, 0.6882218 , 0.46141303, 0.03812344, 0.74881014,
       0.66252838, 0.97993758, 0.66888341, 0.61773505, 0.72122967,
       0.68440587, 0.05145202, 0.51055154, 0.0772365 , 0.42849484,
       0.32166123, 0.65561585, 0.60107172, 0.84261058, 0.9764547 ,
       0.92216243, 0.69456844, 0.54107346, 0.76107492, 0.87651612,
       0.14261725, 0.71620946, 0.93806462, 0.39060478, 0.62763168,
       0.02944012, 0.08643687, 0.4162164 , 0.25799923, 0.419356  ,
       0.14296592, 0.31370662, 0.90858499, 0.37638315, 0.10254491,
       0.98159144, 0.10852534, 0.83763621, 0.28859864, 0.24605961,
       0.43236451, 0.91721365, 0.595289  , 0.7055256 , 0.82874003,
       0.55158519, 0.29252499, 0.06693801, 0.8579813 , 0.06314891,
       0.60869765, 0.74995128, 0.11530915, 0.5256386 , 0.11418522,
       0.8230061 , 0.72078966, 0.70984862, 0.29758277, 0.55798795,
       0.57671393, 0.16340708, 0.66751876, 0.471707  , 0.42464792,
       0.51282422, 0.47085884, 0.10066005, 0.59329147, 0.27997353,
       0.61947974, 0.30658592, 0.78593778, 0.08667343, 0.59943609,
       0.40095506, 0.56370698, 0.93568763, 0.65630977, 0.38204355])

In [201]: d
Out[201]:
array([0.43623456, 0.9174177 , 0.397871  , 0.21601365, 0.29272974,
       0.63417097, 0.604455  , 0.66121929, 0.29364646, 0.50195922,
       0.57557957, 0.68269528, 0.25378967, 0.56629932, 0.57558628,
       0.37831257, 0.58461665, 0.26811833, 0.83936644, 0.63076855,
       0.85113816, 0.7574621 , 0.55432478, 0.09967291, 0.98015241,
       0.76156122, 0.29695987, 0.68945284, 0.63386419, 0.53928695,
       0.23245314, 0.40426483, 0.43068861, 0.98940398, 0.97177344,
       0.08649447, 0.5210507 , 0.98806358, 0.97844379, 0.01207941,
       0.07881614, 0.17573996, 0.35923699, 0.03549376, 0.92805228,
       0.4841799 , 0.1551595 , 0.18001059, 0.28671137, 0.94329875,
       0.98391916, 0.50328327, 0.09143306, 0.94764601, 0.0397157 ,
       0.40085236, 0.94238443, 0.58872221, 0.60003021, 0.07634511,
       0.60688968, 0.1745516 , 0.85617673, 0.11928036, 0.84296914,
       0.41522212, 0.45520245, 0.09457404, 0.91274116, 0.8929784 ,
       0.17396256, 0.09969973, 0.17702115, 0.3414808 , 0.87082661,
       0.90810878, 0.2527477 , 0.74776766, 0.40586969, 0.36782964,
       0.49732908, 0.96191049, 0.44977536, 0.99715042, 0.00334775,
       0.57444145, 0.86724072, 0.58446967, 0.52394783, 0.20996982,
       0.08161915, 0.36187528, 0.37263388, 0.40382659, 0.27271379,
       0.45833734, 0.91999428, 0.05113313, 0.68848771, 0.37790918,
       0.16555926, 0.13236584, 0.34152535, 0.73287678, 0.4248581 ,
       0.77408962, 0.18987123, 0.31198303, 0.6006648 , 0.05865835,
       0.05946351, 0.59098   , 0.25327405, 0.64950083, 0.11936802,
       0.83637147, 0.46737205, 0.00479074, 0.28032382, 0.86907266,
       0.98965878, 0.24945873, 0.42611166, 0.95234037, 0.40240885,
       0.99138168, 0.92485247, 0.664623  , 0.66251434, 0.74180194,
       0.50692262, 0.84107558, 0.55814025, 0.02848515, 0.62522618,
       0.06298374, 0.99280084, 0.63582266, 0.86004314, 0.48129837,
       0.43217572, 0.19627404, 0.37949872, 0.62311207, 0.30470248,
       0.60563738, 0.47530034, 0.58539764, 0.76705469, 0.60756414,
       0.79785199, 0.93573425, 0.29190085, 0.88559408, 0.51213271,
       0.53226024, 0.15848154, 0.34445934, 0.93028238, 0.26254352,
       0.32288676, 0.80530278, 0.56776572, 0.62564258, 0.95977837,
       0.97828974, 0.13016298, 0.79280007, 0.50962188, 0.04438088,
       0.45292442, 0.35766638, 0.24522512, 0.29642472, 0.31185445,
       0.4935285 , 0.97295455, 0.05087117, 0.26608957, 0.46410604,
       0.92134445, 0.62183453, 0.70450166, 0.17679178, 0.41967684,
       0.96384236, 0.72909974, 0.24016928, 0.66102769, 0.2423071 ,
       0.83295328, 0.76654073, 0.62886558, 0.86642743, 0.67752289,
       0.07800668, 0.51629423, 0.21686102, 0.47981566, 0.92265119,
       0.34972976, 0.67225485, 0.19738761, 0.00466895, 0.51929274,
       0.78474962, 0.56586138, 0.51979047, 0.68258695, 0.72432159,
       0.57523774, 0.68125251, 0.4835748 , 0.24957215, 0.64647192,
       0.20298065, 0.360667  , 0.29737338, 0.17355486, 0.69887227,
       0.20030792, 0.65045017, 0.08951478, 0.08707915, 0.85394407,
       0.43923305, 0.42660572, 0.41382951, 0.81257252, 0.07924112,
       0.98952436, 0.27468904, 0.28425374, 0.90894902, 0.19424746,
       0.44211528, 0.5782424 , 0.86925463, 0.84236966, 0.29845992,
       0.7185123 , 0.77658064, 0.05366662, 0.93752749, 0.72046529,
       0.61076747, 0.44179165, 0.38907689, 0.62281325, 0.32286404,
       0.67963717, 0.5074262 , 0.32434011, 0.20902566, 0.53767235,
       0.0429457 , 0.0417576 , 0.08485204, 0.50969173, 0.59562713,
       0.12153585, 0.64247469, 0.87854465, 0.07176062, 0.73516966,
       0.68830484, 0.58735272, 0.48989752, 0.33889263, 0.88803069,
       0.09388769, 0.86692468, 0.62110123, 0.23642066, 0.66138812,
       0.49785593, 0.01991538, 0.29376104, 0.00992061, 0.49491949,
       0.31387759, 0.24758599, 0.83892001, 0.15868379, 0.91859278,
       0.57687365, 0.39105108, 0.43630187, 0.91044988, 0.87242231,
       0.52960397, 0.35358789, 0.92388224, 0.97426971, 0.032126  ,
       0.90071482, 0.50235082, 0.33598727, 0.22032072, 0.92912852,
       0.27580909, 0.33736443, 0.28875856, 0.22024762, 0.75216378,
       0.49258131, 0.1621186 , 0.50797607, 0.86189404, 0.07033967,
       0.39499879, 0.35659015, 0.78339164, 0.70551357, 0.08174553,
       0.26266874, 0.27315081, 0.91512971, 0.83731634, 0.4713824 ,
       0.44501748, 0.43223825, 0.7293357 , 0.65275968, 0.04085994,
       0.52934753, 0.21784608, 0.52401152, 0.17783616, 0.39951804,
       0.62082463, 0.18357296, 0.17271229, 0.26045871, 0.06531858,
       0.32986443, 0.87650605, 0.62052738, 0.05848188, 0.24545806,
       0.95292668, 0.54881303, 0.01963422, 0.5308568 , 0.21057774,
       0.05267324, 0.878461  , 0.57535848, 0.13632321, 0.02129029,
       0.07003842, 0.38997329, 0.25122221, 0.75423907, 0.37219313,
       0.41718328, 0.74555599, 0.83150295, 0.57177105, 0.21285708,
       0.7580275 , 0.37254795, 0.51072406, 0.73679797, 0.24645479,
       0.90891953, 0.53290557, 0.19579389, 0.64387692, 0.16613216,
       0.04134694, 0.90595863, 0.12939354, 0.33319883, 0.90822386,
       0.20481192, 0.48084279, 0.11015125, 0.60363437, 0.41013965,
       0.99208377, 0.7982081 , 0.77919806, 0.90021177, 0.80094441,
       0.27337467, 0.98669698, 0.96587753, 0.12125913, 0.96096199,
       0.20946737, 0.0307178 , 0.77232097, 0.95053919, 0.60356332,
       0.81156217, 0.19059598, 0.74331541, 0.53291018, 0.84299559,
       0.91834981, 0.4590045 , 0.83783055, 0.71905855, 0.13377954,
       0.76312985, 0.56651368, 0.72593146, 0.28882584, 0.52081031,
       0.29891835, 0.04933477, 0.52316665, 0.98895462, 0.07988079,
       0.43183598, 0.52723472, 0.34570306, 0.9466695 , 0.05216413,
       0.92062686, 0.46393909, 0.77524091, 0.22608501, 0.80680605,
       0.51138091, 0.91961263, 0.82219835, 0.96042164, 0.82394816,
       0.66697303, 0.52794716, 0.10255066, 0.19021274, 0.0942436 ,
       0.8928763 , 0.02043705, 0.40805305, 0.81976557, 0.10350494,
       0.04628514, 0.36155664, 0.37838667, 0.53249462, 0.11094438,
       0.62604378, 0.82289232, 0.68241743, 0.64335536, 0.46577515,
       0.43933541, 0.96748656, 0.01545479, 0.41004592, 0.45715924,
       0.93178208, 0.08227325, 0.23040671, 0.57397822, 0.01730772,
       0.11377419, 0.53301893, 0.72106114, 0.81119191, 0.27975076,
       0.76542025, 0.48300916, 0.96674662, 0.4071672 , 0.3447496 ,
       0.27178641, 0.47120555, 0.13448539, 0.47692786, 0.74462148,
       0.05974179, 0.28085154, 0.74020124, 0.17777362, 0.60414771,
       0.28882225, 0.52058742, 0.79215761, 0.1563006 , 0.35019923,
       0.50672825, 0.73154272, 0.87423632, 0.19900365, 0.86476837,
       0.76348138, 0.43640439, 0.85866091, 0.88221641, 0.0671862 ,
       0.84844591, 0.05017513, 0.96359087, 0.74142718, 0.32966271,
       0.04309833, 0.05467868, 0.62439923, 0.95758759, 0.1937101 ,
       0.67746466, 0.25525839, 0.54591743, 0.83797279, 0.61487787,
       0.58215291, 0.55019039, 0.52846856, 0.32468745, 0.4613181 ,
       0.57016623, 0.94469002, 0.46505518, 0.46683899, 0.1480879 ,
       0.69633234, 0.40528405, 0.0341247 , 0.32974198, 0.63769225,
       0.71638603, 0.95264288, 0.48130219, 0.81311992, 0.71429137,
       0.15786142, 0.98433515, 0.32011912, 0.83137535, 0.69572775,
       0.4524655 , 0.41591871, 0.66138891, 0.68446301, 0.99566245,
       0.14892224, 0.8210585 , 0.30825976, 0.18753746, 0.18450642,
       0.01299483, 0.60756372, 0.79454623, 0.05006562, 0.31312749,
       0.06784891, 0.65598081, 0.59013908, 0.58135041, 0.50640303,
       0.82362353, 0.20136414, 0.55424069, 0.8189176 , 0.21042552,
       0.79126322, 0.96644713, 0.03547774, 0.92450628, 0.25692567,
       0.99187857, 0.61759896, 0.39812863, 0.79034409, 0.56160309,
       0.73201355, 0.67126528, 0.07706608, 0.32744713, 0.36239706,
       0.07211197, 0.53452003, 0.29696726, 0.55567514, 0.45184082,
       0.06760023, 0.08141691, 0.55070122, 0.46257663, 0.16465034,
       0.26105348, 0.72464344, 0.90401236, 0.34252253, 0.31547006,
       0.89282056, 0.55865904, 0.26641166, 0.4635976 , 0.77940426,
       0.01660244, 0.2452066 , 0.40522194, 0.79042413, 0.57261742,
       0.08809887, 0.59987659, 0.20622896, 0.26747392, 0.58993031,
       0.15061187, 0.60006175, 0.20108374, 0.89109169, 0.54905253,
       0.16362295, 0.8168604 , 0.73948365, 0.30147182, 0.33422892,
       0.65067957, 0.49403916, 0.52222764, 0.25727267, 0.41543938,
       0.60095968, 0.3644311 , 0.52993681, 0.54786481, 0.56849292,
       0.28884125, 0.85988485, 0.79566765, 0.55875235, 0.02047909,
       0.72190595, 0.34924911, 0.79748907, 0.00195903, 0.32217142,
       0.39844743, 0.32264827, 0.81530267, 0.94741871, 0.40490363,
       0.52963143, 0.6894393 , 0.53151679, 0.25761708, 0.37807462,
       0.5402203 , 0.59513618, 0.30418184, 0.67137771, 0.66322789,
       0.22878039, 0.20127643, 0.50168805, 0.53991973, 0.15662842,
       0.92513822, 0.72957202, 0.24808187, 0.19194089, 0.17384655,
       0.04241848, 0.07279653, 0.82597244, 0.49614762, 0.24121425,
       0.45210155, 0.2458918 , 0.49975509, 0.88729213, 0.17659452,
       0.47181169, 0.27045048, 0.50274167, 0.26255025, 0.43748174,
       0.93926492, 0.86263366, 0.10029935, 0.09350654, 0.5941372 ,
       0.12383028, 0.4149823 , 0.17934685, 0.37853747, 0.58781886,
       0.08630015, 0.95900564, 0.17537512, 0.9636695 , 0.6396281 ,
       0.37743722, 0.43298986, 0.58944778, 0.04626884, 0.55197246,
       0.76299912, 0.44865133, 0.1725015 , 0.07686014, 0.65748217,
       0.83719177, 0.3028703 , 0.6797181 , 0.80676096, 0.68319598,
       0.97000102, 0.08750154, 0.58078197, 0.236625  , 0.42306031,
       0.61381591, 0.52829386, 0.98674498, 0.01115725, 0.26997597,
       0.16605101, 0.28413798, 0.33767426, 0.53964996, 0.99913544,
       0.10505336, 0.96795736, 0.62938668, 0.0707034 , 0.09123157,
       0.94375862, 0.82891608, 0.95076295, 0.40452591, 0.96764648,
       0.42317629, 0.01701716, 0.1701378 , 0.72217145, 0.33191403,
       0.26471239, 0.80163655, 0.75195467, 0.19294247, 0.25076874,
       0.54204437, 0.90641538, 0.88895123, 0.87427469, 0.61823439,
       0.24779871, 0.23506743, 0.05424469, 0.13807192, 0.23947728,
       0.49718987, 0.94449457, 0.79443589, 0.26714316, 0.12344278,
       0.8154745 , 0.06637338, 0.23822985, 0.33208834, 0.44974921,
       0.05020425, 0.65559392, 0.20809285, 0.32216251, 0.21821099,
       0.38215851, 0.53780594, 0.70190945, 0.67495627, 0.25058053,
       0.77656776, 0.83510331, 0.82008848, 0.60275767, 0.47833432,
       0.50801721, 0.99085989, 0.44514264, 0.88793338, 0.14801739,
       0.83285744, 0.1996269 , 0.15458735, 0.53041103, 0.41809584,
       0.12768041, 0.28944729, 0.71894712, 0.16411799, 0.16896513,
       0.84496382, 0.05158723, 0.93561098, 0.32703994, 0.4644861 ,
       0.82693339, 0.06292763, 0.4306903 , 0.55290479, 0.58644566,
       0.74173037, 0.35505813, 0.80849776, 0.21611354, 0.39452226,
       0.07882835, 0.59679751, 0.93783059, 0.41005598, 0.63373283,
       0.80667758, 0.23959877, 0.44737695, 0.41902322, 0.45771697,
       0.1526504 , 0.06305278, 0.54689744, 0.69368932, 0.65083484,
       0.17190566, 0.99229571, 0.89985281, 0.81347441, 0.2216383 ,
       0.02667927, 0.97778175, 0.10038188, 0.04665359, 0.22306047,
       0.45589626, 0.62967138, 0.26219479, 0.06150327, 0.49049033,
       0.21252237, 0.41794831, 0.34179999, 0.39767852, 0.73112046,
       0.55881143, 0.15910074, 0.57725861, 0.71888733, 0.65109648,
       0.57314646, 0.53661566, 0.31267734, 0.15347898, 0.53978629,
       0.55397351, 0.60051956, 0.50058571, 0.90482161, 0.9749138 ,
       0.04019499, 0.00703341, 0.85333798, 0.63639887, 0.66948409,
       0.15753874, 0.26443054, 0.43048241, 0.61158677, 0.63262956,
       0.10380074, 0.87826262, 0.88238053, 0.69128581, 0.79610017,
       0.01514841, 0.86764111, 0.37787667, 0.29222894, 0.71408931,
       0.25898656, 0.15355057, 0.03316496, 0.5345762 , 0.67712024,
       0.20857551, 0.43402897, 0.57828212, 0.4704473 , 0.75444664,
       0.72774469, 0.82956686, 0.04888826, 0.89396739, 0.24430832,
       0.24882352, 0.56535256, 0.68744506, 0.97489071, 0.52732309,
       0.26665807, 0.6942861 , 0.86116665, 0.03894757, 0.24518697,
       0.82939073, 0.79726751, 0.96059692, 0.78000291, 0.58173997,
       0.97333047, 0.81074143, 0.32763522, 0.495395  , 0.70081646,
       0.71926697, 0.20367336, 0.73742918, 0.75251992, 0.16075554,
       0.00744406, 0.6882218 , 0.46141303, 0.03812344, 0.74881014,
       0.66252838, 0.97993758, 0.66888341, 0.61773505, 0.72122967,
       0.68440587, 0.05145202, 0.51055154, 0.0772365 , 0.42849484,
       0.32166123, 0.65561585, 0.60107172, 0.84261058, 0.9764547 ,
       0.92216243, 0.69456844, 0.54107346, 0.76107492, 0.87651612,
       0.14261725, 0.71620946, 0.93806462, 0.39060478, 0.62763168,
       0.02944012, 0.08643687, 0.4162164 , 0.25799923, 0.419356  ,
       0.14296592, 0.31370662, 0.90858499, 0.37638315, 0.10254491,
       0.98159144, 0.10852534, 0.83763621, 0.28859864, 0.24605961,
       0.43236451, 0.91721365, 0.595289  , 0.7055256 , 0.82874003,
       0.55158519, 0.29252499, 0.06693801, 0.8579813 , 0.06314891,
       0.60869765, 0.74995128, 0.11530915, 0.5256386 , 0.11418522,
       0.8230061 , 0.72078966, 0.70984862, 0.29758277, 0.55798795,
       0.57671393, 0.16340708, 0.66751876, 0.471707  , 0.42464792,
       0.51282422, 0.47085884, 0.10066005, 0.59329147, 0.27997353,
       0.61947974, 0.30658592, 0.78593778, 0.08667343, 0.59943609,
       0.40095506, 0.56370698, 0.93568763, 0.65630977, 0.38204355])

In [202]: d = np.random.random(1000)

In [203]: d
Out[203]:
array([0.91957665, 0.31983072, 0.43654912, 0.80503828, 0.98104724,
       0.56653835, 0.11768954, 0.67839126, 0.24574353, 0.64557614,
       0.27615866, 0.69674078, 0.13700945, 0.62080233, 0.06422854,
       0.41912879, 0.1900047 , 0.99174952, 0.44931222, 0.83594157,
       0.42427994, 0.09991728, 0.3988521 , 0.76858678, 0.43696845,
       0.95647339, 0.21484195, 0.98284531, 0.54707575, 0.45518522,
       0.75557308, 0.40555559, 0.18854879, 0.59375867, 0.09120224,
       0.60094583, 0.65354323, 0.24239895, 0.76512586, 0.4509044 ,
       0.92980351, 0.67447496, 0.34781458, 0.94175807, 0.89167474,
       0.32811191, 0.53603713, 0.04845262, 0.86874346, 0.41588682,
       0.36242471, 0.72909081, 0.89938115, 0.65712759, 0.07044771,
       0.4301316 , 0.40635387, 0.65264881, 0.88935866, 0.89874415,
       0.01882438, 0.34249947, 0.26872681, 0.85039319, 0.71208926,
       0.01757706, 0.717251  , 0.78005881, 0.70485301, 0.98328704,
       0.1442635 , 0.62839796, 0.69353007, 0.32564588, 0.32105323,
       0.12400117, 0.53605032, 0.66748326, 0.73009397, 0.50461702,
       0.27230835, 0.11260239, 0.90228702, 0.20229269, 0.74539815,
       0.74974216, 0.41213036, 0.81455894, 0.09484517, 0.59863899,
       0.81324509, 0.86262558, 0.54036921, 0.17782975, 0.58201641,
       0.91350011, 0.67327194, 0.27678911, 0.1186382 , 0.80181223,
       0.06566966, 0.83962627, 0.8151149 , 0.60296146, 0.32335639,
       0.54571718, 0.1680936 , 0.25979645, 0.27654151, 0.12163777,
       0.00810328, 0.12633514, 0.82116157, 0.91604787, 0.33356793,
       0.1384495 , 0.01192572, 0.92903988, 0.4200539 , 0.42804442,
       0.02863254, 0.52897124, 0.70807871, 0.73782979, 0.9148819 ,
       0.93805172, 0.80547944, 0.75490986, 0.57651379, 0.70415559,
       0.51093468, 0.78800126, 0.89785567, 0.89156966, 0.54598306,
       0.56179367, 0.60823216, 0.5006258 , 0.43762166, 0.66294292,
       0.89387695, 0.3720624 , 0.71824495, 0.30331887, 0.8799391 ,
       0.17891156, 0.72403247, 0.08916055, 0.53679224, 0.08718599,
       0.82632511, 0.08242544, 0.40615063, 0.81180154, 0.76765174,
       0.75440414, 0.56839631, 0.88890497, 0.92470253, 0.57696104,
       0.20666156, 0.12111558, 0.12363543, 0.87526033, 0.59532899,
       0.39930219, 0.24708141, 0.75173213, 0.81078164, 0.03805793,
       0.80193009, 0.20617297, 0.45761023, 0.4313971 , 0.99547262,
       0.55656235, 0.70383198, 0.2887427 , 0.74654921, 0.32946855,
       0.28123526, 0.50472851, 0.24052041, 0.28924212, 0.62064802,
       0.79310902, 0.3618633 , 0.41520765, 0.35829188, 0.64429694,
       0.45274122, 0.00200375, 0.81131187, 0.53950999, 0.13125785,
       0.70938615, 0.67311271, 0.73954476, 0.80348875, 0.35901978,
       0.26202216, 0.47159706, 0.82088351, 0.80434766, 0.97901335,
       0.39794263, 0.27759757, 0.63175825, 0.13882137, 0.98127771,
       0.36614246, 0.54818565, 0.68197386, 0.97932322, 0.53673802,
       0.84505884, 0.61532472, 0.49998997, 0.85425699, 0.9131182 ,
       0.41441758, 0.21543505, 0.39022262, 0.19500735, 0.75239685,
       0.33220745, 0.92963224, 0.09978779, 0.6617597 , 0.71717655,
       0.7912138 , 0.25930361, 0.06700338, 0.44164192, 0.98346694,
       0.66548197, 0.36858808, 0.77370453, 0.02560101, 0.3415033 ,
       0.58427054, 0.62415426, 0.54965934, 0.6610498 , 0.14882559,
       0.21058009, 0.01292442, 0.38146043, 0.26907763, 0.27860222,
       0.85977466, 0.99109056, 0.72130883, 0.69199207, 0.21948519,
       0.54610743, 0.55500364, 0.28156101, 0.62442723, 0.97241762,
       0.36288136, 0.33655703, 0.48195789, 0.94386287, 0.22606359,
       0.01072194, 0.84194258, 0.78556858, 0.78138505, 0.1198235 ,
       0.90503635, 0.3198159 , 0.13882386, 0.51507002, 0.79732326,
       0.56120777, 0.37793124, 0.17267089, 0.8869557 , 0.91297594,
       0.87177035, 0.85060457, 0.44429458, 0.03533419, 0.38021715,
       0.26033133, 0.78305379, 0.87482191, 0.543969  , 0.02142553,
       0.9890057 , 0.43375234, 0.8649908 , 0.92520725, 0.12080568,
       0.33236994, 0.77303542, 0.28967013, 0.13304791, 0.04819773,
       0.72024845, 0.14738922, 0.24542723, 0.55653903, 0.63443579,
       0.10545721, 0.53054682, 0.08572381, 0.07772696, 0.5879059 ,
       0.04494381, 0.97412754, 0.6859424 , 0.31082297, 0.4239444 ,
       0.17097992, 0.58966655, 0.86871108, 0.56848085, 0.43380202,
       0.14507377, 0.0107218 , 0.52818353, 0.49394054, 0.63278916,
       0.11191577, 0.91475568, 0.38554507, 0.37619728, 0.6896842 ,
       0.34190545, 0.91321601, 0.40174894, 0.09865066, 0.02785262,
       0.76008344, 0.94127344, 0.91559886, 0.81467065, 0.57365754,
       0.48898797, 0.84656612, 0.41145321, 0.17605514, 0.19611175,
       0.97787624, 0.8414856 , 0.13844374, 0.83882474, 0.75890373,
       0.45564801, 0.79934239, 0.66510391, 0.2089057 , 0.17616127,
       0.92271414, 0.40368463, 0.3385725 , 0.01093718, 0.86449218,
       0.73493891, 0.55786474, 0.84101028, 0.61518195, 0.63804502,
       0.14303184, 0.28506188, 0.63215576, 0.22625804, 0.10007175,
       0.48205941, 0.50667264, 0.87108626, 0.1322657 , 0.98513565,
       0.96576196, 0.64687635, 0.81788071, 0.92095622, 0.3969051 ,
       0.77731803, 0.53312545, 0.009707  , 0.4659476 , 0.74275302,
       0.36786379, 0.85845531, 0.52814872, 0.26870994, 0.5977217 ,
       0.5705541 , 0.99751724, 0.18705973, 0.59815607, 0.41475637,
       0.45435047, 0.83847203, 0.93898201, 0.01371107, 0.89301546,
       0.90419145, 0.5740963 , 0.44711528, 0.73515351, 0.22444867,
       0.96510101, 0.29160431, 0.42997544, 0.91882875, 0.1558188 ,
       0.00449968, 0.38544904, 0.75504271, 0.89739785, 0.9145829 ,
       0.01197851, 0.76249333, 0.9689414 , 0.2312729 , 0.32632115,
       0.42065136, 0.15772353, 0.64891863, 0.51108722, 0.82443742,
       0.44102094, 0.02357805, 0.39127626, 0.9100712 , 0.04575984,
       0.27597278, 0.49057699, 0.31564842, 0.74174601, 0.80497669,
       0.49728532, 0.83865361, 0.91282741, 0.92549033, 0.44404801,
       0.78153501, 0.25163226, 0.80435721, 0.40192169, 0.08865423,
       0.70198432, 0.53178694, 0.43423985, 0.30318453, 0.81931274,
       0.69148307, 0.87743541, 0.6454075 , 0.73591381, 0.0214978 ,
       0.23396114, 0.92924568, 0.86653299, 0.07401678, 0.47509889,
       0.57622287, 0.43773819, 0.50139919, 0.12199527, 0.98179273,
       0.46436372, 0.93933898, 0.31947577, 0.70987171, 0.59851882,
       0.0278789 , 0.2483966 , 0.68806028, 0.63141825, 0.60349546,
       0.32043625, 0.29081234, 0.68480784, 0.60738822, 0.99478982,
       0.0265849 , 0.06574898, 0.54227806, 0.74580604, 0.94981002,
       0.24563784, 0.99006944, 0.23526125, 0.08504754, 0.45616038,
       0.34274107, 0.14142284, 0.08828588, 0.96584966, 0.42182932,
       0.60330838, 0.28573149, 0.21251935, 0.48305248, 0.96082023,
       0.82760499, 0.39665976, 0.04286316, 0.83186165, 0.12025144,
       0.17860758, 0.90036029, 0.18168632, 0.05739608, 0.39087729,
       0.70297576, 0.060829  , 0.90826463, 0.11986869, 0.75890647,
       0.01237337, 0.67712194, 0.37820675, 0.59063962, 0.54221937,
       0.21590931, 0.97954766, 0.97547446, 0.56197922, 0.04594621,
       0.86200533, 0.62493527, 0.68119113, 0.4039765 , 0.18141787,
       0.17133029, 0.4646816 , 0.71173733, 0.84298856, 0.72743041,
       0.96995224, 0.39959535, 0.87907211, 0.23635013, 0.27090241,
       0.3032541 , 0.65037401, 0.97840368, 0.20236014, 0.57228566,
       0.57021879, 0.50319556, 0.8397423 , 0.86110051, 0.15515245,
       0.12710743, 0.81918793, 0.24166824, 0.10899756, 0.38048186,
       0.30064159, 0.92368543, 0.83825372, 0.58273512, 0.62993087,
       0.17887545, 0.16843995, 0.09099403, 0.16245283, 0.92373693,
       0.89208386, 0.52011601, 0.87154723, 0.63234767, 0.8761431 ,
       0.07937471, 0.01312238, 0.46707569, 0.22137656, 0.13718917,
       0.30023312, 0.93279142, 0.84035365, 0.39615086, 0.42927168,
       0.69811903, 0.41988879, 0.132698  , 0.7356389 , 0.67144642,
       0.02736949, 0.64916638, 0.35020134, 0.82672624, 0.54876858,
       0.3474472 , 0.99709408, 0.22521591, 0.08407472, 0.69016369,
       0.73744729, 0.92364728, 0.31174703, 0.56725984, 0.15638922,
       0.39948658, 0.38091229, 0.17643112, 0.82210223, 0.02763372,
       0.37090072, 0.44747736, 0.69977788, 0.27158862, 0.2322638 ,
       0.1576646 , 0.2690055 , 0.03009929, 0.27916865, 0.39057146,
       0.33802779, 0.16422187, 0.15388127, 0.51450622, 0.10218646,
       0.98273101, 0.34807252, 0.41776263, 0.82124712, 0.94978089,
       0.60406208, 0.82172402, 0.22048701, 0.60960899, 0.67041625,
       0.87012238, 0.1995043 , 0.02403955, 0.21579501, 0.27587061,
       0.11040081, 0.36069935, 0.54617815, 0.52923787, 0.3762261 ,
       0.79539972, 0.122977  , 0.06533497, 0.70714052, 0.18469443,
       0.47907079, 0.56263966, 0.58606706, 0.79923514, 0.51760425,
       0.3253034 , 0.52201993, 0.24485624, 0.92474896, 0.52668463,
       0.48152085, 0.82583605, 0.45236197, 0.81240803, 0.14402241,
       0.22600673, 0.05841124, 0.57977643, 0.75247467, 0.86461441,
       0.25582591, 0.84920952, 0.75584856, 0.11404735, 0.0396502 ,
       0.40452976, 0.0372529 , 0.08122996, 0.37772654, 0.29188482,
       0.35025655, 0.40296795, 0.32672952, 0.21748939, 0.72206593,
       0.87085674, 0.12329079, 0.45708045, 0.52271536, 0.64861392,
       0.54738844, 0.88804083, 0.27289545, 0.74345532, 0.48433634,
       0.35920559, 0.36688106, 0.67834906, 0.78752643, 0.453114  ,
       0.79523349, 0.58304101, 0.84560922, 0.02595702, 0.0123707 ,
       0.59306991, 0.88273471, 0.58468713, 0.04388921, 0.74811069,
       0.37833692, 0.90395843, 0.32659678, 0.3799391 , 0.63222374,
       0.89794222, 0.95760815, 0.07318937, 0.37911048, 0.40536514,
       0.21600783, 0.47771069, 0.94665228, 0.96108193, 0.75538587,
       0.11130872, 0.80059769, 0.69112505, 0.49764661, 0.87953929,
       0.17635784, 0.46719785, 0.4336094 , 0.44895901, 0.25223298,
       0.71134871, 0.9855559 , 0.17963596, 0.00125839, 0.43899799,
       0.93645151, 0.54913994, 0.24907927, 0.79299934, 0.93167394,
       0.2023745 , 0.37884806, 0.39976008, 0.48023159, 0.07794592,
       0.74058999, 0.1855325 , 0.1350317 , 0.97166315, 0.48083757,
       0.14173305, 0.68619626, 0.89025998, 0.28034232, 0.49535313,
       0.96284966, 0.34718396, 0.05934108, 0.72679251, 0.79405787,
       0.13290307, 0.24143548, 0.05887382, 0.85076328, 0.03034137,
       0.04230198, 0.09350618, 0.30249723, 0.11263029, 0.70489407,
       0.19834934, 0.53904774, 0.03579511, 0.47972209, 0.25673401,
       0.19124178, 0.70440484, 0.67618218, 0.2305493 , 0.4320093 ,
       0.19837264, 0.53003551, 0.49980414, 0.35647915, 0.17630332,
       0.4148976 , 0.97175472, 0.40882121, 0.03485279, 0.40359672,
       0.77658553, 0.87346069, 0.43659579, 0.8085689 , 0.68419774,
       0.38077311, 0.83863769, 0.38623677, 0.67010798, 0.10379033,
       0.10893527, 0.41247111, 0.18730244, 0.06875672, 0.68051637,
       0.83495187, 0.26751841, 0.60033443, 0.25456045, 0.00226424,
       0.31767492, 0.27870654, 0.12625294, 0.93090815, 0.15454221,
       0.45964325, 0.53001881, 0.33933375, 0.47458521, 0.72058803,
       0.2900701 , 0.74248633, 0.91867286, 0.6160399 , 0.06712142,
       0.21124795, 0.63461861, 0.93973284, 0.50091751, 0.70252797,
       0.56756452, 0.63349548, 0.05630268, 0.23868965, 0.93920567,
       0.71978838, 0.98156356, 0.56003166, 0.24864196, 0.42543029,
       0.75852459, 0.51737808, 0.1254144 , 0.434409  , 0.09961568,
       0.31363123, 0.56185539, 0.3641125 , 0.41093387, 0.70252256,
       0.74525283, 0.85804412, 0.29674173, 0.76595208, 0.92178388,
       0.53069426, 0.20323301, 0.49930148, 0.46784146, 0.31419899,
       0.62165646, 0.61670665, 0.14632419, 0.72942408, 0.31406921,
       0.23308579, 0.20190337, 0.4670549 , 0.07649303, 0.70250203,
       0.78065491, 0.17010383, 0.02223056, 0.6092897 , 0.1882374 ,
       0.47083204, 0.95153713, 0.33627117, 0.86029799, 0.67141942,
       0.89209933, 0.43627901, 0.01727881, 0.80798868, 0.21684356,
       0.49184363, 0.83644724, 0.33348469, 0.4999075 , 0.68243152,
       0.41103427, 0.3641062 , 0.07177659, 0.17185057, 0.55527135,
       0.64687572, 0.24612236, 0.05802236, 0.39499579, 0.70644079,
       0.79438548, 0.51791229, 0.15812797, 0.38482265, 0.18915675,
       0.97129096, 0.2298409 , 0.42501441, 0.14686817, 0.21585825,
       0.68164325, 0.5181001 , 0.37777489, 0.28697233, 0.0698302 ,
       0.18206017, 0.15630151, 0.9494442 , 0.49627547, 0.0227855 ,
       0.639708  , 0.81853069, 0.12745191, 0.56962431, 0.87414605,
       0.65648966, 0.98583688, 0.87005567, 0.31966568, 0.9340191 ,
       0.90192962, 0.25906667, 0.82598888, 0.48124893, 0.60524284,
       0.32316978, 0.23785157, 0.1505739 , 0.37066512, 0.6069598 ,
       0.27855745, 0.52012415, 0.2265921 , 0.08257782, 0.64738714,
       0.59407023, 0.84070743, 0.81282097, 0.80498283, 0.12180222,
       0.33558352, 0.23255185, 0.59411223, 0.95114515, 0.36620928,
       0.87129988, 0.75341655, 0.74317909, 0.59619619, 0.33676569,
       0.21291788, 0.14813846, 0.2603103 , 0.81017193, 0.50856653,
       0.26917725, 0.28902705, 0.61722847, 0.06661425, 0.18789847,
       0.43992947, 0.29409567, 0.12749286, 0.38552174, 0.97240814,
       0.67931665, 0.28066822, 0.29649272, 0.87752354, 0.65163329,
       0.19685271, 0.5612126 , 0.78004189, 0.85433588, 0.98139735,
       0.82026411, 0.34379035, 0.96420907, 0.48962812, 0.2283476 ,
       0.34454387, 0.66997656, 0.31310688, 0.7469017 , 0.37753215,
       0.13548869, 0.09999493, 0.71565034, 0.23841807, 0.58794205])

In [204]: np.random.seed?
Docstring:
seed(self, seed=None)

Reseed a legacy MT19937 BitGenerator

Notes
-----
This is a convenience, legacy function.

The best practice is to **not** reseed a BitGenerator, rather to
recreate a new one. This method is here for legacy reasons.
This example demonstrates best practice.

>>> from numpy.random import MT19937
>>> from numpy.random import RandomState, SeedSequence
>>> rs = RandomState(MT19937(SeedSequence(123456789)))
# Later, you want to restart the stream
>>> rs = RandomState(MT19937(SeedSequence(987654321)))
Type:      builtin_function_or_method

In [205]: np.random.seed(0)

In [206]: np.random.random(10)
Out[206]:
array([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ,
       0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152])

In [207]: np.random.random(10)
Out[207]:
array([0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606,
       0.0871293 , 0.0202184 , 0.83261985, 0.77815675, 0.87001215])

In [208]: np.random.seed(0)

In [209]: np.random.random(10)
Out[209]:
array([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ,
       0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152])

In [210]: c = _

In [211]: c.dtype
Out[211]: dtype('float64')

In [212]: np.random.randint?

In [213]: d = np.random.randint(0, 10, 1000)

In [214]: d
Out[214]:
array([6, 7, 7, 8, 1, 5, 9, 8, 9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3,
       7, 0, 1, 9, 9, 0, 4, 7, 3, 2, 7, 2, 0, 0, 4, 5, 5, 6, 8, 4, 1, 4,
       9, 8, 1, 1, 7, 9, 9, 3, 6, 7, 2, 0, 3, 5, 9, 4, 4, 6, 4, 4, 3, 4,
       4, 8, 4, 3, 7, 5, 5, 0, 1, 5, 9, 3, 0, 5, 0, 1, 2, 4, 2, 0, 3, 2,
       0, 7, 5, 9, 0, 2, 7, 2, 9, 2, 3, 3, 2, 3, 4, 1, 2, 9, 1, 4, 6, 8,
       2, 3, 0, 0, 6, 0, 6, 3, 3, 8, 8, 8, 2, 3, 2, 0, 8, 8, 3, 8, 2, 8,
       4, 3, 0, 4, 3, 6, 9, 8, 0, 8, 5, 9, 0, 9, 6, 5, 3, 1, 8, 0, 4, 9,
       6, 5, 7, 8, 8, 9, 2, 8, 6, 6, 9, 1, 6, 8, 8, 3, 2, 3, 6, 3, 6, 5,
       7, 0, 8, 4, 6, 5, 8, 2, 3, 9, 7, 5, 3, 4, 5, 3, 3, 7, 9, 9, 9, 7,
       3, 2, 3, 9, 7, 7, 5, 1, 2, 2, 8, 1, 5, 8, 4, 0, 2, 5, 5, 0, 8, 1,
       1, 0, 3, 8, 8, 4, 4, 0, 9, 3, 7, 3, 2, 1, 1, 2, 1, 4, 2, 5, 5, 5,
       2, 5, 7, 7, 6, 1, 6, 7, 2, 3, 1, 9, 5, 9, 9, 2, 0, 9, 1, 9, 0, 6,
       0, 4, 8, 4, 3, 3, 8, 8, 7, 0, 3, 8, 7, 7, 1, 8, 4, 7, 0, 4, 9, 0,
       6, 4, 2, 4, 6, 3, 3, 7, 8, 5, 0, 8, 5, 4, 7, 4, 1, 3, 3, 9, 2, 5,
       2, 3, 5, 7, 2, 7, 1, 6, 5, 0, 0, 3, 1, 9, 9, 6, 6, 7, 8, 8, 7, 0,
       8, 6, 8, 9, 8, 3, 6, 1, 7, 4, 9, 2, 0, 8, 2, 7, 8, 4, 4, 1, 7, 6,
       9, 4, 1, 5, 9, 7, 1, 3, 5, 7, 3, 6, 6, 7, 9, 1, 9, 6, 0, 3, 8, 4,
       1, 4, 5, 0, 3, 1, 4, 4, 4, 0, 0, 8, 4, 6, 9, 3, 3, 2, 1, 2, 1, 3,
       4, 1, 1, 0, 7, 8, 4, 3, 5, 6, 3, 2, 9, 8, 1, 4, 0, 8, 3, 9, 5, 5,
       1, 7, 8, 6, 4, 7, 3, 5, 3, 6, 4, 7, 3, 0, 5, 9, 3, 7, 5, 5, 8, 0,
       8, 3, 6, 9, 3, 2, 7, 0, 3, 0, 3, 6, 1, 9, 2, 9, 4, 9, 1, 3, 2, 4,
       9, 7, 4, 9, 4, 1, 2, 7, 2, 3, 9, 7, 6, 6, 2, 3, 6, 0, 8, 0, 7, 6,
       5, 9, 6, 5, 2, 7, 1, 9, 2, 2, 5, 6, 4, 2, 2, 1, 0, 9, 0, 2, 8, 3,
       0, 8, 8, 1, 0, 5, 8, 2, 3, 5, 3, 8, 6, 4, 6, 3, 6, 2, 6, 5, 5, 9,
       4, 6, 5, 1, 3, 3, 8, 9, 5, 5, 6, 0, 9, 7, 5, 1, 5, 6, 6, 8, 7, 5,
       3, 2, 9, 9, 3, 2, 5, 4, 1, 5, 8, 3, 5, 8, 4, 1, 7, 8, 1, 2, 1, 1,
       7, 5, 0, 4, 1, 1, 6, 6, 0, 2, 3, 7, 9, 2, 4, 9, 0, 6, 9, 2, 4, 7,
       3, 0, 5, 4, 0, 2, 3, 1, 7, 1, 3, 4, 1, 7, 4, 0, 2, 7, 4, 0, 2, 6,
       9, 2, 4, 9, 9, 5, 4, 4, 9, 8, 1, 5, 7, 0, 1, 3, 9, 2, 8, 2, 4, 8,
       2, 9, 8, 7, 8, 2, 3, 3, 6, 0, 3, 6, 3, 9, 6, 3, 2, 2, 2, 6, 4, 6,
       0, 4, 9, 2, 1, 6, 1, 7, 5, 6, 1, 6, 6, 6, 6, 2, 5, 2, 2, 3, 2, 9,
       3, 8, 5, 4, 5, 1, 5, 8, 2, 9, 9, 5, 6, 4, 0, 8, 5, 5, 5, 1, 0, 0,
       0, 0, 0, 7, 6, 3, 5, 4, 3, 4, 5, 1, 3, 6, 7, 4, 0, 0, 7, 3, 3, 0,
       0, 9, 4, 4, 5, 8, 8, 0, 1, 5, 9, 9, 6, 1, 4, 0, 4, 7, 7, 7, 6, 2,
       6, 0, 2, 7, 7, 2, 6, 1, 3, 7, 0, 5, 4, 5, 5, 3, 8, 0, 1, 5, 4, 1,
       5, 0, 6, 8, 8, 6, 3, 4, 4, 3, 6, 5, 9, 8, 1, 3, 8, 1, 5, 8, 0, 3,
       7, 1, 7, 8, 0, 7, 5, 9, 9, 6, 8, 7, 5, 9, 1, 0, 0, 5, 6, 3, 6, 1,
       7, 7, 0, 7, 6, 0, 4, 2, 7, 5, 2, 8, 5, 6, 6, 4, 1, 5, 4, 5, 5, 6,
       3, 8, 1, 4, 2, 9, 7, 4, 1, 8, 2, 3, 3, 4, 1, 6, 2, 5, 4, 9, 1, 5,
       9, 4, 5, 7, 4, 4, 2, 2, 1, 3, 0, 1, 9, 1, 6, 9, 8, 6, 3, 0, 7, 3,
       2, 5, 9, 7, 3, 4, 7, 6, 7, 3, 6, 9, 3, 7, 1, 3, 7, 8, 8, 4, 5, 3,
       6, 9, 6, 2, 9, 3, 5, 7, 9, 0, 7, 1, 2, 5, 0, 5, 8, 9, 8, 2, 5, 3,
       1, 7, 3, 8, 5, 5, 1, 9, 7, 2, 1, 0, 1, 0, 1, 1, 6, 8, 8, 3, 2, 0,
       7, 4, 6, 0, 5, 3, 3, 9, 4, 9, 0, 6, 5, 3, 0, 0, 1, 2, 0, 2, 2, 9,
       6, 7, 8, 9, 8, 2, 4, 7, 7, 5, 7, 2, 4, 1, 1, 1, 7, 9, 0, 9, 0, 2,
       1, 4, 6, 0, 6, 6, 2, 8, 6, 6])

In [215]: import matplotlib as plt

In [216]: f, ax = plt.subplots()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-216-be1092e55f3c> in <module>
----> 1 f, ax = plt.subplots()

AttributeError: module 'matplotlib' has no attribute 'subplots'
> <ipython-input-216-be1092e55f3c>(1)<module>()
----> 1 f, ax = plt.subplots()

ipdb> c

In [217]: f, ax = plt.subplots()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-217-be1092e55f3c> in <module>
----> 1 f, ax = plt.subplots()

AttributeError: module 'matplotlib' has no attribute 'subplots'
> <ipython-input-217-be1092e55f3c>(1)<module>()
----> 1 f, ax = plt.subplots()

ipdb> c

In [218]: import matplotlib.pyplot as plt

In [219]: f, ax = plt.subplots()

In [220]: c = np.random.random(1000)

In [221]: ax.hist(c, bins=30)
Out[221]:
(array([31., 36., 25., 45., 32., 36., 29., 26., 36., 41., 33., 29., 38.,
        21., 36., 33., 29., 25., 26., 29., 25., 42., 27., 44., 42., 31.,
        38., 37., 40., 38.]),
 array([3.67343751e-04, 3.36820516e-02, 6.69967594e-02, 1.00311467e-01,
        1.33626175e-01, 1.66940883e-01, 2.00255591e-01, 2.33570298e-01,
        2.66885006e-01, 3.00199714e-01, 3.33514422e-01, 3.66829130e-01,
        4.00143837e-01, 4.33458545e-01, 4.66773253e-01, 5.00087961e-01,
        5.33402669e-01, 5.66717377e-01, 6.00032084e-01, 6.33346792e-01,
        6.66661500e-01, 6.99976208e-01, 7.33290916e-01, 7.66605623e-01,
        7.99920331e-01, 8.33235039e-01, 8.66549747e-01, 8.99864455e-01,
        9.33179162e-01, 9.66493870e-01, 9.99808578e-01]),
 <a list of 30 Patch objects>)

In [222]: c = np.random.random(100000)

In [223]: f, ax = plt.subplots()

In [224]: ax.hist(c, bins=30)
Out[224]:
(array([3277., 3406., 3415., 3414., 3302., 3346., 3353., 3306., 3269.,
        3362., 3291., 3212., 3408., 3316., 3356., 3299., 3382., 3433.,
        3249., 3262., 3307., 3332., 3341., 3331., 3404., 3360., 3259.,
        3377., 3306., 3325.]),
 array([3.31055446e-06, 3.33357986e-02, 6.66682866e-02, 1.00000775e-01,
        1.33333263e-01, 1.66665751e-01, 1.99998239e-01, 2.33330727e-01,
        2.66663215e-01, 2.99995703e-01, 3.33328191e-01, 3.66660679e-01,
        3.99993167e-01, 4.33325655e-01, 4.66658143e-01, 4.99990631e-01,
        5.33323119e-01, 5.66655607e-01, 5.99988095e-01, 6.33320583e-01,
        6.66653071e-01, 6.99985559e-01, 7.33318047e-01, 7.66650535e-01,
        7.99983024e-01, 8.33315512e-01, 8.66648000e-01, 8.99980488e-01,
        9.33312976e-01, 9.66645464e-01, 9.99977952e-01]),
 <a list of 30 Patch objects>)

In [225]: d = np.random.randint(0, 10, 1000)

In [226]: d
Out[226]:
array([8, 5, 7, 5, 4, 4, 7, 4, 4, 9, 4, 6, 4, 3, 8, 6, 9, 7, 2, 1, 3, 7,
       4, 3, 2, 2, 7, 8, 2, 3, 7, 1, 9, 7, 5, 7, 7, 0, 7, 8, 5, 1, 1, 1,
       8, 3, 2, 1, 8, 3, 0, 4, 1, 7, 4, 7, 7, 3, 3, 1, 0, 5, 3, 5, 0, 1,
       8, 6, 4, 7, 0, 0, 0, 1, 6, 4, 2, 7, 6, 0, 5, 5, 5, 9, 9, 9, 3, 9,
       9, 7, 6, 4, 5, 0, 8, 2, 0, 1, 1, 3, 2, 8, 5, 9, 9, 6, 2, 4, 8, 8,
       5, 3, 4, 3, 3, 8, 7, 9, 2, 3, 6, 6, 6, 4, 6, 7, 3, 5, 4, 9, 7, 2,
       2, 5, 0, 3, 4, 2, 9, 8, 8, 9, 8, 0, 7, 3, 8, 4, 1, 7, 2, 7, 2, 3,
       1, 6, 5, 7, 6, 2, 9, 8, 2, 8, 7, 2, 1, 9, 1, 6, 1, 8, 6, 1, 1, 6,
       0, 5, 0, 8, 0, 5, 6, 6, 6, 7, 3, 7, 7, 5, 6, 3, 7, 3, 4, 2, 2, 3,
       1, 4, 3, 0, 9, 2, 4, 4, 9, 7, 0, 5, 8, 6, 1, 8, 6, 0, 3, 1, 4, 7,
       9, 0, 3, 4, 1, 4, 5, 3, 9, 0, 3, 8, 9, 6, 2, 4, 9, 3, 4, 1, 9, 4,
       1, 0, 1, 8, 5, 4, 5, 4, 9, 4, 8, 4, 1, 4, 7, 7, 0, 4, 6, 1, 6, 1,
       6, 4, 0, 0, 4, 5, 9, 4, 7, 8, 8, 7, 3, 4, 3, 2, 8, 1, 2, 0, 4, 0,
       3, 5, 8, 3, 9, 4, 6, 0, 2, 7, 3, 0, 4, 5, 7, 1, 4, 6, 3, 4, 3, 4,
       7, 6, 5, 2, 7, 3, 6, 2, 5, 1, 4, 6, 8, 2, 6, 8, 0, 1, 8, 6, 1, 2,
       4, 5, 5, 8, 6, 6, 0, 7, 2, 1, 5, 7, 0, 9, 0, 2, 6, 9, 5, 7, 1, 0,
       9, 9, 3, 6, 1, 3, 4, 0, 6, 9, 3, 6, 6, 6, 5, 7, 8, 8, 8, 4, 7, 3,
       2, 2, 3, 2, 3, 7, 7, 7, 7, 0, 2, 3, 1, 0, 7, 5, 6, 9, 5, 2, 0, 9,
       1, 2, 7, 2, 3, 5, 4, 5, 7, 9, 7, 4, 0, 9, 5, 1, 1, 9, 3, 6, 4, 8,
       2, 7, 9, 6, 7, 0, 0, 4, 0, 3, 9, 1, 6, 9, 1, 7, 4, 9, 7, 9, 1, 8,
       7, 2, 4, 4, 6, 1, 6, 7, 4, 7, 7, 1, 3, 3, 2, 2, 0, 9, 5, 6, 3, 8,
       4, 5, 3, 1, 7, 9, 8, 9, 1, 0, 2, 6, 1, 5, 6, 9, 4, 6, 3, 3, 8, 6,
       1, 1, 0, 3, 3, 7, 5, 7, 4, 5, 4, 7, 9, 3, 9, 4, 9, 1, 2, 3, 2, 5,
       6, 3, 8, 7, 7, 6, 0, 1, 3, 5, 4, 8, 8, 5, 6, 1, 0, 1, 0, 3, 3, 9,
       2, 9, 5, 1, 7, 1, 8, 8, 2, 5, 1, 3, 0, 6, 8, 9, 3, 8, 3, 6, 4, 7,
       3, 0, 9, 2, 8, 5, 3, 3, 1, 1, 6, 1, 9, 1, 4, 4, 9, 5, 1, 6, 1, 7,
       1, 4, 8, 3, 0, 1, 9, 6, 5, 9, 3, 7, 8, 6, 7, 3, 9, 4, 8, 9, 8, 8,
       0, 7, 8, 5, 8, 1, 8, 4, 6, 4, 6, 8, 0, 4, 5, 5, 6, 0, 3, 2, 6, 4,
       5, 0, 2, 5, 4, 2, 4, 0, 9, 5, 9, 9, 9, 6, 6, 1, 7, 7, 5, 5, 7, 0,
       9, 6, 6, 5, 2, 2, 7, 6, 7, 4, 8, 8, 0, 5, 6, 0, 2, 0, 8, 6, 7, 3,
       9, 9, 5, 1, 2, 4, 1, 1, 5, 0, 5, 4, 3, 5, 7, 0, 5, 3, 9, 9, 9, 5,
       2, 1, 5, 2, 9, 3, 5, 1, 0, 0, 9, 2, 2, 9, 4, 6, 0, 8, 2, 7, 0, 6,
       1, 0, 8, 8, 3, 3, 1, 5, 8, 8, 3, 5, 3, 5, 2, 6, 0, 2, 6, 4, 8, 7,
       0, 3, 8, 3, 9, 7, 5, 7, 6, 0, 0, 5, 9, 7, 0, 0, 5, 6, 1, 4, 8, 6,
       5, 2, 9, 3, 1, 4, 4, 3, 1, 3, 3, 5, 0, 9, 4, 0, 8, 9, 2, 5, 6, 8,
       8, 8, 1, 3, 6, 3, 5, 7, 8, 2, 4, 2, 5, 2, 9, 7, 6, 8, 8, 6, 5, 1,
       2, 0, 2, 3, 1, 6, 8, 9, 1, 6, 1, 4, 2, 0, 4, 2, 6, 9, 8, 7, 9, 9,
       3, 0, 4, 8, 8, 8, 2, 1, 4, 8, 6, 1, 3, 9, 4, 7, 9, 0, 7, 3, 5, 7,
       9, 8, 0, 8, 5, 4, 6, 5, 4, 3, 1, 3, 4, 2, 4, 0, 2, 7, 2, 6, 8, 5,
       9, 0, 9, 6, 9, 7, 1, 6, 6, 8, 5, 4, 0, 4, 8, 8, 7, 5, 6, 9, 5, 5,
       5, 7, 6, 0, 0, 5, 3, 9, 3, 6, 4, 2, 2, 7, 1, 6, 5, 9, 5, 3, 6, 7,
       6, 6, 9, 5, 7, 0, 4, 4, 0, 4, 0, 0, 6, 2, 9, 9, 8, 7, 1, 9, 7, 2,
       7, 6, 0, 9, 9, 2, 9, 1, 5, 9, 5, 2, 3, 8, 7, 0, 4, 2, 6, 5, 1, 7,
       6, 5, 4, 4, 5, 7, 3, 1, 8, 8, 1, 1, 3, 7, 6, 0, 0, 0, 5, 8, 8, 9,
       6, 0, 7, 5, 6, 7, 0, 1, 1, 8, 1, 9, 7, 2, 1, 4, 0, 0, 1, 1, 8, 6,
       5, 4, 6, 7, 3, 0, 2, 7, 8, 8])

In [227]: d.min()
Out[227]: 0

In [228]: d.max()
Out[228]: 9

In [229]: f, ax = plt.subplots()

In [230]: edges = np.arange(0, 10+1)

In [231]: edges
Out[231]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

In [232]: ax.hist(d, bins=edges)
Out[232]:
(array([ 98., 100.,  84., 100., 103., 101., 108., 108.,  98., 100.]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 <a list of 10 Patch objects>)

In [233]: d = np.random.randint(0, 10, 100000)

In [234]: ax.hist(d, bins=edges)
Out[234]:
(array([10005.,  9942.,  9996.,  9974.,  9903., 10041.,  9883., 10127.,
        10009., 10120.]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 <a list of 10 Patch objects>)

In [235]: np.random.random
Out[235]: <function RandomState.random>

In [236]: np.random.normal?

In [237]: s = np.random.normal(loc=0, scale=1, size=1000)

In [238]: f, ax = plt.subplots()

In [239]: ax.hist(s, bins=30)
Out[239]:
(array([  1.,   0.,   0.,   1.,   0.,   3.,   4.,   9.,  10.,  26.,  27.,
         43.,  45.,  75.,  74.,  75.,  69.,  90.,  80., 101.,  74.,  50.,
         42.,  30.,  23.,  22.,   9.,  10.,   3.,   4.]),
 array([-3.74388457, -3.53063971, -3.31739485, -3.10414999, -2.89090512,
        -2.67766026, -2.4644154 , -2.25117054, -2.03792568, -1.82468082,
        -1.61143595, -1.39819109, -1.18494623, -0.97170137, -0.75845651,
        -0.54521164, -0.33196678, -0.11872192,  0.09452294,  0.3077678 ,
         0.52101266,  0.73425753,  0.94750239,  1.16074725,  1.37399211,
         1.58723697,  1.80048183,  2.0137267 ,  2.22697156,  2.44021642,
         2.65346128]),
 <a list of 30 Patch objects>)

In [240]: f, ax = plt.subplots()

In [241]: s = np.random.normal(loc=0, scale=1, size=1000)

In [242]: ax.hist(s, bins=30)
Out[242]:
(array([ 2.,  2.,  1.,  3.,  7., 18., 24., 31., 38., 47., 64., 74., 69.,
        86., 83., 80., 85., 67., 65., 49., 33., 25., 24.,  6.,  9.,  4.,
         1.,  0.,  1.,  2.]),
 array([-3.18931824, -2.96938957, -2.7494609 , -2.52953222, -2.30960355,
        -2.08967488, -1.86974621, -1.64981753, -1.42988886, -1.20996019,
        -0.99003151, -0.77010284, -0.55017417, -0.3302455 , -0.11031682,
         0.10961185,  0.32954052,  0.5494692 ,  0.76939787,  0.98932654,
         1.20925522,  1.42918389,  1.64911256,  1.86904123,  2.08896991,
         2.30889858,  2.52882725,  2.74875593,  2.9686846 ,  3.18861327,
         3.40854194]),
 <a list of 30 Patch objects>)

In [243]: s = np.random.normal(loc=0, scale=1, size=100000)

In [244]: ax.hist(s, bins=30)
Out[244]:
(array([1.0000e+00, 0.0000e+00, 6.0000e+00, 1.5000e+01, 4.1000e+01,
        1.1000e+02, 2.4600e+02, 5.4800e+02, 1.0680e+03, 1.8950e+03,
        3.0920e+03, 4.9070e+03, 7.0150e+03, 8.9470e+03, 1.0565e+04,
        1.1504e+04, 1.1545e+04, 1.0628e+04, 8.7930e+03, 7.0210e+03,
        4.9220e+03, 3.1570e+03, 1.9610e+03, 1.0720e+03, 5.6800e+02,
        2.1100e+02, 1.0700e+02, 3.6000e+01, 1.1000e+01, 8.0000e+00]),
 array([-4.69458783e+00, -4.40139808e+00, -4.10820834e+00, -3.81501859e+00,
        -3.52182884e+00, -3.22863909e+00, -2.93544934e+00, -2.64225960e+00,
        -2.34906985e+00, -2.05588010e+00, -1.76269035e+00, -1.46950061e+00,
        -1.17631086e+00, -8.83121110e-01, -5.89931362e-01, -2.96741614e-01,
        -3.55186614e-03,  2.89637882e-01,  5.82827629e-01,  8.76017377e-01,
         1.16920713e+00,  1.46239687e+00,  1.75558662e+00,  2.04877637e+00,
         2.34196612e+00,  2.63515586e+00,  2.92834561e+00,  3.22153536e+00,
         3.51472511e+00,  3.80791486e+00,  4.10110460e+00]),
 <a list of 30 Patch objects>)

In [245]: s
Out[245]:
array([-0.68388202,  0.63351264, -1.22777213, ..., -0.13562382,
        0.28214056, -2.10915246])

In [246]: s.mean()
Out[246]: -0.0025912874403657424

In [247]: s.std()
Out[247]: 0.9991985925133479

In [248]: s1 = np.random.normal(loc=0, scale=1, size=1000)

In [249]: s2 = np.random.normal(loc=5, scale=0.5, size=1000)

In [250]: bimodal = np.concatenate([s1, s2])

In [251]: bimodal.shape
Out[251]: (2000,)

In [252]: f, ax = plt.subplots()

In [253]: ax.hist(bimodal, bins=30)
Out[253]:
(array([  3.,   2.,   6.,  12.,  25.,  54.,  73.,  87., 124., 126., 136.,
        101.,  93.,  63.,  48.,  21.,  20.,   3.,   2.,   1.,   4.,  22.,
         60., 143., 234., 255., 150.,  98.,  28.,   6.]),
 array([-3.31301042e+00, -2.98231582e+00, -2.65162122e+00, -2.32092662e+00,
        -1.99023202e+00, -1.65953741e+00, -1.32884281e+00, -9.98148211e-01,
        -6.67453609e-01, -3.36759007e-01, -6.06440579e-03,  3.24630196e-01,
         6.55324798e-01,  9.86019399e-01,  1.31671400e+00,  1.64740860e+00,
         1.97810320e+00,  2.30879781e+00,  2.63949241e+00,  2.97018701e+00,
         3.30088161e+00,  3.63157621e+00,  3.96227081e+00,  4.29296542e+00,
         4.62366002e+00,  4.95435462e+00,  5.28504922e+00,  5.61574382e+00,
         5.94643842e+00,  6.27713303e+00,  6.60782763e+00]),
 <a list of 30 Patch objects>)

In [254]: bimodal.mean()
Out[254]: 2.486572021107242

In [255]: bimodal.std()
Out[255]: 2.639856462897883

In [256]: ax.hist?

In [257]: np.histogram?

In [258]: n, edges = np.histogram(bimodal, bins=30)

In [259]: n
Out[259]:
array([  3,   2,   6,  12,  25,  54,  73,  87, 124, 126, 136, 101,  93,
        63,  48,  21,  20,   3,   2,   1,   4,  22,  60, 143, 234, 255,
       150,  98,  28,   6])

In [260]:

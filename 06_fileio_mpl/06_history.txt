mspacek@Godel:~$ cd SciPyCourse2020
mspacek@Godel:~/SciPyCourse2020$ ls
 announcement.txt                           misc
 attendance                                 notes
 cheat_sheets                               projects
 Figure_7.png                               registration.ods
 Figure_8.png                               SciPyCourse2020.geany
 grades.ods                                 scipycourse2020.github.io
 intro_email.txt                            Spacek_Python_course_registration.xlsx
'Intro Python Spacek_BelegInfoExcel.xlsx'   VVZ_MScNeuro_2020_06_03.pdf
mspacek@Godel:~/SciPyCourse2020$ cd notes
mspacek@Godel:~/SciPyCourse2020/notes$ ls
00_intro            04_numpy         08_images      12_clustering  homework4
01_Python_basics    05_numpy_dtype   09_pandas      homework1      old_notes
02_Python_basics_2  06_fileio_mpl    10_stats       homework2      README.md
03_collections      07_mpl_matrices  11_organizing  homework3
mspacek@Godel:~/SciPyCourse2020/notes$ cd 06_fileio_mpl/
mspacek@Godel:~/SciPyCourse2020/notes/06_fileio_mpl$ ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test2D.csv  V.npy
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    t.npy       Vt.mat
mspacek@Godel:~/SciPyCourse2020/notes/06_fileio_mpl$ ipython
Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test2D.csv  V.npy
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    t.npy       Vt.mat

In [2]: import numpy as np

In [3]: np.loadtxt?

In [4]: a = np.loadtxt('test1D.csv')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-4-f991159b2009> in <module>
----> 1 a = np.loadtxt('test1D.csv')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1144         # converting the data
   1145         X = None
-> 1146         for x in read_data(_loadtxt_chunksize):
   1147             if X is None:
   1148                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1072
   1073             # Convert each value according to its column and store
-> 1074             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1075
   1076             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1072
   1073             # Convert each value according to its column and store
-> 1074             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1075
   1076             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in floatconv(x)
    779         if '0x' in x:
    780             return float.fromhex(x)
--> 781         return float(x)
    782
    783     typ = dtype.type

ValueError: could not convert string to float: '0,1,2,3,4,5,6,7,8,9'
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(781)floatconv()
    779         if '0x' in x:
    780             return float.fromhex(x)
--> 781         return float(x)
    782
    783     typ = dtype.type

ipdb> c

In [5]: np.loadtxt?

In [6]: a = np.loadtxt('test1D.csv', delimiter=',')

In [7]: a
Out[7]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [8]: a.dtype
Out[8]: dtype('float64')

In [9]: a = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [10]: a
Out[10]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [11]: a.dtype
Out[11]: dtype('int64')

In [12]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test2D.csv  V.npy
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    t.npy       Vt.mat

In [13]: test2D = np.loadtxt('test2D.csv', delimiter=',', dtype=int)

In [14]: test2D
Out[14]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [15]: test2D.shape
Out[15]: (3, 3)

In [16]: np.savetxt?

In [17]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [18]: test1D
Out[18]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [19]: np.savetxt('test1D_new.txt', test1D, delimiter=',')

In [20]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test1D_new.txt  t.npy  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    test2D.csv      V.npy

In [21]: np.savetxt('test1D_new.txt', test1D, delimiter=',', fmt='%g')

In [22]: np.savetxt?

In [23]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test1D_new.txt  t.npy  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    test2D.csv      V.npy

In [24]: np.load?

In [25]: V = np.load('V.npy')

In [26]: V
Out[26]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [27]: V.dtype
Out[27]: dtype('float64')

In [28]: len(V)
Out[28]: 100

In [29]: t = np.load('t.npy')

In [30]: t
Out[30]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [31]: len(t)
Out[31]: 100

In [32]: np.save?

In [33]: t.dtype
Out[33]: dtype('int64')

In [34]: np.save('V2.npy', 2*V)

In [35]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test1D_new.txt  t.npy   V.npy
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    test2D.csv      V2.npy  Vt.mat

In [36]: V*2
Out[36]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [37]: np.load('V2.npy')
Out[37]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [38]: V
Out[38]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [39]: t
Out[39]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [40]: np.savez?

In [41]: np.savez('Vt.npz', V=V, t=t)

In [42]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test1D_new.txt  t.npy   V.npy   Vt.npz
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    test2D.csv      V2.npy  Vt.mat

In [43]: d = np.load('Vt.npz')

In [44]: d
Out[44]: <numpy.lib.npyio.NpzFile at 0x7f596ea24908>

In [45]: type(d)
Out[45]: numpy.lib.npyio.NpzFile

In [46]: list(d)
Out[46]: ['V', 't']

In [47]: d['V']
Out[47]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [48]: d['t']
Out[48]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [49]: np.savez_compressed('Vt.npz', V=V, t=t)

In [50]: import scipy.io

In [51]: scipy.io.loadmat?

In [52]: d = scipy.io.loadmat('Vt.mat', squeeze_me=True)

In [53]: type(d)
Out[53]: dict

In [54]: d
Out[54]:
{'__header__': b'MATLAB 5.0 MAT-file Platform: posix, Created on: Tue May 22 18:30:35 2018',
 '__version__': '1.0',
 '__globals__': [],
 't': array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
         0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
         1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
         1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
         2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
         3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
         3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
         4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
         5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
         5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
         6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
         6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
         7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
         8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
         8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
         9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
        10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
        10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
        11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
        12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061]),
 'V': array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])}

In [55]: list(d)
Out[55]: ['__header__', '__version__', '__globals__', 't', 'V']

In [56]: d['V']
Out[56]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [57]: d['t']
Out[57]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [58]: d = scipy.io.loadmat('Vt.mat', squeeze_me=True)

In [59]: d2 = {}

In [60]: V, t = d['V'], d['t']

In [61]: V
Out[61]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [62]: t
Out[62]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [63]: d2 = {}

In [64]: d2['V'] = 2*V

In [65]: d2['t'] = t

In [66]: d2
Out[66]:
{'V': array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
        0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
        1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
        0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
        1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
        1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
        1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
        1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
        0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
        0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
        1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
        1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
        1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
        1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
        1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
        0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
        1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
        0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
        0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
        1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761]),
 't': array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
         0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
         1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
         1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
         2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
         3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
         3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
         4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
         5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
         5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
         6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
         6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
         7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
         8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
         8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
         9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
        10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
        10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
        11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
        12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])}

In [67]: scipy.io.savemat('Vt2.mat', d2)

In [68]: ls
06_fileio_mpl.md   anatomy.pdf                 matplotlibrc  test1D_new.txt  t.npy   V.npy    Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    test2D.csv      V2.npy  Vt2.mat  Vt.npz

In [69]: np.fromfile?

In [70]: a
Out[70]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [71]: a.tofile?

In [72]: a = np.arange(10)

In [73]: a
Out[73]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [74]: np.savetxt('exercise.txt', a)

In [75]: ls
06_fileio_mpl.md   ASCII-Conversion-Chart.pdf  test1D.csv      t.npy   Vt2.mat
06_fileio_mpl.pdf  exercise.txt                test1D_new.txt  V2.npy  Vt.mat
anatomy.pdf        matplotlibrc                test2D.csv      V.npy   Vt.npz

In [76]: np.savetxt('exercise.txt', a, fmt='%g')

In [77]: b = np.loadtxt('exercise.txt')

In [78]: b
Out[78]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [79]: b = np.loadtxt('exercise.txt', dtype=int)

In [80]: b
Out[80]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [81]: np.save('exercise.npy', a)

In [82]: ls
06_fileio_mpl.md   ASCII-Conversion-Chart.pdf  matplotlibrc    test2D.csv  V.npy    Vt.npz
06_fileio_mpl.pdf  exercise.npy                test1D.csv      t.npy       Vt2.mat
anatomy.pdf        exercise.txt                test1D_new.txt  V2.npy      Vt.mat

In [83]: c = np.load('exercise.npy')

In [84]: c
Out[84]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [85]: a
Out[85]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [86]: c.dtype
Out[86]: dtype('int64')

In [87]: a.dtype
Out[87]: dtype('int64')

In [88]: np.savetxt('exercise.txt', a, fmt='%g', newline=',')

In [89]: import matplotlib.pyplot as plt

In [90]: plt.figure()
Out[90]: <Figure size 700x700 with 0 Axes>

In [91]: a = 1

In [92]: plt.figure()
Out[92]: <Figure size 700x700 with 0 Axes>

In [93]: np.arange?

In [94]: t = np.linspace(0, 4*np.pi, 100)

In [95]: t
Out[95]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [96]: 4*np.pi
Out[96]: 12.566370614359172

In [97]: np.arange(0, 10, 2)
Out[97]: array([0, 2, 4, 6, 8])

In [98]: t
Out[98]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [99]: s = np.sin(t)

In [100]: s
Out[100]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [101]: plt.plot?

In [102]: plt.plot(t, s)
Out[102]: [<matplotlib.lines.Line2D at 0x7f5921b4ad30>]

In [103]: np.linspace?

In [104]: np.logspace?

In [105]: plt
Out[105]: <module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>

In [106]: plt.xlim?
Signature: plt.xlim(*args, **kwargs)
Docstring:
Get or set the x limits of the current axes.

Call signatures::

    left, right = xlim()  # return the current xlim
    xlim((left, right))   # set the xlim to left, right
    xlim(left, right)     # set the xlim to left, right

If you do not specify args, you can pass *left* or *right* as kwargs,
i.e.::

    xlim(right=3)  # adjust the right leaving left unchanged
    xlim(left=1)  # adjust the left leaving right unchanged

Setting limits turns autoscaling off for the x-axis.

Returns
-------
left, right
    A tuple of the new x-axis limits.

Notes
-----
Calling this function with no arguments (e.g. ``xlim()``) is the pyplot
equivalent of calling `~.Axes.get_xlim` on the current axes.
Calling this function with arguments is the pyplot equivalent of calling
`~.Axes.set_xlim` on the current axes. All arguments are passed though.
File:      /usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py
Type:      function

In [107]: plt.xlim(-1, 15)
Out[107]: (-1, 15)

In [108]: plt.xlim(-15, 15)
Out[108]: (-15, 15)

In [109]: plt.ylim(-1, 1)
Out[109]: (-1, 1)

In [110]: plt.xlabel('New label for the x axis')
Out[110]: Text(0.5, 37.49999999999999, 'New label for the x axis')

In [111]: plt.title('My new title')
Out[111]: Text(0.5, 1, 'My new title')

In [112]: plt.savefig?

In [113]: plt.savefig('new_fig1.png')

In [114]: ls
06_fileio_mpl.md            exercise.txt  test1D_new.txt  Vt2.mat
06_fileio_mpl.pdf           Figure_1.png  test2D.csv      Vt.mat
anatomy.pdf                 matplotlibrc  t.npy           Vt.npz
ASCII-Conversion-Chart.pdf  new_fig1.png  V2.npy
exercise.npy                test1D.csv    V.npy

In [115]: plt.close()

In [116]: plt.show()

In [117]: plt.figure()
Out[117]: <Figure size 700x700 with 0 Axes>

In [118]: plt.figure()
Out[118]: <Figure size 700x700 with 0 Axes>

In [119]: plt.close()

In [120]: plt.close()

In [121]: plt.figure()
Out[121]: <Figure size 700x700 with 0 Axes>

In [122]: plt.figure()
Out[122]: <Figure size 700x700 with 0 Axes>

In [123]: plt.close('all')

In [124]: plt.figure()
Out[124]: <Figure size 700x700 with 0 Axes>

In [125]: plt.plot?

In [126]: plt.plot(t, s, 'gx')
Out[126]: [<matplotlib.lines.Line2D at 0x7f5943018908>]

In [127]: plt.plot(t, s)
Out[127]: [<matplotlib.lines.Line2D at 0x7f5943049d68>]

In [128]: plt.plot(t, s+0.1)
Out[128]: [<matplotlib.lines.Line2D at 0x7f5942fed080>]

In [129]: plt.plot(t, s+0.2)
Out[129]: [<matplotlib.lines.Line2D at 0x7f5942feeb70>]

In [130]: plt.close()

In [131]: plt.plot(t, s, 'gx')
Out[131]: [<matplotlib.lines.Line2D at 0x7f5942d9cdd8>]

In [132]: plt.close()

In [133]: plt.plot(t, s, 'gx-')
Out[133]: [<matplotlib.lines.Line2D at 0x7f5942b562b0>]

In [134]: plt.close()

In [135]: plt.plot(t, s, 'gx--')
Out[135]: [<matplotlib.lines.Line2D at 0x7f5942b2c470>]

In [136]: plt.plot?

In [137]: plt.close()

In [138]: plt.plot(t, s, 'k.-')
Out[138]: [<matplotlib.lines.Line2D at 0x7f5942892c18>]

In [139]: plt.close()

In [140]: plt.plot(t, c, color='red', marker='.', linestyle='solid')
---------------------------------------------------------------------
ValueError                          Traceback (most recent call last)
<ipython-input-140-02bc56d299a2> in <module>
----> 1 plt.plot(t, c, color='red', marker='.', linestyle='solid')

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in plot(scalex, scaley, data, *args, **kwargs)
   2793     return gca().plot(
   2794         *args, scalex=scalex, scaley=scaley, **({"data": data} if data
-> 2795         is not None else {}), **kwargs)
   2796
   2797

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, data, *args, **kwargs)
   1664         """
   1665         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D._alias_map)
-> 1666         lines = [*self._get_lines(*args, data=data, **kwargs)]
   1667         for line in lines:
   1668             self.add_line(line)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in __call__(self, *args, **kwargs)
    223                 this += args[0],
    224                 args = args[1:]
--> 225             yield from self._plot_args(this, kwargs)
    226
    227     def get_next_color(self):

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs)
    389             x, y = index_of(tup[-1])
    390
--> 391         x, y = self._xy_from_xy(x, y)
    392
    393         if self.command == 'plot':

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _xy_from_xy(self, x, y)
    268         if x.shape[0] != y.shape[0]:
    269             raise ValueError("x and y must have same first dimension, but "
--> 270                              "have shapes {} and {}".format(x.shape, y.shape))
    271         if x.ndim > 2 or y.ndim > 2:
    272             raise ValueError("x and y can be no greater than 2-D, but have "

ValueError: x and y must have same first dimension, but have shapes (100,) and (10,)
> /usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py(270)_xy_from_xy()
    268         if x.shape[0] != y.shape[0]:
    269             raise ValueError("x and y must have same first dimension, but "
--> 270                              "have shapes {} and {}".format(x.shape, y.shape))
    271         if x.ndim > 2 or y.ndim > 2:
    272             raise ValueError("x and y can be no greater than 2-D, but have "

ipdb> c

In [141]: plt.plot(t, s, color='red', marker='.', linestyle='solid')
Out[141]: [<matplotlib.lines.Line2D at 0x7f5921aba400>]

In [142]: plt.plot(t, s, 'r.-')
Out[142]: [<matplotlib.lines.Line2D at 0x7f5921796f60>]

In [143]: plt.plot(t, s, 'r.-', label='test')
Out[143]: [<matplotlib.lines.Line2D at 0x7f592277e358>]

In [144]: plt.legend()
Out[144]: <matplotlib.legend.Legend at 0x7f592178a470>

In [145]: plt.plot(t, s+0.2, 'b.-', label='test2')
Out[145]: [<matplotlib.lines.Line2D at 0x7f5951830080>]

In [146]: plt.legend()
Out[146]: <matplotlib.legend.Legend at 0x7f5922258358>

In [147]: a = np.random.random(1000) - 0.5

In [148]: a
Out[148]:
array([ 3.43689193e-01,  4.54673237e-01, -1.24279725e-01,  2.66642600e-01,
        2.64628894e-01, -4.88920366e-01,  4.00690570e-01,  2.34025040e-01,
       -7.22491757e-02,  2.94437439e-02,  4.84604497e-01,  3.04702476e-01,
       -2.08181645e-01, -1.60723199e-01,  4.94732933e-01,  1.73579488e-01,
       -1.50191949e-01, -4.81196972e-01, -3.02034384e-02,  2.18339746e-01,
       -3.07971167e-01, -4.71767626e-01, -4.09024517e-04, -1.59900664e-01,
       -2.62756896e-01,  3.37223061e-01,  2.26218659e-01,  2.69728760e-01,
        3.91539116e-01,  1.03180642e-01,  4.39732105e-01, -3.69711124e-02,
       -1.20597029e-01,  4.59428927e-02, -3.77116844e-02,  2.63835057e-01,
        1.92674276e-01,  1.90868304e-01,  3.07351326e-01,  2.36873257e-01,
       -3.48284802e-01,  3.24993440e-01,  2.54895289e-01, -3.11944202e-01,
       -2.35918421e-01,  3.29202098e-01, -4.74069987e-01,  4.57362132e-01,
       -9.33390906e-02,  3.17295175e-01, -2.99986290e-01, -3.16157439e-01,
       -3.78650559e-01,  9.97956279e-02,  2.00975693e-01,  2.53777730e-01,
       -1.20151032e-01, -3.14756563e-01, -1.04016666e-01,  2.00966974e-01,
        4.58027259e-01, -1.49250932e-01,  3.43670557e-01,  1.95062964e-02,
       -2.39279621e-01,  3.65858648e-01,  4.88939239e-01, -4.60129268e-01,
        4.22881221e-01, -3.58236579e-01, -3.02479580e-02, -9.52558428e-02,
        4.97704103e-01,  8.22852336e-02,  4.16047642e-01, -4.68280459e-01,
        3.88422531e-01, -3.08634586e-01,  2.47593577e-01,  5.33912603e-02,
        4.61586258e-01, -4.02281431e-01,  2.00194975e-01, -3.66068886e-01,
       -4.81167298e-01,  2.59785967e-01,  7.39671193e-02,  4.73684971e-01,
       -4.63209770e-01,  4.78411739e-01,  4.73797880e-01, -4.06932453e-01,
        1.42150513e-01, -3.03366256e-01,  2.43534941e-01,  3.11877712e-01,
        8.07734601e-02, -3.90085624e-01,  4.79700565e-01,  3.96081950e-01,
        3.23470003e-01, -1.48435311e-01, -3.13665884e-01,  2.86617822e-01,
       -4.26604158e-01,  1.33214172e-01,  1.41504333e-01,  1.73597954e-02,
        2.69593017e-01, -2.31757792e-01, -4.78458673e-02, -2.60377533e-02,
        2.00461547e-01, -1.19088700e-01,  1.75564264e-01,  3.07519507e-01,
       -3.99273749e-01, -3.56645006e-01, -2.65731062e-02,  1.01232695e-01,
        2.29094430e-01,  1.82128047e-01,  4.83199154e-01, -3.63556530e-02,
        3.39457267e-01, -4.30826565e-01, -5.00347429e-02, -2.32512807e-01,
       -2.40754902e-01, -2.94547059e-02,  3.78537567e-01, -2.09867248e-01,
        1.28615013e-01, -4.77442473e-01,  3.32117463e-01,  4.13307616e-01,
        4.04044048e-02, -1.59290502e-01, -2.43857173e-01,  4.67192557e-01,
        3.99133011e-02,  1.39465687e-01,  1.53810867e-01, -2.17886579e-01,
        1.91024416e-01, -1.96329023e-02,  2.79194933e-01, -3.49927086e-01,
       -4.82541541e-01, -4.60277501e-02, -4.24563280e-01,  3.82470981e-01,
       -4.94802254e-01,  1.78316112e-01, -7.26732053e-02,  6.16000441e-02,
       -4.16386497e-01,  1.95594011e-01, -3.22509949e-01, -1.13593186e-01,
       -3.67192349e-01,  3.30954113e-01, -1.29318887e-01, -4.90568747e-01,
        2.35647961e-01,  3.02493956e-01,  3.72815302e-01, -2.45790465e-01,
        4.81404910e-01, -3.42976796e-01,  4.39150549e-01, -4.52386395e-01,
        2.31451596e-01,  1.16554543e-01, -2.57513290e-01,  3.67676312e-01,
        1.44588560e-01, -3.83870145e-01,  4.27671195e-01, -1.17966173e-01,
       -4.14648834e-01,  4.22480656e-01,  4.57403501e-01, -6.16480983e-02,
        2.63737467e-01, -1.47751298e-01,  6.27458806e-02,  4.79093668e-01,
       -8.70637560e-02,  1.90572808e-01, -3.82526735e-01,  5.13506656e-03,
       -1.64689973e-01,  1.14877497e-01, -5.52977988e-02,  1.88865616e-01,
       -9.77210700e-02, -4.12380881e-01, -2.20560829e-01, -3.22566922e-01,
       -4.61519444e-01, -4.97348368e-01, -7.63271929e-02, -4.05161073e-01,
        3.67614411e-01,  2.78400567e-01, -1.28587902e-02,  1.53141494e-01,
        2.71206120e-01, -4.31205772e-02,  2.54941450e-01,  3.13822590e-01,
        4.91874401e-01, -2.51394808e-01, -2.45203276e-02,  4.06743198e-01,
        4.38897550e-01,  3.62298069e-01, -1.01562983e-02, -3.99049770e-01,
       -3.93612978e-02, -1.16843930e-01, -4.17184775e-01,  2.28143388e-01,
       -3.64343144e-01,  1.78223446e-01,  7.97498746e-02, -1.66320199e-01,
       -9.65002890e-02,  1.47304190e-01, -3.47533036e-01,  3.21294456e-01,
       -6.99796210e-02, -2.21478378e-01,  3.50289493e-01, -2.03788006e-01,
        3.78456682e-01, -1.74748374e-01,  1.01780131e-01,  2.46802359e-02,
        3.25696397e-01, -2.23515217e-01, -3.17598971e-01, -1.73760551e-01,
       -1.84471527e-01,  3.00869939e-01,  4.31327529e-01, -1.90398587e-01,
       -2.22567260e-01, -3.35997592e-01,  4.92109704e-01,  2.94446376e-01,
       -4.05829359e-01,  2.25119135e-03,  1.90920714e-01,  2.37069774e-01,
        5.10203149e-02,  3.44178963e-01,  3.26827976e-01, -1.41849378e-01,
       -2.94661490e-01,  2.80209047e-01,  4.32638736e-01,  1.76836105e-01,
        3.87757383e-01,  1.11380186e-01,  4.66509307e-01, -1.98702616e-01,
       -3.13315196e-01, -1.93377789e-01, -4.01591807e-01,  4.45923715e-01,
       -3.74874141e-01, -2.71582979e-01, -9.58064761e-02, -1.95981984e-01,
        2.08621131e-01, -1.94866062e-01, -3.83524736e-01,  4.18769527e-01,
       -3.69517468e-01, -2.77630175e-01, -1.41492682e-01,  1.03374328e-01,
       -7.73918822e-02, -2.17532880e-01, -1.59188299e-01, -1.41893105e-01,
        2.90974410e-01, -4.82198706e-01,  1.84057114e-01,  1.96835705e-02,
        2.40213524e-01,  2.04566240e-01, -1.43970812e-01,  1.35438437e-01,
        3.70573284e-02,  4.01188058e-01,  4.48706368e-01, -2.40704822e-01,
       -1.61964289e-01, -1.37025248e-01,  9.41133343e-03,  2.61025655e-01,
       -3.86284936e-01, -2.79167309e-01,  2.78130061e-01, -9.70365973e-04,
        3.61180656e-01, -1.57458701e-01, -2.96160259e-01,  4.53585065e-01,
        1.64570450e-01,  4.92732757e-01, -4.30463012e-02,  4.23628278e-01,
        5.32036612e-02, -4.24075064e-01, -1.84512319e-01, -4.86024917e-01,
       -1.15325100e-01,  1.32481168e-02,  2.25325852e-01,  4.16331181e-01,
       -3.41047033e-02,  3.79296699e-01, -6.20299991e-02,  4.78463577e-01,
       -1.69803638e-01,  6.70836463e-02, -9.40912382e-03, -3.67838956e-01,
        1.20851667e-01, -3.00492872e-01, -1.61288395e-01,  3.54376473e-01,
       -4.42389448e-01,  3.24221288e-01,  6.07748421e-02,  1.76164776e-02,
        4.49226515e-01, -2.04195272e-01,  2.85643258e-01,  4.86120787e-01,
       -4.66357621e-01, -5.34183844e-02,  2.51757424e-01,  4.46375304e-02,
        1.51937430e-01, -3.24805750e-01,  1.15934248e-01,  2.36250925e-01,
        3.57225595e-01,  4.92517638e-01, -4.09172054e-01, -1.44610703e-01,
       -3.63390055e-01, -1.28960592e-01,  1.90115548e-01, -4.37652133e-01,
       -1.54586224e-01,  5.33303852e-02,  3.88147815e-01,  4.50550114e-01,
       -4.47708791e-02,  1.97025386e-01,  4.06603983e-02,  2.02508894e-01,
       -4.47106167e-01,  4.13078091e-02,  4.36506214e-01, -3.92129122e-02,
       -5.51775638e-03, -2.74374490e-03, -3.20187695e-01, -4.59468399e-01,
        2.15800918e-01, -1.73007763e-01,  9.91132024e-02, -4.89370977e-01,
        4.22127771e-01,  7.93723788e-02, -1.67224255e-01,  3.44202570e-01,
       -2.33446153e-01,  1.21947557e-01, -1.24025702e-01,  6.69948053e-02,
       -2.50937218e-01, -3.21277322e-01, -3.08831185e-01,  2.30219404e-01,
       -3.56301504e-01,  2.94709930e-01, -7.45343495e-03,  1.53853119e-03,
       -1.75384146e-01, -1.16364254e-01, -1.63084242e-01,  2.61566941e-01,
       -4.39960351e-01, -6.46309528e-02, -1.58556856e-01,  1.00154831e-01,
       -8.20726996e-02, -1.23347813e-01,  4.23729235e-01, -4.51875463e-01,
        2.77389267e-02,  3.05677175e-01,  1.27198323e-01, -2.02728877e-01,
        1.06475494e-01, -2.35673390e-01,  1.95008165e-01,  1.19094745e-01,
        2.64480282e-01, -4.36347632e-01, -1.65506234e-02,  4.06135156e-01,
        3.08921300e-01, -4.69561659e-01,  4.05808632e-01, -2.00215992e-01,
        3.91989999e-01,  3.33976977e-01, -3.72294950e-02, -9.38805313e-03,
        5.27932379e-02, -2.61089060e-01,  1.53208304e-02, -3.31334918e-01,
        3.09450824e-01, -4.27645562e-01,  4.80550377e-01, -4.62497365e-01,
        2.41925682e-01,  4.68432464e-01,  3.82012196e-01,  1.75172757e-01,
       -3.19046735e-01,  3.65262957e-01,  3.11448420e-01,  4.22368749e-01,
       -1.40740102e-01,  4.80025011e-01,  6.95858098e-02, -4.36971118e-01,
       -2.01451321e-01, -1.11419649e-01, -2.95777537e-01, -1.48038050e-01,
       -4.88528777e-01,  6.07763720e-02, -1.26061426e-01,  4.93694194e-01,
        1.23433020e-03,  9.44136051e-02, -3.17729717e-01, -3.02445563e-01,
        3.51252499e-01, -3.70224599e-01, -4.49855562e-01,  1.75983755e-01,
        2.97377528e-01, -4.88832200e-01, -9.62491130e-02,  4.51072875e-01,
       -1.54381459e-01, -3.22752446e-01, -3.16558195e-01,  2.67615528e-01,
       -9.09547751e-02, -4.81893053e-02, -4.47810522e-01,  2.53580960e-01,
        2.35269599e-02,  4.73753435e-01,  3.23050784e-01,  2.81180361e-01,
        2.54462960e-01,  5.25890229e-02, -4.89046695e-01,  2.26052539e-01,
        2.68590290e-02, -4.27976224e-01, -5.89636867e-02, -4.11526805e-01,
        1.45742222e-01, -3.21679541e-01, -3.34541538e-01, -4.84702327e-01,
       -2.27882281e-01, -7.33555688e-02,  4.35394683e-01,  4.93920816e-01,
        2.85400791e-02,  4.52561212e-01, -4.71653184e-02,  2.08086541e-01,
        9.32490721e-02,  1.74925233e-01,  3.93238459e-02, -4.89597966e-01,
       -4.39585091e-01, -4.45736288e-01,  5.91166470e-02,  2.26413603e-01,
        4.17423608e-01, -4.48715566e-01, -4.56992375e-01,  2.82966711e-01,
       -2.59990565e-01, -2.17130690e-01, -2.75186939e-01, -2.01138825e-01,
       -4.58879387e-01,  4.84156612e-01, -4.97266539e-01, -2.60116369e-01,
       -4.71008974e-01, -2.93595270e-01, -4.81193961e-01, -1.39417961e-01,
       -9.54161320e-02, -4.01208719e-01, -9.10212722e-02,  2.70641684e-01,
       -5.81978914e-02, -1.32358118e-02,  7.21503093e-02, -3.66794351e-01,
       -6.32704478e-02, -4.50075469e-01,  2.13715281e-01,  2.59787826e-01,
       -3.88151390e-01, -1.41961375e-01,  7.67617151e-02,  2.33999209e-01,
       -7.59821143e-02, -4.92553158e-01,  4.90615135e-01, -3.46445148e-01,
       -3.81001309e-01, -1.27790024e-01,  3.04431022e-01,  1.38136302e-01,
       -3.50738665e-01, -3.33563843e-01,  1.82777404e-01, -4.15109038e-01,
        4.61200839e-01, -2.40374688e-02, -8.72796012e-02, -4.08856707e-01,
       -4.12332479e-01,  4.41972151e-01, -3.58893070e-01,  2.40090666e-01,
       -3.63677482e-01,  1.41466359e-01, -1.88202544e-01,  3.58614444e-01,
       -4.47985850e-01, -2.42546657e-01, -3.42466335e-01, -4.55089870e-01,
       -2.18881702e-01,  1.00834836e-01, -2.15998929e-01,  1.95618914e-01,
       -4.50648053e-01, -3.81304751e-01, -1.99753247e-01,  1.93998763e-01,
       -4.41095695e-01, -2.19068752e-01, -2.55511359e-01, -1.48076714e-01,
       -1.13060620e-01, -2.70391522e-01, -1.67811025e-01,  1.54791175e-02,
       -4.14691475e-01, -4.20231449e-01,  1.69077537e-01,  4.67731102e-02,
       -1.83222519e-01,  7.83234390e-02, -2.41929895e-01, -9.73134003e-02,
       -1.92491348e-01,  4.97390263e-01, -3.39178137e-01, -1.70642792e-01,
       -3.18238984e-01,  4.48920619e-01,  1.90918715e-01,  1.47839567e-01,
        1.80015745e-01, -4.95078405e-01, -3.61752128e-02, -1.02282479e-02,
        1.61440959e-01,  8.04770135e-02,  3.91667827e-01, -1.95147485e-01,
        2.28589673e-01,  1.67007365e-01, -1.66340498e-01, -3.60260927e-01,
       -2.44027929e-01,  5.88503850e-02,  4.32840749e-03, -4.45732088e-01,
        4.70557422e-01,  2.21004733e-01, -7.14989246e-02, -1.40316831e-01,
        1.57153046e-01, -4.89495556e-01,  1.64882669e-01, -1.40429442e-01,
       -9.23773313e-02,  3.05251201e-01,  1.76782837e-01,  2.95167727e-01,
        8.61119667e-02, -4.57329752e-01,  4.58132148e-01, -1.97666031e-01,
        2.60322594e-01, -3.63893460e-01, -2.60757493e-02,  2.56618201e-02,
       -7.35153759e-02, -2.88077087e-01, -2.57595279e-02, -2.18036153e-01,
        1.63944354e-01,  3.27975548e-01, -9.59426637e-02,  3.31117220e-01,
        3.83483255e-01, -3.89784024e-01, -3.88558167e-01, -2.71435936e-01,
       -4.99464868e-01, -2.70440798e-01, -3.57222269e-01,  3.93746842e-01,
        4.56452761e-01, -3.11455954e-01,  4.18457993e-01,  3.48948672e-01,
        3.65789107e-01,  2.94676518e-01,  3.14814785e-01, -1.84757067e-01,
        2.78744535e-01,  1.62208444e-01, -3.34832571e-01,  1.68779445e-01,
       -2.15383518e-01,  3.90344713e-01, -7.42041848e-02,  3.26193769e-01,
        3.14289838e-02, -4.11046155e-01, -2.37253849e-01, -4.21580460e-01,
        1.92800997e-01,  1.54913542e-01,  2.52201936e-01, -3.86157305e-01,
       -2.64410904e-01, -4.27326308e-01, -1.15671212e-01, -3.62832737e-02,
       -2.69280159e-01, -3.97855640e-01, -2.50156902e-01, -3.79535041e-01,
       -3.15858670e-01,  2.22848508e-01,  4.12666601e-01, -4.75147581e-01,
       -1.04494285e-01, -2.01609887e-01, -3.02355746e-01, -4.71600572e-01,
       -1.31034031e-01,  4.40061900e-01,  4.97964679e-01, -4.65209785e-01,
        2.28565535e-01,  3.49695505e-01, -9.18478692e-02, -9.25891389e-02,
       -4.68096261e-01,  2.50269682e-01, -2.91281429e-01, -4.65201891e-01,
       -4.00282391e-01,  3.94276863e-01, -1.72914544e-02,  4.19331598e-02,
        4.14507785e-01, -3.60294872e-01, -2.51821479e-01,  2.93455344e-01,
        3.78136905e-01, -3.86700240e-01, -4.59523410e-01,  2.59577097e-01,
       -3.81426250e-01,  4.46267195e-01, -5.74971255e-02,  3.75445147e-02,
        3.06109353e-01,  7.12767349e-02,  3.32328391e-01,  4.51851644e-01,
        4.77593757e-01, -1.90144568e-02, -2.17412271e-01,  1.21642433e-01,
       -1.55779739e-01,  3.13759040e-02, -1.53060582e-01,  3.18011198e-01,
        4.87013064e-01, -3.80452424e-01, -1.89709737e-01, -4.26838230e-01,
        4.58675513e-01,  2.60263295e-01,  4.16926738e-01, -1.11110664e-01,
       -5.66179314e-02,  6.56990670e-03, -3.68309600e-01,  2.27991642e-01,
       -4.47644396e-01, -3.48574838e-01, -1.04776621e-01,  1.43184086e-01,
       -2.71286160e-01, -8.49450067e-03,  4.12223697e-01,  4.41568749e-02,
        9.69575467e-02,  1.80722407e-01,  2.96806940e-01,  2.00361600e-01,
       -3.16089205e-01,  3.60920924e-01, -4.93557062e-01,  5.53334508e-02,
       -3.54641974e-01,  8.59378645e-03,  4.78515636e-01, -2.32144161e-01,
        4.14861324e-01,  4.01898884e-02, -2.23281632e-01,  2.07709698e-01,
        3.92928646e-01,  3.89769642e-01, -2.21251185e-01, -1.27449218e-01,
        2.68264768e-01,  4.03783458e-01, -7.42538990e-02, -3.92912534e-01,
        1.12898695e-01, -3.19903971e-01,  2.77211517e-01,  2.40313610e-01,
       -3.76629602e-02, -2.80015095e-01, -3.89303534e-01,  4.04536947e-01,
       -3.35141286e-01, -1.74897132e-01,  4.02462676e-01,  1.02229450e-01,
       -2.11406511e-01, -4.10520824e-01, -3.87471085e-01,  4.91842848e-01,
       -2.76136801e-01,  1.25272660e-01,  1.43243551e-02, -2.73612452e-01,
        4.09450260e-01, -4.37817391e-01,  6.02761020e-02, -1.42144396e-02,
       -2.01629702e-01,  3.64917626e-01, -4.93893443e-01,  2.78975700e-02,
        5.28496552e-02, -1.47727064e-01,  3.45328704e-01,  2.03141325e-01,
        4.91738302e-01, -4.74951832e-01,  4.65424963e-01,  2.04698941e-01,
        2.89651835e-01,  4.02219195e-01, -4.21213361e-01, -1.99017043e-01,
       -3.26223863e-01, -4.13883300e-01, -4.33961161e-01, -5.34088506e-02,
       -1.33436404e-01,  1.84233640e-02, -4.45960003e-01, -4.64501564e-02,
        1.50025013e-01,  3.96292370e-01,  2.27714685e-01, -4.73004083e-02,
        2.42621234e-01,  2.70558195e-01, -3.75028847e-02,  2.83482420e-01,
       -5.74905617e-02, -4.57595784e-01,  2.07832985e-01,  1.49491969e-01,
       -2.15944109e-01, -2.84843653e-01,  2.24640621e-01, -2.88649164e-01,
       -4.76382986e-01,  2.15550816e-02,  1.16883035e-01,  2.40238091e-01,
       -1.23079733e-01, -3.59424740e-02, -4.65911891e-02, -1.05967406e-01,
       -4.00102373e-01,  3.77156471e-01,  1.70164482e-01, -4.67540660e-01,
       -4.55670326e-01, -8.94494415e-02, -2.72190491e-01, -2.92715046e-01,
        2.22554568e-02, -1.34389297e-01, -4.26533895e-02, -4.65804817e-02,
       -4.56455136e-01,  3.51026858e-01,  3.43728116e-01,  3.51669509e-01,
        1.26591672e-01, -9.48336197e-03,  2.87692217e-02,  2.91779761e-01,
       -1.12008049e-01, -3.60189771e-01,  5.99332707e-02,  5.83613262e-02,
        1.80736383e-01, -4.33923886e-01, -1.13364273e-01, -3.76027618e-01,
       -4.58449365e-01,  2.06541638e-01, -3.17676095e-01, -3.75357152e-01,
       -4.52168446e-01,  2.09764549e-01, -3.46458873e-01,  2.32217720e-01,
       -4.04114057e-01, -3.35221785e-02,  4.92617188e-01, -4.30576377e-01,
        5.16037879e-03,  3.00202913e-01, -8.94220097e-02, -1.16244400e-01,
       -4.69563227e-01,  4.45218799e-01,  3.66888811e-01, -3.49604593e-01,
        9.21392074e-02, -2.00967796e-01, -3.14734216e-01,  2.95368496e-02,
       -7.29469297e-02, -2.72343933e-01, -1.46604659e-01, -2.69686853e-01,
       -4.45873808e-01,  2.98246471e-01, -4.78916787e-02,  1.68126496e-01,
       -7.35620069e-02,  4.47480153e-01,  1.96922858e-01,  4.99842148e-02,
       -2.88741689e-01,  1.23455652e-01, -4.81622986e-01,  1.43715795e-01,
       -1.52457322e-01,  1.79729943e-01, -2.92081793e-01,  1.69851288e-01,
        2.06312471e-01,  3.13729061e-02,  2.88730589e-01,  2.02560073e-01,
        4.60212242e-02, -1.29424543e-01, -4.00639645e-01, -2.20820199e-01,
       -1.49469808e-01,  4.19221380e-01, -1.71218762e-01, -4.64675407e-01,
       -3.55460703e-01, -9.17904652e-03,  4.52128682e-01, -4.18097489e-01,
        3.38664896e-01,  2.91297219e-01, -2.90687781e-01, -2.52081946e-01,
       -2.41434417e-01, -1.30457982e-01, -2.27075066e-01, -3.50172132e-01,
        2.35787488e-03, -1.44956528e-01, -3.61083544e-01,  3.53668945e-02,
       -1.65379424e-01,  4.66897387e-02,  2.15739698e-01,  4.88310496e-01,
        1.59354460e-01, -1.45417676e-01,  2.85063866e-01, -3.10321273e-01,
       -1.22542542e-01,  3.11894863e-01, -5.83829460e-02, -4.62757364e-01,
       -3.18052218e-01,  9.76785008e-02, -3.42597267e-01,  6.28041046e-02,
        1.37381331e-01,  2.21061889e-01,  1.75478671e-01,  2.54432363e-01,
       -1.30280398e-01,  3.36186391e-01,  1.74189772e-01, -2.90944751e-01,
       -8.48121868e-02,  2.95392261e-01,  2.86367176e-01,  2.41353510e-01,
       -4.97727106e-01,  3.00389576e-01, -1.63711075e-01,  4.82662325e-01,
        1.03519684e-01,  3.07702551e-01, -7.83185505e-02, -4.49904737e-01,
       -3.32840198e-01, -4.09227555e-01, -1.54945445e-01, -4.04394177e-01,
        1.14561813e-01,  8.63596087e-02, -1.27578586e-01,  1.27072362e-02,
        5.14323856e-02, -7.23817088e-02, -1.80335074e-01,  1.27135048e-01,
        1.93183076e-01,  4.48282583e-01,  4.08689239e-01,  1.84719132e-01])

In [149]: a.mean()
Out[149]: -0.010567070842647706

In [150]: a.shape
Out[150]: (1000,)

In [151]: a
Out[151]:
array([ 3.43689193e-01,  4.54673237e-01, -1.24279725e-01,  2.66642600e-01,
        2.64628894e-01, -4.88920366e-01,  4.00690570e-01,  2.34025040e-01,
       -7.22491757e-02,  2.94437439e-02,  4.84604497e-01,  3.04702476e-01,
       -2.08181645e-01, -1.60723199e-01,  4.94732933e-01,  1.73579488e-01,
       -1.50191949e-01, -4.81196972e-01, -3.02034384e-02,  2.18339746e-01,
       -3.07971167e-01, -4.71767626e-01, -4.09024517e-04, -1.59900664e-01,
       -2.62756896e-01,  3.37223061e-01,  2.26218659e-01,  2.69728760e-01,
        3.91539116e-01,  1.03180642e-01,  4.39732105e-01, -3.69711124e-02,
       -1.20597029e-01,  4.59428927e-02, -3.77116844e-02,  2.63835057e-01,
        1.92674276e-01,  1.90868304e-01,  3.07351326e-01,  2.36873257e-01,
       -3.48284802e-01,  3.24993440e-01,  2.54895289e-01, -3.11944202e-01,
       -2.35918421e-01,  3.29202098e-01, -4.74069987e-01,  4.57362132e-01,
       -9.33390906e-02,  3.17295175e-01, -2.99986290e-01, -3.16157439e-01,
       -3.78650559e-01,  9.97956279e-02,  2.00975693e-01,  2.53777730e-01,
       -1.20151032e-01, -3.14756563e-01, -1.04016666e-01,  2.00966974e-01,
        4.58027259e-01, -1.49250932e-01,  3.43670557e-01,  1.95062964e-02,
       -2.39279621e-01,  3.65858648e-01,  4.88939239e-01, -4.60129268e-01,
        4.22881221e-01, -3.58236579e-01, -3.02479580e-02, -9.52558428e-02,
        4.97704103e-01,  8.22852336e-02,  4.16047642e-01, -4.68280459e-01,
        3.88422531e-01, -3.08634586e-01,  2.47593577e-01,  5.33912603e-02,
        4.61586258e-01, -4.02281431e-01,  2.00194975e-01, -3.66068886e-01,
       -4.81167298e-01,  2.59785967e-01,  7.39671193e-02,  4.73684971e-01,
       -4.63209770e-01,  4.78411739e-01,  4.73797880e-01, -4.06932453e-01,
        1.42150513e-01, -3.03366256e-01,  2.43534941e-01,  3.11877712e-01,
        8.07734601e-02, -3.90085624e-01,  4.79700565e-01,  3.96081950e-01,
        3.23470003e-01, -1.48435311e-01, -3.13665884e-01,  2.86617822e-01,
       -4.26604158e-01,  1.33214172e-01,  1.41504333e-01,  1.73597954e-02,
        2.69593017e-01, -2.31757792e-01, -4.78458673e-02, -2.60377533e-02,
        2.00461547e-01, -1.19088700e-01,  1.75564264e-01,  3.07519507e-01,
       -3.99273749e-01, -3.56645006e-01, -2.65731062e-02,  1.01232695e-01,
        2.29094430e-01,  1.82128047e-01,  4.83199154e-01, -3.63556530e-02,
        3.39457267e-01, -4.30826565e-01, -5.00347429e-02, -2.32512807e-01,
       -2.40754902e-01, -2.94547059e-02,  3.78537567e-01, -2.09867248e-01,
        1.28615013e-01, -4.77442473e-01,  3.32117463e-01,  4.13307616e-01,
        4.04044048e-02, -1.59290502e-01, -2.43857173e-01,  4.67192557e-01,
        3.99133011e-02,  1.39465687e-01,  1.53810867e-01, -2.17886579e-01,
        1.91024416e-01, -1.96329023e-02,  2.79194933e-01, -3.49927086e-01,
       -4.82541541e-01, -4.60277501e-02, -4.24563280e-01,  3.82470981e-01,
       -4.94802254e-01,  1.78316112e-01, -7.26732053e-02,  6.16000441e-02,
       -4.16386497e-01,  1.95594011e-01, -3.22509949e-01, -1.13593186e-01,
       -3.67192349e-01,  3.30954113e-01, -1.29318887e-01, -4.90568747e-01,
        2.35647961e-01,  3.02493956e-01,  3.72815302e-01, -2.45790465e-01,
        4.81404910e-01, -3.42976796e-01,  4.39150549e-01, -4.52386395e-01,
        2.31451596e-01,  1.16554543e-01, -2.57513290e-01,  3.67676312e-01,
        1.44588560e-01, -3.83870145e-01,  4.27671195e-01, -1.17966173e-01,
       -4.14648834e-01,  4.22480656e-01,  4.57403501e-01, -6.16480983e-02,
        2.63737467e-01, -1.47751298e-01,  6.27458806e-02,  4.79093668e-01,
       -8.70637560e-02,  1.90572808e-01, -3.82526735e-01,  5.13506656e-03,
       -1.64689973e-01,  1.14877497e-01, -5.52977988e-02,  1.88865616e-01,
       -9.77210700e-02, -4.12380881e-01, -2.20560829e-01, -3.22566922e-01,
       -4.61519444e-01, -4.97348368e-01, -7.63271929e-02, -4.05161073e-01,
        3.67614411e-01,  2.78400567e-01, -1.28587902e-02,  1.53141494e-01,
        2.71206120e-01, -4.31205772e-02,  2.54941450e-01,  3.13822590e-01,
        4.91874401e-01, -2.51394808e-01, -2.45203276e-02,  4.06743198e-01,
        4.38897550e-01,  3.62298069e-01, -1.01562983e-02, -3.99049770e-01,
       -3.93612978e-02, -1.16843930e-01, -4.17184775e-01,  2.28143388e-01,
       -3.64343144e-01,  1.78223446e-01,  7.97498746e-02, -1.66320199e-01,
       -9.65002890e-02,  1.47304190e-01, -3.47533036e-01,  3.21294456e-01,
       -6.99796210e-02, -2.21478378e-01,  3.50289493e-01, -2.03788006e-01,
        3.78456682e-01, -1.74748374e-01,  1.01780131e-01,  2.46802359e-02,
        3.25696397e-01, -2.23515217e-01, -3.17598971e-01, -1.73760551e-01,
       -1.84471527e-01,  3.00869939e-01,  4.31327529e-01, -1.90398587e-01,
       -2.22567260e-01, -3.35997592e-01,  4.92109704e-01,  2.94446376e-01,
       -4.05829359e-01,  2.25119135e-03,  1.90920714e-01,  2.37069774e-01,
        5.10203149e-02,  3.44178963e-01,  3.26827976e-01, -1.41849378e-01,
       -2.94661490e-01,  2.80209047e-01,  4.32638736e-01,  1.76836105e-01,
        3.87757383e-01,  1.11380186e-01,  4.66509307e-01, -1.98702616e-01,
       -3.13315196e-01, -1.93377789e-01, -4.01591807e-01,  4.45923715e-01,
       -3.74874141e-01, -2.71582979e-01, -9.58064761e-02, -1.95981984e-01,
        2.08621131e-01, -1.94866062e-01, -3.83524736e-01,  4.18769527e-01,
       -3.69517468e-01, -2.77630175e-01, -1.41492682e-01,  1.03374328e-01,
       -7.73918822e-02, -2.17532880e-01, -1.59188299e-01, -1.41893105e-01,
        2.90974410e-01, -4.82198706e-01,  1.84057114e-01,  1.96835705e-02,
        2.40213524e-01,  2.04566240e-01, -1.43970812e-01,  1.35438437e-01,
        3.70573284e-02,  4.01188058e-01,  4.48706368e-01, -2.40704822e-01,
       -1.61964289e-01, -1.37025248e-01,  9.41133343e-03,  2.61025655e-01,
       -3.86284936e-01, -2.79167309e-01,  2.78130061e-01, -9.70365973e-04,
        3.61180656e-01, -1.57458701e-01, -2.96160259e-01,  4.53585065e-01,
        1.64570450e-01,  4.92732757e-01, -4.30463012e-02,  4.23628278e-01,
        5.32036612e-02, -4.24075064e-01, -1.84512319e-01, -4.86024917e-01,
       -1.15325100e-01,  1.32481168e-02,  2.25325852e-01,  4.16331181e-01,
       -3.41047033e-02,  3.79296699e-01, -6.20299991e-02,  4.78463577e-01,
       -1.69803638e-01,  6.70836463e-02, -9.40912382e-03, -3.67838956e-01,
        1.20851667e-01, -3.00492872e-01, -1.61288395e-01,  3.54376473e-01,
       -4.42389448e-01,  3.24221288e-01,  6.07748421e-02,  1.76164776e-02,
        4.49226515e-01, -2.04195272e-01,  2.85643258e-01,  4.86120787e-01,
       -4.66357621e-01, -5.34183844e-02,  2.51757424e-01,  4.46375304e-02,
        1.51937430e-01, -3.24805750e-01,  1.15934248e-01,  2.36250925e-01,
        3.57225595e-01,  4.92517638e-01, -4.09172054e-01, -1.44610703e-01,
       -3.63390055e-01, -1.28960592e-01,  1.90115548e-01, -4.37652133e-01,
       -1.54586224e-01,  5.33303852e-02,  3.88147815e-01,  4.50550114e-01,
       -4.47708791e-02,  1.97025386e-01,  4.06603983e-02,  2.02508894e-01,
       -4.47106167e-01,  4.13078091e-02,  4.36506214e-01, -3.92129122e-02,
       -5.51775638e-03, -2.74374490e-03, -3.20187695e-01, -4.59468399e-01,
        2.15800918e-01, -1.73007763e-01,  9.91132024e-02, -4.89370977e-01,
        4.22127771e-01,  7.93723788e-02, -1.67224255e-01,  3.44202570e-01,
       -2.33446153e-01,  1.21947557e-01, -1.24025702e-01,  6.69948053e-02,
       -2.50937218e-01, -3.21277322e-01, -3.08831185e-01,  2.30219404e-01,
       -3.56301504e-01,  2.94709930e-01, -7.45343495e-03,  1.53853119e-03,
       -1.75384146e-01, -1.16364254e-01, -1.63084242e-01,  2.61566941e-01,
       -4.39960351e-01, -6.46309528e-02, -1.58556856e-01,  1.00154831e-01,
       -8.20726996e-02, -1.23347813e-01,  4.23729235e-01, -4.51875463e-01,
        2.77389267e-02,  3.05677175e-01,  1.27198323e-01, -2.02728877e-01,
        1.06475494e-01, -2.35673390e-01,  1.95008165e-01,  1.19094745e-01,
        2.64480282e-01, -4.36347632e-01, -1.65506234e-02,  4.06135156e-01,
        3.08921300e-01, -4.69561659e-01,  4.05808632e-01, -2.00215992e-01,
        3.91989999e-01,  3.33976977e-01, -3.72294950e-02, -9.38805313e-03,
        5.27932379e-02, -2.61089060e-01,  1.53208304e-02, -3.31334918e-01,
        3.09450824e-01, -4.27645562e-01,  4.80550377e-01, -4.62497365e-01,
        2.41925682e-01,  4.68432464e-01,  3.82012196e-01,  1.75172757e-01,
       -3.19046735e-01,  3.65262957e-01,  3.11448420e-01,  4.22368749e-01,
       -1.40740102e-01,  4.80025011e-01,  6.95858098e-02, -4.36971118e-01,
       -2.01451321e-01, -1.11419649e-01, -2.95777537e-01, -1.48038050e-01,
       -4.88528777e-01,  6.07763720e-02, -1.26061426e-01,  4.93694194e-01,
        1.23433020e-03,  9.44136051e-02, -3.17729717e-01, -3.02445563e-01,
        3.51252499e-01, -3.70224599e-01, -4.49855562e-01,  1.75983755e-01,
        2.97377528e-01, -4.88832200e-01, -9.62491130e-02,  4.51072875e-01,
       -1.54381459e-01, -3.22752446e-01, -3.16558195e-01,  2.67615528e-01,
       -9.09547751e-02, -4.81893053e-02, -4.47810522e-01,  2.53580960e-01,
        2.35269599e-02,  4.73753435e-01,  3.23050784e-01,  2.81180361e-01,
        2.54462960e-01,  5.25890229e-02, -4.89046695e-01,  2.26052539e-01,
        2.68590290e-02, -4.27976224e-01, -5.89636867e-02, -4.11526805e-01,
        1.45742222e-01, -3.21679541e-01, -3.34541538e-01, -4.84702327e-01,
       -2.27882281e-01, -7.33555688e-02,  4.35394683e-01,  4.93920816e-01,
        2.85400791e-02,  4.52561212e-01, -4.71653184e-02,  2.08086541e-01,
        9.32490721e-02,  1.74925233e-01,  3.93238459e-02, -4.89597966e-01,
       -4.39585091e-01, -4.45736288e-01,  5.91166470e-02,  2.26413603e-01,
        4.17423608e-01, -4.48715566e-01, -4.56992375e-01,  2.82966711e-01,
       -2.59990565e-01, -2.17130690e-01, -2.75186939e-01, -2.01138825e-01,
       -4.58879387e-01,  4.84156612e-01, -4.97266539e-01, -2.60116369e-01,
       -4.71008974e-01, -2.93595270e-01, -4.81193961e-01, -1.39417961e-01,
       -9.54161320e-02, -4.01208719e-01, -9.10212722e-02,  2.70641684e-01,
       -5.81978914e-02, -1.32358118e-02,  7.21503093e-02, -3.66794351e-01,
       -6.32704478e-02, -4.50075469e-01,  2.13715281e-01,  2.59787826e-01,
       -3.88151390e-01, -1.41961375e-01,  7.67617151e-02,  2.33999209e-01,
       -7.59821143e-02, -4.92553158e-01,  4.90615135e-01, -3.46445148e-01,
       -3.81001309e-01, -1.27790024e-01,  3.04431022e-01,  1.38136302e-01,
       -3.50738665e-01, -3.33563843e-01,  1.82777404e-01, -4.15109038e-01,
        4.61200839e-01, -2.40374688e-02, -8.72796012e-02, -4.08856707e-01,
       -4.12332479e-01,  4.41972151e-01, -3.58893070e-01,  2.40090666e-01,
       -3.63677482e-01,  1.41466359e-01, -1.88202544e-01,  3.58614444e-01,
       -4.47985850e-01, -2.42546657e-01, -3.42466335e-01, -4.55089870e-01,
       -2.18881702e-01,  1.00834836e-01, -2.15998929e-01,  1.95618914e-01,
       -4.50648053e-01, -3.81304751e-01, -1.99753247e-01,  1.93998763e-01,
       -4.41095695e-01, -2.19068752e-01, -2.55511359e-01, -1.48076714e-01,
       -1.13060620e-01, -2.70391522e-01, -1.67811025e-01,  1.54791175e-02,
       -4.14691475e-01, -4.20231449e-01,  1.69077537e-01,  4.67731102e-02,
       -1.83222519e-01,  7.83234390e-02, -2.41929895e-01, -9.73134003e-02,
       -1.92491348e-01,  4.97390263e-01, -3.39178137e-01, -1.70642792e-01,
       -3.18238984e-01,  4.48920619e-01,  1.90918715e-01,  1.47839567e-01,
        1.80015745e-01, -4.95078405e-01, -3.61752128e-02, -1.02282479e-02,
        1.61440959e-01,  8.04770135e-02,  3.91667827e-01, -1.95147485e-01,
        2.28589673e-01,  1.67007365e-01, -1.66340498e-01, -3.60260927e-01,
       -2.44027929e-01,  5.88503850e-02,  4.32840749e-03, -4.45732088e-01,
        4.70557422e-01,  2.21004733e-01, -7.14989246e-02, -1.40316831e-01,
        1.57153046e-01, -4.89495556e-01,  1.64882669e-01, -1.40429442e-01,
       -9.23773313e-02,  3.05251201e-01,  1.76782837e-01,  2.95167727e-01,
        8.61119667e-02, -4.57329752e-01,  4.58132148e-01, -1.97666031e-01,
        2.60322594e-01, -3.63893460e-01, -2.60757493e-02,  2.56618201e-02,
       -7.35153759e-02, -2.88077087e-01, -2.57595279e-02, -2.18036153e-01,
        1.63944354e-01,  3.27975548e-01, -9.59426637e-02,  3.31117220e-01,
        3.83483255e-01, -3.89784024e-01, -3.88558167e-01, -2.71435936e-01,
       -4.99464868e-01, -2.70440798e-01, -3.57222269e-01,  3.93746842e-01,
        4.56452761e-01, -3.11455954e-01,  4.18457993e-01,  3.48948672e-01,
        3.65789107e-01,  2.94676518e-01,  3.14814785e-01, -1.84757067e-01,
        2.78744535e-01,  1.62208444e-01, -3.34832571e-01,  1.68779445e-01,
       -2.15383518e-01,  3.90344713e-01, -7.42041848e-02,  3.26193769e-01,
        3.14289838e-02, -4.11046155e-01, -2.37253849e-01, -4.21580460e-01,
        1.92800997e-01,  1.54913542e-01,  2.52201936e-01, -3.86157305e-01,
       -2.64410904e-01, -4.27326308e-01, -1.15671212e-01, -3.62832737e-02,
       -2.69280159e-01, -3.97855640e-01, -2.50156902e-01, -3.79535041e-01,
       -3.15858670e-01,  2.22848508e-01,  4.12666601e-01, -4.75147581e-01,
       -1.04494285e-01, -2.01609887e-01, -3.02355746e-01, -4.71600572e-01,
       -1.31034031e-01,  4.40061900e-01,  4.97964679e-01, -4.65209785e-01,
        2.28565535e-01,  3.49695505e-01, -9.18478692e-02, -9.25891389e-02,
       -4.68096261e-01,  2.50269682e-01, -2.91281429e-01, -4.65201891e-01,
       -4.00282391e-01,  3.94276863e-01, -1.72914544e-02,  4.19331598e-02,
        4.14507785e-01, -3.60294872e-01, -2.51821479e-01,  2.93455344e-01,
        3.78136905e-01, -3.86700240e-01, -4.59523410e-01,  2.59577097e-01,
       -3.81426250e-01,  4.46267195e-01, -5.74971255e-02,  3.75445147e-02,
        3.06109353e-01,  7.12767349e-02,  3.32328391e-01,  4.51851644e-01,
        4.77593757e-01, -1.90144568e-02, -2.17412271e-01,  1.21642433e-01,
       -1.55779739e-01,  3.13759040e-02, -1.53060582e-01,  3.18011198e-01,
        4.87013064e-01, -3.80452424e-01, -1.89709737e-01, -4.26838230e-01,
        4.58675513e-01,  2.60263295e-01,  4.16926738e-01, -1.11110664e-01,
       -5.66179314e-02,  6.56990670e-03, -3.68309600e-01,  2.27991642e-01,
       -4.47644396e-01, -3.48574838e-01, -1.04776621e-01,  1.43184086e-01,
       -2.71286160e-01, -8.49450067e-03,  4.12223697e-01,  4.41568749e-02,
        9.69575467e-02,  1.80722407e-01,  2.96806940e-01,  2.00361600e-01,
       -3.16089205e-01,  3.60920924e-01, -4.93557062e-01,  5.53334508e-02,
       -3.54641974e-01,  8.59378645e-03,  4.78515636e-01, -2.32144161e-01,
        4.14861324e-01,  4.01898884e-02, -2.23281632e-01,  2.07709698e-01,
        3.92928646e-01,  3.89769642e-01, -2.21251185e-01, -1.27449218e-01,
        2.68264768e-01,  4.03783458e-01, -7.42538990e-02, -3.92912534e-01,
        1.12898695e-01, -3.19903971e-01,  2.77211517e-01,  2.40313610e-01,
       -3.76629602e-02, -2.80015095e-01, -3.89303534e-01,  4.04536947e-01,
       -3.35141286e-01, -1.74897132e-01,  4.02462676e-01,  1.02229450e-01,
       -2.11406511e-01, -4.10520824e-01, -3.87471085e-01,  4.91842848e-01,
       -2.76136801e-01,  1.25272660e-01,  1.43243551e-02, -2.73612452e-01,
        4.09450260e-01, -4.37817391e-01,  6.02761020e-02, -1.42144396e-02,
       -2.01629702e-01,  3.64917626e-01, -4.93893443e-01,  2.78975700e-02,
        5.28496552e-02, -1.47727064e-01,  3.45328704e-01,  2.03141325e-01,
        4.91738302e-01, -4.74951832e-01,  4.65424963e-01,  2.04698941e-01,
        2.89651835e-01,  4.02219195e-01, -4.21213361e-01, -1.99017043e-01,
       -3.26223863e-01, -4.13883300e-01, -4.33961161e-01, -5.34088506e-02,
       -1.33436404e-01,  1.84233640e-02, -4.45960003e-01, -4.64501564e-02,
        1.50025013e-01,  3.96292370e-01,  2.27714685e-01, -4.73004083e-02,
        2.42621234e-01,  2.70558195e-01, -3.75028847e-02,  2.83482420e-01,
       -5.74905617e-02, -4.57595784e-01,  2.07832985e-01,  1.49491969e-01,
       -2.15944109e-01, -2.84843653e-01,  2.24640621e-01, -2.88649164e-01,
       -4.76382986e-01,  2.15550816e-02,  1.16883035e-01,  2.40238091e-01,
       -1.23079733e-01, -3.59424740e-02, -4.65911891e-02, -1.05967406e-01,
       -4.00102373e-01,  3.77156471e-01,  1.70164482e-01, -4.67540660e-01,
       -4.55670326e-01, -8.94494415e-02, -2.72190491e-01, -2.92715046e-01,
        2.22554568e-02, -1.34389297e-01, -4.26533895e-02, -4.65804817e-02,
       -4.56455136e-01,  3.51026858e-01,  3.43728116e-01,  3.51669509e-01,
        1.26591672e-01, -9.48336197e-03,  2.87692217e-02,  2.91779761e-01,
       -1.12008049e-01, -3.60189771e-01,  5.99332707e-02,  5.83613262e-02,
        1.80736383e-01, -4.33923886e-01, -1.13364273e-01, -3.76027618e-01,
       -4.58449365e-01,  2.06541638e-01, -3.17676095e-01, -3.75357152e-01,
       -4.52168446e-01,  2.09764549e-01, -3.46458873e-01,  2.32217720e-01,
       -4.04114057e-01, -3.35221785e-02,  4.92617188e-01, -4.30576377e-01,
        5.16037879e-03,  3.00202913e-01, -8.94220097e-02, -1.16244400e-01,
       -4.69563227e-01,  4.45218799e-01,  3.66888811e-01, -3.49604593e-01,
        9.21392074e-02, -2.00967796e-01, -3.14734216e-01,  2.95368496e-02,
       -7.29469297e-02, -2.72343933e-01, -1.46604659e-01, -2.69686853e-01,
       -4.45873808e-01,  2.98246471e-01, -4.78916787e-02,  1.68126496e-01,
       -7.35620069e-02,  4.47480153e-01,  1.96922858e-01,  4.99842148e-02,
       -2.88741689e-01,  1.23455652e-01, -4.81622986e-01,  1.43715795e-01,
       -1.52457322e-01,  1.79729943e-01, -2.92081793e-01,  1.69851288e-01,
        2.06312471e-01,  3.13729061e-02,  2.88730589e-01,  2.02560073e-01,
        4.60212242e-02, -1.29424543e-01, -4.00639645e-01, -2.20820199e-01,
       -1.49469808e-01,  4.19221380e-01, -1.71218762e-01, -4.64675407e-01,
       -3.55460703e-01, -9.17904652e-03,  4.52128682e-01, -4.18097489e-01,
        3.38664896e-01,  2.91297219e-01, -2.90687781e-01, -2.52081946e-01,
       -2.41434417e-01, -1.30457982e-01, -2.27075066e-01, -3.50172132e-01,
        2.35787488e-03, -1.44956528e-01, -3.61083544e-01,  3.53668945e-02,
       -1.65379424e-01,  4.66897387e-02,  2.15739698e-01,  4.88310496e-01,
        1.59354460e-01, -1.45417676e-01,  2.85063866e-01, -3.10321273e-01,
       -1.22542542e-01,  3.11894863e-01, -5.83829460e-02, -4.62757364e-01,
       -3.18052218e-01,  9.76785008e-02, -3.42597267e-01,  6.28041046e-02,
        1.37381331e-01,  2.21061889e-01,  1.75478671e-01,  2.54432363e-01,
       -1.30280398e-01,  3.36186391e-01,  1.74189772e-01, -2.90944751e-01,
       -8.48121868e-02,  2.95392261e-01,  2.86367176e-01,  2.41353510e-01,
       -4.97727106e-01,  3.00389576e-01, -1.63711075e-01,  4.82662325e-01,
        1.03519684e-01,  3.07702551e-01, -7.83185505e-02, -4.49904737e-01,
       -3.32840198e-01, -4.09227555e-01, -1.54945445e-01, -4.04394177e-01,
        1.14561813e-01,  8.63596087e-02, -1.27578586e-01,  1.27072362e-02,
        5.14323856e-02, -7.23817088e-02, -1.80335074e-01,  1.27135048e-01,
        1.93183076e-01,  4.48282583e-01,  4.08689239e-01,  1.84719132e-01])

In [152]: a.dtype
Out[152]: dtype('float64')

In [153]: a
Out[153]:
array([ 3.43689193e-01,  4.54673237e-01, -1.24279725e-01,  2.66642600e-01,
        2.64628894e-01, -4.88920366e-01,  4.00690570e-01,  2.34025040e-01,
       -7.22491757e-02,  2.94437439e-02,  4.84604497e-01,  3.04702476e-01,
       -2.08181645e-01, -1.60723199e-01,  4.94732933e-01,  1.73579488e-01,
       -1.50191949e-01, -4.81196972e-01, -3.02034384e-02,  2.18339746e-01,
       -3.07971167e-01, -4.71767626e-01, -4.09024517e-04, -1.59900664e-01,
       -2.62756896e-01,  3.37223061e-01,  2.26218659e-01,  2.69728760e-01,
        3.91539116e-01,  1.03180642e-01,  4.39732105e-01, -3.69711124e-02,
       -1.20597029e-01,  4.59428927e-02, -3.77116844e-02,  2.63835057e-01,
        1.92674276e-01,  1.90868304e-01,  3.07351326e-01,  2.36873257e-01,
       -3.48284802e-01,  3.24993440e-01,  2.54895289e-01, -3.11944202e-01,
       -2.35918421e-01,  3.29202098e-01, -4.74069987e-01,  4.57362132e-01,
       -9.33390906e-02,  3.17295175e-01, -2.99986290e-01, -3.16157439e-01,
       -3.78650559e-01,  9.97956279e-02,  2.00975693e-01,  2.53777730e-01,
       -1.20151032e-01, -3.14756563e-01, -1.04016666e-01,  2.00966974e-01,
        4.58027259e-01, -1.49250932e-01,  3.43670557e-01,  1.95062964e-02,
       -2.39279621e-01,  3.65858648e-01,  4.88939239e-01, -4.60129268e-01,
        4.22881221e-01, -3.58236579e-01, -3.02479580e-02, -9.52558428e-02,
        4.97704103e-01,  8.22852336e-02,  4.16047642e-01, -4.68280459e-01,
        3.88422531e-01, -3.08634586e-01,  2.47593577e-01,  5.33912603e-02,
        4.61586258e-01, -4.02281431e-01,  2.00194975e-01, -3.66068886e-01,
       -4.81167298e-01,  2.59785967e-01,  7.39671193e-02,  4.73684971e-01,
       -4.63209770e-01,  4.78411739e-01,  4.73797880e-01, -4.06932453e-01,
        1.42150513e-01, -3.03366256e-01,  2.43534941e-01,  3.11877712e-01,
        8.07734601e-02, -3.90085624e-01,  4.79700565e-01,  3.96081950e-01,
        3.23470003e-01, -1.48435311e-01, -3.13665884e-01,  2.86617822e-01,
       -4.26604158e-01,  1.33214172e-01,  1.41504333e-01,  1.73597954e-02,
        2.69593017e-01, -2.31757792e-01, -4.78458673e-02, -2.60377533e-02,
        2.00461547e-01, -1.19088700e-01,  1.75564264e-01,  3.07519507e-01,
       -3.99273749e-01, -3.56645006e-01, -2.65731062e-02,  1.01232695e-01,
        2.29094430e-01,  1.82128047e-01,  4.83199154e-01, -3.63556530e-02,
        3.39457267e-01, -4.30826565e-01, -5.00347429e-02, -2.32512807e-01,
       -2.40754902e-01, -2.94547059e-02,  3.78537567e-01, -2.09867248e-01,
        1.28615013e-01, -4.77442473e-01,  3.32117463e-01,  4.13307616e-01,
        4.04044048e-02, -1.59290502e-01, -2.43857173e-01,  4.67192557e-01,
        3.99133011e-02,  1.39465687e-01,  1.53810867e-01, -2.17886579e-01,
        1.91024416e-01, -1.96329023e-02,  2.79194933e-01, -3.49927086e-01,
       -4.82541541e-01, -4.60277501e-02, -4.24563280e-01,  3.82470981e-01,
       -4.94802254e-01,  1.78316112e-01, -7.26732053e-02,  6.16000441e-02,
       -4.16386497e-01,  1.95594011e-01, -3.22509949e-01, -1.13593186e-01,
       -3.67192349e-01,  3.30954113e-01, -1.29318887e-01, -4.90568747e-01,
        2.35647961e-01,  3.02493956e-01,  3.72815302e-01, -2.45790465e-01,
        4.81404910e-01, -3.42976796e-01,  4.39150549e-01, -4.52386395e-01,
        2.31451596e-01,  1.16554543e-01, -2.57513290e-01,  3.67676312e-01,
        1.44588560e-01, -3.83870145e-01,  4.27671195e-01, -1.17966173e-01,
       -4.14648834e-01,  4.22480656e-01,  4.57403501e-01, -6.16480983e-02,
        2.63737467e-01, -1.47751298e-01,  6.27458806e-02,  4.79093668e-01,
       -8.70637560e-02,  1.90572808e-01, -3.82526735e-01,  5.13506656e-03,
       -1.64689973e-01,  1.14877497e-01, -5.52977988e-02,  1.88865616e-01,
       -9.77210700e-02, -4.12380881e-01, -2.20560829e-01, -3.22566922e-01,
       -4.61519444e-01, -4.97348368e-01, -7.63271929e-02, -4.05161073e-01,
        3.67614411e-01,  2.78400567e-01, -1.28587902e-02,  1.53141494e-01,
        2.71206120e-01, -4.31205772e-02,  2.54941450e-01,  3.13822590e-01,
        4.91874401e-01, -2.51394808e-01, -2.45203276e-02,  4.06743198e-01,
        4.38897550e-01,  3.62298069e-01, -1.01562983e-02, -3.99049770e-01,
       -3.93612978e-02, -1.16843930e-01, -4.17184775e-01,  2.28143388e-01,
       -3.64343144e-01,  1.78223446e-01,  7.97498746e-02, -1.66320199e-01,
       -9.65002890e-02,  1.47304190e-01, -3.47533036e-01,  3.21294456e-01,
       -6.99796210e-02, -2.21478378e-01,  3.50289493e-01, -2.03788006e-01,
        3.78456682e-01, -1.74748374e-01,  1.01780131e-01,  2.46802359e-02,
        3.25696397e-01, -2.23515217e-01, -3.17598971e-01, -1.73760551e-01,
       -1.84471527e-01,  3.00869939e-01,  4.31327529e-01, -1.90398587e-01,
       -2.22567260e-01, -3.35997592e-01,  4.92109704e-01,  2.94446376e-01,
       -4.05829359e-01,  2.25119135e-03,  1.90920714e-01,  2.37069774e-01,
        5.10203149e-02,  3.44178963e-01,  3.26827976e-01, -1.41849378e-01,
       -2.94661490e-01,  2.80209047e-01,  4.32638736e-01,  1.76836105e-01,
        3.87757383e-01,  1.11380186e-01,  4.66509307e-01, -1.98702616e-01,
       -3.13315196e-01, -1.93377789e-01, -4.01591807e-01,  4.45923715e-01,
       -3.74874141e-01, -2.71582979e-01, -9.58064761e-02, -1.95981984e-01,
        2.08621131e-01, -1.94866062e-01, -3.83524736e-01,  4.18769527e-01,
       -3.69517468e-01, -2.77630175e-01, -1.41492682e-01,  1.03374328e-01,
       -7.73918822e-02, -2.17532880e-01, -1.59188299e-01, -1.41893105e-01,
        2.90974410e-01, -4.82198706e-01,  1.84057114e-01,  1.96835705e-02,
        2.40213524e-01,  2.04566240e-01, -1.43970812e-01,  1.35438437e-01,
        3.70573284e-02,  4.01188058e-01,  4.48706368e-01, -2.40704822e-01,
       -1.61964289e-01, -1.37025248e-01,  9.41133343e-03,  2.61025655e-01,
       -3.86284936e-01, -2.79167309e-01,  2.78130061e-01, -9.70365973e-04,
        3.61180656e-01, -1.57458701e-01, -2.96160259e-01,  4.53585065e-01,
        1.64570450e-01,  4.92732757e-01, -4.30463012e-02,  4.23628278e-01,
        5.32036612e-02, -4.24075064e-01, -1.84512319e-01, -4.86024917e-01,
       -1.15325100e-01,  1.32481168e-02,  2.25325852e-01,  4.16331181e-01,
       -3.41047033e-02,  3.79296699e-01, -6.20299991e-02,  4.78463577e-01,
       -1.69803638e-01,  6.70836463e-02, -9.40912382e-03, -3.67838956e-01,
        1.20851667e-01, -3.00492872e-01, -1.61288395e-01,  3.54376473e-01,
       -4.42389448e-01,  3.24221288e-01,  6.07748421e-02,  1.76164776e-02,
        4.49226515e-01, -2.04195272e-01,  2.85643258e-01,  4.86120787e-01,
       -4.66357621e-01, -5.34183844e-02,  2.51757424e-01,  4.46375304e-02,
        1.51937430e-01, -3.24805750e-01,  1.15934248e-01,  2.36250925e-01,
        3.57225595e-01,  4.92517638e-01, -4.09172054e-01, -1.44610703e-01,
       -3.63390055e-01, -1.28960592e-01,  1.90115548e-01, -4.37652133e-01,
       -1.54586224e-01,  5.33303852e-02,  3.88147815e-01,  4.50550114e-01,
       -4.47708791e-02,  1.97025386e-01,  4.06603983e-02,  2.02508894e-01,
       -4.47106167e-01,  4.13078091e-02,  4.36506214e-01, -3.92129122e-02,
       -5.51775638e-03, -2.74374490e-03, -3.20187695e-01, -4.59468399e-01,
        2.15800918e-01, -1.73007763e-01,  9.91132024e-02, -4.89370977e-01,
        4.22127771e-01,  7.93723788e-02, -1.67224255e-01,  3.44202570e-01,
       -2.33446153e-01,  1.21947557e-01, -1.24025702e-01,  6.69948053e-02,
       -2.50937218e-01, -3.21277322e-01, -3.08831185e-01,  2.30219404e-01,
       -3.56301504e-01,  2.94709930e-01, -7.45343495e-03,  1.53853119e-03,
       -1.75384146e-01, -1.16364254e-01, -1.63084242e-01,  2.61566941e-01,
       -4.39960351e-01, -6.46309528e-02, -1.58556856e-01,  1.00154831e-01,
       -8.20726996e-02, -1.23347813e-01,  4.23729235e-01, -4.51875463e-01,
        2.77389267e-02,  3.05677175e-01,  1.27198323e-01, -2.02728877e-01,
        1.06475494e-01, -2.35673390e-01,  1.95008165e-01,  1.19094745e-01,
        2.64480282e-01, -4.36347632e-01, -1.65506234e-02,  4.06135156e-01,
        3.08921300e-01, -4.69561659e-01,  4.05808632e-01, -2.00215992e-01,
        3.91989999e-01,  3.33976977e-01, -3.72294950e-02, -9.38805313e-03,
        5.27932379e-02, -2.61089060e-01,  1.53208304e-02, -3.31334918e-01,
        3.09450824e-01, -4.27645562e-01,  4.80550377e-01, -4.62497365e-01,
        2.41925682e-01,  4.68432464e-01,  3.82012196e-01,  1.75172757e-01,
       -3.19046735e-01,  3.65262957e-01,  3.11448420e-01,  4.22368749e-01,
       -1.40740102e-01,  4.80025011e-01,  6.95858098e-02, -4.36971118e-01,
       -2.01451321e-01, -1.11419649e-01, -2.95777537e-01, -1.48038050e-01,
       -4.88528777e-01,  6.07763720e-02, -1.26061426e-01,  4.93694194e-01,
        1.23433020e-03,  9.44136051e-02, -3.17729717e-01, -3.02445563e-01,
        3.51252499e-01, -3.70224599e-01, -4.49855562e-01,  1.75983755e-01,
        2.97377528e-01, -4.88832200e-01, -9.62491130e-02,  4.51072875e-01,
       -1.54381459e-01, -3.22752446e-01, -3.16558195e-01,  2.67615528e-01,
       -9.09547751e-02, -4.81893053e-02, -4.47810522e-01,  2.53580960e-01,
        2.35269599e-02,  4.73753435e-01,  3.23050784e-01,  2.81180361e-01,
        2.54462960e-01,  5.25890229e-02, -4.89046695e-01,  2.26052539e-01,
        2.68590290e-02, -4.27976224e-01, -5.89636867e-02, -4.11526805e-01,
        1.45742222e-01, -3.21679541e-01, -3.34541538e-01, -4.84702327e-01,
       -2.27882281e-01, -7.33555688e-02,  4.35394683e-01,  4.93920816e-01,
        2.85400791e-02,  4.52561212e-01, -4.71653184e-02,  2.08086541e-01,
        9.32490721e-02,  1.74925233e-01,  3.93238459e-02, -4.89597966e-01,
       -4.39585091e-01, -4.45736288e-01,  5.91166470e-02,  2.26413603e-01,
        4.17423608e-01, -4.48715566e-01, -4.56992375e-01,  2.82966711e-01,
       -2.59990565e-01, -2.17130690e-01, -2.75186939e-01, -2.01138825e-01,
       -4.58879387e-01,  4.84156612e-01, -4.97266539e-01, -2.60116369e-01,
       -4.71008974e-01, -2.93595270e-01, -4.81193961e-01, -1.39417961e-01,
       -9.54161320e-02, -4.01208719e-01, -9.10212722e-02,  2.70641684e-01,
       -5.81978914e-02, -1.32358118e-02,  7.21503093e-02, -3.66794351e-01,
       -6.32704478e-02, -4.50075469e-01,  2.13715281e-01,  2.59787826e-01,
       -3.88151390e-01, -1.41961375e-01,  7.67617151e-02,  2.33999209e-01,
       -7.59821143e-02, -4.92553158e-01,  4.90615135e-01, -3.46445148e-01,
       -3.81001309e-01, -1.27790024e-01,  3.04431022e-01,  1.38136302e-01,
       -3.50738665e-01, -3.33563843e-01,  1.82777404e-01, -4.15109038e-01,
        4.61200839e-01, -2.40374688e-02, -8.72796012e-02, -4.08856707e-01,
       -4.12332479e-01,  4.41972151e-01, -3.58893070e-01,  2.40090666e-01,
       -3.63677482e-01,  1.41466359e-01, -1.88202544e-01,  3.58614444e-01,
       -4.47985850e-01, -2.42546657e-01, -3.42466335e-01, -4.55089870e-01,
       -2.18881702e-01,  1.00834836e-01, -2.15998929e-01,  1.95618914e-01,
       -4.50648053e-01, -3.81304751e-01, -1.99753247e-01,  1.93998763e-01,
       -4.41095695e-01, -2.19068752e-01, -2.55511359e-01, -1.48076714e-01,
       -1.13060620e-01, -2.70391522e-01, -1.67811025e-01,  1.54791175e-02,
       -4.14691475e-01, -4.20231449e-01,  1.69077537e-01,  4.67731102e-02,
       -1.83222519e-01,  7.83234390e-02, -2.41929895e-01, -9.73134003e-02,
       -1.92491348e-01,  4.97390263e-01, -3.39178137e-01, -1.70642792e-01,
       -3.18238984e-01,  4.48920619e-01,  1.90918715e-01,  1.47839567e-01,
        1.80015745e-01, -4.95078405e-01, -3.61752128e-02, -1.02282479e-02,
        1.61440959e-01,  8.04770135e-02,  3.91667827e-01, -1.95147485e-01,
        2.28589673e-01,  1.67007365e-01, -1.66340498e-01, -3.60260927e-01,
       -2.44027929e-01,  5.88503850e-02,  4.32840749e-03, -4.45732088e-01,
        4.70557422e-01,  2.21004733e-01, -7.14989246e-02, -1.40316831e-01,
        1.57153046e-01, -4.89495556e-01,  1.64882669e-01, -1.40429442e-01,
       -9.23773313e-02,  3.05251201e-01,  1.76782837e-01,  2.95167727e-01,
        8.61119667e-02, -4.57329752e-01,  4.58132148e-01, -1.97666031e-01,
        2.60322594e-01, -3.63893460e-01, -2.60757493e-02,  2.56618201e-02,
       -7.35153759e-02, -2.88077087e-01, -2.57595279e-02, -2.18036153e-01,
        1.63944354e-01,  3.27975548e-01, -9.59426637e-02,  3.31117220e-01,
        3.83483255e-01, -3.89784024e-01, -3.88558167e-01, -2.71435936e-01,
       -4.99464868e-01, -2.70440798e-01, -3.57222269e-01,  3.93746842e-01,
        4.56452761e-01, -3.11455954e-01,  4.18457993e-01,  3.48948672e-01,
        3.65789107e-01,  2.94676518e-01,  3.14814785e-01, -1.84757067e-01,
        2.78744535e-01,  1.62208444e-01, -3.34832571e-01,  1.68779445e-01,
       -2.15383518e-01,  3.90344713e-01, -7.42041848e-02,  3.26193769e-01,
        3.14289838e-02, -4.11046155e-01, -2.37253849e-01, -4.21580460e-01,
        1.92800997e-01,  1.54913542e-01,  2.52201936e-01, -3.86157305e-01,
       -2.64410904e-01, -4.27326308e-01, -1.15671212e-01, -3.62832737e-02,
       -2.69280159e-01, -3.97855640e-01, -2.50156902e-01, -3.79535041e-01,
       -3.15858670e-01,  2.22848508e-01,  4.12666601e-01, -4.75147581e-01,
       -1.04494285e-01, -2.01609887e-01, -3.02355746e-01, -4.71600572e-01,
       -1.31034031e-01,  4.40061900e-01,  4.97964679e-01, -4.65209785e-01,
        2.28565535e-01,  3.49695505e-01, -9.18478692e-02, -9.25891389e-02,
       -4.68096261e-01,  2.50269682e-01, -2.91281429e-01, -4.65201891e-01,
       -4.00282391e-01,  3.94276863e-01, -1.72914544e-02,  4.19331598e-02,
        4.14507785e-01, -3.60294872e-01, -2.51821479e-01,  2.93455344e-01,
        3.78136905e-01, -3.86700240e-01, -4.59523410e-01,  2.59577097e-01,
       -3.81426250e-01,  4.46267195e-01, -5.74971255e-02,  3.75445147e-02,
        3.06109353e-01,  7.12767349e-02,  3.32328391e-01,  4.51851644e-01,
        4.77593757e-01, -1.90144568e-02, -2.17412271e-01,  1.21642433e-01,
       -1.55779739e-01,  3.13759040e-02, -1.53060582e-01,  3.18011198e-01,
        4.87013064e-01, -3.80452424e-01, -1.89709737e-01, -4.26838230e-01,
        4.58675513e-01,  2.60263295e-01,  4.16926738e-01, -1.11110664e-01,
       -5.66179314e-02,  6.56990670e-03, -3.68309600e-01,  2.27991642e-01,
       -4.47644396e-01, -3.48574838e-01, -1.04776621e-01,  1.43184086e-01,
       -2.71286160e-01, -8.49450067e-03,  4.12223697e-01,  4.41568749e-02,
        9.69575467e-02,  1.80722407e-01,  2.96806940e-01,  2.00361600e-01,
       -3.16089205e-01,  3.60920924e-01, -4.93557062e-01,  5.53334508e-02,
       -3.54641974e-01,  8.59378645e-03,  4.78515636e-01, -2.32144161e-01,
        4.14861324e-01,  4.01898884e-02, -2.23281632e-01,  2.07709698e-01,
        3.92928646e-01,  3.89769642e-01, -2.21251185e-01, -1.27449218e-01,
        2.68264768e-01,  4.03783458e-01, -7.42538990e-02, -3.92912534e-01,
        1.12898695e-01, -3.19903971e-01,  2.77211517e-01,  2.40313610e-01,
       -3.76629602e-02, -2.80015095e-01, -3.89303534e-01,  4.04536947e-01,
       -3.35141286e-01, -1.74897132e-01,  4.02462676e-01,  1.02229450e-01,
       -2.11406511e-01, -4.10520824e-01, -3.87471085e-01,  4.91842848e-01,
       -2.76136801e-01,  1.25272660e-01,  1.43243551e-02, -2.73612452e-01,
        4.09450260e-01, -4.37817391e-01,  6.02761020e-02, -1.42144396e-02,
       -2.01629702e-01,  3.64917626e-01, -4.93893443e-01,  2.78975700e-02,
        5.28496552e-02, -1.47727064e-01,  3.45328704e-01,  2.03141325e-01,
        4.91738302e-01, -4.74951832e-01,  4.65424963e-01,  2.04698941e-01,
        2.89651835e-01,  4.02219195e-01, -4.21213361e-01, -1.99017043e-01,
       -3.26223863e-01, -4.13883300e-01, -4.33961161e-01, -5.34088506e-02,
       -1.33436404e-01,  1.84233640e-02, -4.45960003e-01, -4.64501564e-02,
        1.50025013e-01,  3.96292370e-01,  2.27714685e-01, -4.73004083e-02,
        2.42621234e-01,  2.70558195e-01, -3.75028847e-02,  2.83482420e-01,
       -5.74905617e-02, -4.57595784e-01,  2.07832985e-01,  1.49491969e-01,
       -2.15944109e-01, -2.84843653e-01,  2.24640621e-01, -2.88649164e-01,
       -4.76382986e-01,  2.15550816e-02,  1.16883035e-01,  2.40238091e-01,
       -1.23079733e-01, -3.59424740e-02, -4.65911891e-02, -1.05967406e-01,
       -4.00102373e-01,  3.77156471e-01,  1.70164482e-01, -4.67540660e-01,
       -4.55670326e-01, -8.94494415e-02, -2.72190491e-01, -2.92715046e-01,
        2.22554568e-02, -1.34389297e-01, -4.26533895e-02, -4.65804817e-02,
       -4.56455136e-01,  3.51026858e-01,  3.43728116e-01,  3.51669509e-01,
        1.26591672e-01, -9.48336197e-03,  2.87692217e-02,  2.91779761e-01,
       -1.12008049e-01, -3.60189771e-01,  5.99332707e-02,  5.83613262e-02,
        1.80736383e-01, -4.33923886e-01, -1.13364273e-01, -3.76027618e-01,
       -4.58449365e-01,  2.06541638e-01, -3.17676095e-01, -3.75357152e-01,
       -4.52168446e-01,  2.09764549e-01, -3.46458873e-01,  2.32217720e-01,
       -4.04114057e-01, -3.35221785e-02,  4.92617188e-01, -4.30576377e-01,
        5.16037879e-03,  3.00202913e-01, -8.94220097e-02, -1.16244400e-01,
       -4.69563227e-01,  4.45218799e-01,  3.66888811e-01, -3.49604593e-01,
        9.21392074e-02, -2.00967796e-01, -3.14734216e-01,  2.95368496e-02,
       -7.29469297e-02, -2.72343933e-01, -1.46604659e-01, -2.69686853e-01,
       -4.45873808e-01,  2.98246471e-01, -4.78916787e-02,  1.68126496e-01,
       -7.35620069e-02,  4.47480153e-01,  1.96922858e-01,  4.99842148e-02,
       -2.88741689e-01,  1.23455652e-01, -4.81622986e-01,  1.43715795e-01,
       -1.52457322e-01,  1.79729943e-01, -2.92081793e-01,  1.69851288e-01,
        2.06312471e-01,  3.13729061e-02,  2.88730589e-01,  2.02560073e-01,
        4.60212242e-02, -1.29424543e-01, -4.00639645e-01, -2.20820199e-01,
       -1.49469808e-01,  4.19221380e-01, -1.71218762e-01, -4.64675407e-01,
       -3.55460703e-01, -9.17904652e-03,  4.52128682e-01, -4.18097489e-01,
        3.38664896e-01,  2.91297219e-01, -2.90687781e-01, -2.52081946e-01,
       -2.41434417e-01, -1.30457982e-01, -2.27075066e-01, -3.50172132e-01,
        2.35787488e-03, -1.44956528e-01, -3.61083544e-01,  3.53668945e-02,
       -1.65379424e-01,  4.66897387e-02,  2.15739698e-01,  4.88310496e-01,
        1.59354460e-01, -1.45417676e-01,  2.85063866e-01, -3.10321273e-01,
       -1.22542542e-01,  3.11894863e-01, -5.83829460e-02, -4.62757364e-01,
       -3.18052218e-01,  9.76785008e-02, -3.42597267e-01,  6.28041046e-02,
        1.37381331e-01,  2.21061889e-01,  1.75478671e-01,  2.54432363e-01,
       -1.30280398e-01,  3.36186391e-01,  1.74189772e-01, -2.90944751e-01,
       -8.48121868e-02,  2.95392261e-01,  2.86367176e-01,  2.41353510e-01,
       -4.97727106e-01,  3.00389576e-01, -1.63711075e-01,  4.82662325e-01,
        1.03519684e-01,  3.07702551e-01, -7.83185505e-02, -4.49904737e-01,
       -3.32840198e-01, -4.09227555e-01, -1.54945445e-01, -4.04394177e-01,
        1.14561813e-01,  8.63596087e-02, -1.27578586e-01,  1.27072362e-02,
        5.14323856e-02, -7.23817088e-02, -1.80335074e-01,  1.27135048e-01,
        1.93183076e-01,  4.48282583e-01,  4.08689239e-01,  1.84719132e-01])

In [154]: plt.hist(a)
Out[154]:
(array([121., 101.,  86., 106., 102.,  92.,  96., 108.,  87., 101.]),
 array([-0.49946487, -0.39972191, -0.29997896, -0.200236  , -0.10049305,
        -0.00075009,  0.09899286,  0.19873581,  0.29847877,  0.39822172,
         0.49796468]),
 <a list of 10 Patch objects>)

In [155]: plt.hist(a, bins=100)
Out[155]:
(array([12., 13., 10., 12., 17., 12.,  9., 10., 12., 14.,  6., 14.,  6.,
        14., 10.,  9.,  8.,  8., 18.,  8.,  9.,  4., 13.,  6.,  8.,  8.,
         8.,  9., 11., 10., 11.,  7.,  7., 12., 11., 19.,  7., 14., 14.,
         4., 14.,  6., 14.,  5.,  9., 14., 13.,  9.,  7., 11., 10.,  9.,
        12.,  8., 13., 12., 10.,  6.,  7.,  5., 11.,  7., 10.,  4., 10.,
         7.,  9., 14.,  8., 16., 16.,  5., 13., 10.,  9.,  9., 14.,  8.,
        10., 14., 12.,  9.,  9.,  8.,  8.,  8., 11.,  3.,  8., 11.,  9.,
        11., 10.,  4.,  9., 15.,  7.,  6., 14., 16.]),
 array([-0.49946487, -0.48949057, -0.47951628, -0.46954198, -0.45956769,
        -0.44959339, -0.4396191 , -0.4296448 , -0.4196705 , -0.40969621,
        -0.39972191, -0.38974762, -0.37977332, -0.36979903, -0.35982473,
        -0.34985044, -0.33987614, -0.32990185, -0.31992755, -0.30995325,
        -0.29997896, -0.29000466, -0.28003037, -0.27005607, -0.26008178,
        -0.25010748, -0.24013319, -0.23015889, -0.2201846 , -0.2102103 ,
        -0.200236  , -0.19026171, -0.18028741, -0.17031312, -0.16033882,
        -0.15036453, -0.14039023, -0.13041594, -0.12044164, -0.11046735,
        -0.10049305, -0.09051875, -0.08054446, -0.07057016, -0.06059587,
        -0.05062157, -0.04064728, -0.03067298, -0.02069869, -0.01072439,
        -0.00075009,  0.0092242 ,  0.0191985 ,  0.02917279,  0.03914709,
         0.04912138,  0.05909568,  0.06906997,  0.07904427,  0.08901856,
         0.09899286,  0.10896716,  0.11894145,  0.12891575,  0.13889004,
         0.14886434,  0.15883863,  0.16881293,  0.17878722,  0.18876152,
         0.19873581,  0.20871011,  0.21868441,  0.2286587 ,  0.238633  ,
         0.24860729,  0.25858159,  0.26855588,  0.27853018,  0.28850447,
         0.29847877,  0.30845306,  0.31842736,  0.32840166,  0.33837595,
         0.34835025,  0.35832454,  0.36829884,  0.37827313,  0.38824743,
         0.39822172,  0.40819602,  0.41817031,  0.42814461,  0.43811891,
         0.4480932 ,  0.4580675 ,  0.46804179,  0.47801609,  0.48799038,
         0.49796468]),
 <a list of 100 Patch objects>)

In [156]: np.sqrt(1000)
Out[156]: 31.622776601683793

In [157]: plt.figure()
Out[157]: <Figure size 700x700 with 0 Axes>

In [158]: plt.hist(a, bins=30)
Out[158]:
(array([39., 44., 38., 31., 34., 36., 28., 24., 34., 28., 43., 35., 35.,
        39., 28., 36., 36., 20., 28., 27., 41., 37., 36., 35., 33., 26.,
        28., 31., 31., 39.]),
 array([-0.49946487, -0.46621722, -0.43296957, -0.39972191, -0.36647426,
        -0.33322661, -0.29997896, -0.26673131, -0.23348366, -0.200236  ,
        -0.16698835, -0.1337407 , -0.10049305, -0.0672454 , -0.03399775,
        -0.00075009,  0.03249756,  0.06574521,  0.09899286,  0.13224051,
         0.16548816,  0.19873581,  0.23198347,  0.26523112,  0.29847877,
         0.33172642,  0.36497407,  0.39822172,  0.43146938,  0.46471703,
         0.49796468]),
 <a list of 30 Patch objects>)

In [159]: plt.gca().spines['top'].set_visible(True)

In [160]: plt.gca().spines['right'].set_visible(True)

In [161]: plt.gca().spines['top'].set_visible(False)

In [162]: plt.gca().spines['right'].set_visible(False)

In [163]: plt.xlabel?
Signature: plt.xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)
Docstring:
Set the label for the x-axis.

Parameters
----------
xlabel : str
    The label text.

labelpad : scalar, optional, default: None
    Spacing in points from the axes bounding box including ticks
    and tick labels.

Other Parameters
----------------
**kwargs : `.Text` properties
    `.Text` properties control the appearance of the label.

See also
--------
text : for information on how override and the optional args work
File:      /usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py
Type:      function

In [164]: plt.axhline(20)
Out[164]: <matplotlib.lines.Line2D at 0x7f5920625080>

In [165]: plt.axhline(20, 'k')
---------------------------------------------------------------------
ValueError                          Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/matplotlib/axis.py in convert_units(self, x)
   1549         try:
-> 1550             ret = self.converter.convert(x, self.units, self)
   1551         except Exception as e:

/usr/local/lib/python3.6/dist-packages/matplotlib/category.py in convert(value, unit, axis)
     51             raise ValueError(
---> 52                 'Missing category information for StrCategoryConverter; '
     53                 'this might be caused by unintendedly mixing categorical and '

ValueError: Missing category information for StrCategoryConverter; this might be caused by unintendedly mixing categorical and numeric data

The above exception was the direct cause of the following exception:

ConversionError                     Traceback (most recent call last)
<ipython-input-165-307940302a9b> in <module>
----> 1 plt.axhline(20, 'k')

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in axhline(y, xmin, xmax, **kwargs)
   2404 @docstring.copy(Axes.axhline)
   2405 def axhline(y=0, xmin=0, xmax=1, **kwargs):
-> 2406     return gca().axhline(y=y, xmin=xmin, xmax=xmax, **kwargs)
   2407
   2408

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in axhline(self, y, xmin, xmax, **kwargs)
    864         trans = self.get_yaxis_transform(which='grid')
    865         l = mlines.Line2D([xmin, xmax], [y, y], transform=trans, **kwargs)
--> 866         self.add_line(l)
    867         self.autoscale_view(scalex=False, scaley=scaley)
    868         return l

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in add_line(self, line)
   1900             line.set_clip_path(self.patch)
   1901
-> 1902         self._update_line_limits(line)
   1903         if not line.get_label():
   1904             line.set_label('_line%d' % len(self.lines))

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _update_line_limits(self, line)
   1922         Figures out the data limit of the given line, updating self.dataLim.
   1923         """
-> 1924         path = line.get_path()
   1925         if path.vertices.size == 0:
   1926             return

/usr/local/lib/python3.6/dist-packages/matplotlib/lines.py in get_path(self)
   1025         """
   1026         if self._invalidy or self._invalidx:
-> 1027             self.recache()
   1028         return self._path
   1029

/usr/local/lib/python3.6/dist-packages/matplotlib/lines.py in recache(self, always)
    667     def recache(self, always=False):
    668         if always or self._invalidx:
--> 669             xconv = self.convert_xunits(self._xorig)
    670             x = _to_unmasked_float_array(xconv).ravel()
    671         else:

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in convert_xunits(self, x)
    178         if ax is None or ax.xaxis is None:
    179             return x
--> 180         return ax.xaxis.convert_units(x)
    181
    182     def convert_yunits(self, y):

/usr/local/lib/python3.6/dist-packages/matplotlib/axis.py in convert_units(self, x)
   1551         except Exception as e:
   1552             raise munits.ConversionError('Failed to convert value(s) to axis '
-> 1553                                          f'units: {x!r}') from e
   1554         return ret
   1555

ConversionError: Failed to convert value(s) to axis units: ['k', 1]
> /usr/local/lib/python3.6/dist-packages/matplotlib/axis.py(1553)convert_units()
   1551         except Exception as e:
   1552             raise munits.ConversionError('Failed to convert value(s) to axis '
-> 1553                                          f'units: {x!r}') from e
   1554         return ret
   1555

ipdb> c

In [166]: plt.axhline(20, color='black')
Out[166]: <matplotlib.lines.Line2D at 0x7f5920070550>

In [167]: plt.axvline(0, color='black')
Out[167]: <matplotlib.lines.Line2D at 0x7f59200832e8>

In [168]: plt.text(30, 0.2, 'hi')
Out[168]: Text(30, 0.2, 'hi')

/usr/local/lib/python3.6/dist-packages/IPython/terminal/pt_inputhooks/qt.py:51: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations.
  event_loop.exec_()
In [169]: plt.text(40, 0.2, 'hi')
Out[169]: Text(40, 0.2, 'hi')

/usr/local/lib/python3.6/dist-packages/IPython/terminal/pt_inputhooks/qt.py:51: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations.
  event_loop.exec_()
In [170]: plt.text(0.2, 40, 'hi')
Out[170]: Text(0.2, 40, 'hi')

/usr/local/lib/python3.6/dist-packages/IPython/terminal/pt_inputhooks/qt.py:51: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations.
  event_loop.exec_()
In [171]: plt.scatter?

/usr/local/lib/python3.6/dist-packages/IPython/terminal/pt_inputhooks/qt.py:51: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations.
  event_loop.exec_()
In [172]: plt.errorbar?

In [173]: plt.bar?

In [174]: np.arange?

In [175]: np.arange(0, 4*np.pi+0.1, 0.1)
Out[175]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6])

In [176]: t = np.arange(0, 4*np.pi+0.1, 0.1)

In [177]: t
Out[177]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6])

In [178]: t[-1]
Out[178]: 12.600000000000001

In [179]: 4*np.pi
Out[179]: 12.566370614359172

In [180]: s = np.sin(t)

In [181]: c = np.cos(t)

In [182]: s
Out[182]:
array([ 0.        ,  0.09983342,  0.19866933,  0.29552021,  0.38941834,
        0.47942554,  0.56464247,  0.64421769,  0.71735609,  0.78332691,
        0.84147098,  0.89120736,  0.93203909,  0.96355819,  0.98544973,
        0.99749499,  0.9995736 ,  0.99166481,  0.97384763,  0.94630009,
        0.90929743,  0.86320937,  0.8084964 ,  0.74570521,  0.67546318,
        0.59847214,  0.51550137,  0.42737988,  0.33498815,  0.23924933,
        0.14112001,  0.04158066, -0.05837414, -0.15774569, -0.2555411 ,
       -0.35078323, -0.44252044, -0.52983614, -0.61185789, -0.68776616,
       -0.7568025 , -0.81827711, -0.87157577, -0.91616594, -0.95160207,
       -0.97753012, -0.993691  , -0.99992326, -0.99616461, -0.98245261,
       -0.95892427, -0.92581468, -0.88345466, -0.83226744, -0.77276449,
       -0.70554033, -0.63126664, -0.55068554, -0.46460218, -0.37387666,
       -0.2794155 , -0.1821625 , -0.0830894 ,  0.0168139 ,  0.1165492 ,
        0.21511999,  0.31154136,  0.40484992,  0.49411335,  0.57843976,
        0.6569866 ,  0.72896904,  0.79366786,  0.85043662,  0.8987081 ,
        0.93799998,  0.96791967,  0.98816823,  0.99854335,  0.99894134,
        0.98935825,  0.96988981,  0.94073056,  0.90217183,  0.85459891,
        0.79848711,  0.7343971 ,  0.66296923,  0.58491719,  0.50102086,
        0.41211849,  0.31909836,  0.22288991,  0.12445442,  0.02477543,
       -0.07515112, -0.17432678, -0.27176063, -0.36647913, -0.45753589,
       -0.54402111, -0.62507065, -0.69987469, -0.76768581, -0.82782647,
       -0.87969576, -0.92277542, -0.95663502, -0.98093623, -0.99543625,
       -0.99999021, -0.99455259, -0.97917773, -0.95401925, -0.91932853,
       -0.87545217, -0.82282859, -0.76198358, -0.69352508, -0.61813711,
       -0.53657292, -0.44964746, -0.35822928, -0.26323179, -0.16560418,
       -0.0663219 ,  0.03362305])

In [183]: c
Out[183]:
array([ 1.        ,  0.99500417,  0.98006658,  0.95533649,  0.92106099,
        0.87758256,  0.82533561,  0.76484219,  0.69670671,  0.62160997,
        0.54030231,  0.45359612,  0.36235775,  0.26749883,  0.16996714,
        0.0707372 , -0.02919952, -0.12884449, -0.22720209, -0.32328957,
       -0.41614684, -0.5048461 , -0.58850112, -0.66627602, -0.73739372,
       -0.80114362, -0.85688875, -0.90407214, -0.94222234, -0.97095817,
       -0.9899925 , -0.99913515, -0.99829478, -0.98747977, -0.96679819,
       -0.93645669, -0.89675842, -0.84810003, -0.79096771, -0.7259323 ,
       -0.65364362, -0.57482395, -0.49026082, -0.40079917, -0.30733287,
       -0.2107958 , -0.11215253, -0.01238866,  0.08749898,  0.18651237,
        0.28366219,  0.37797774,  0.46851667,  0.55437434,  0.63469288,
        0.70866977,  0.77556588,  0.83471278,  0.88551952,  0.92747843,
        0.96017029,  0.98326844,  0.9965421 ,  0.99985864,  0.99318492,
        0.97658763,  0.95023259,  0.91438315,  0.86939749,  0.8157251 ,
        0.75390225,  0.68454667,  0.60835131,  0.52607752,  0.43854733,
        0.34663532,  0.25125984,  0.15337386,  0.05395542, -0.04600213,
       -0.14550003, -0.24354415, -0.33915486, -0.43137684, -0.51928865,
       -0.6020119 , -0.67872005, -0.74864665, -0.81109301, -0.86543521,
       -0.91113026, -0.9477216 , -0.97484362, -0.99222533, -0.99969304,
       -0.99717216, -0.98468786, -0.96236488, -0.93042627, -0.88919115,
       -0.83907153, -0.78056818, -0.71426565, -0.64082642, -0.56098426,
       -0.47553693, -0.38533819, -0.29128928, -0.19432991, -0.09542885,
        0.0044257 ,  0.10423603,  0.20300486,  0.29974534,  0.39349087,
        0.48330476,  0.56828963,  0.64759634,  0.72043248,  0.7860703 ,
        0.84385396,  0.89320611,  0.93363364,  0.96473262,  0.9861923 ,
        0.99779828,  0.99943459])

In [184]: plt.plot(t, s)
Out[184]: [<matplotlib.lines.Line2D at 0x7f59019011d0>]

/usr/local/lib/python3.6/dist-packages/IPython/terminal/pt_inputhooks/qt.py:51: UserWarning: Tight layout not applied. The left and right margins cannot be made large enough to accommodate all axes decorations.
  event_loop.exec_()
In [185]: plt.plot(t, s)
Out[185]: [<matplotlib.lines.Line2D at 0x7f5901862a90>]

In [186]: plt.plot(t, c)
Out[186]: [<matplotlib.lines.Line2D at 0x7f590181d048>]

In [187]: plt.xlabel('Time (s)')
Out[187]: Text(0.5, 13.94444444444443, 'Time (s)')

In [188]: plt.xlabel('Position')
Out[188]: Text(0.5, 37.50000000000002, 'Position')

In [189]: plt.xlabel('Time (s)')
Out[189]: Text(0.5, 37.50000000000002, 'Time (s)')

In [190]: plt.ylabel('Time (s)')
Out[190]: Text(13.944444444444445, 0.5, 'Time (s)')

In [191]: plt.ylabel('Position')
Out[191]: Text(37.499999999999986, 0.5, 'Position')

In [192]: plt.title('sin and cos vs. t')
Out[192]: Text(0.5, 1, 'sin and cos vs. t')

In [193]: plt.savefig('sin and cos vs. t.png')

In [194]: plt.figure()
Out[194]: <Figure size 700x700 with 0 Axes>

In [195]: plt.plot(t, s, label='sin')
Out[195]: [<matplotlib.lines.Line2D at 0x7f5900185d68>]

In [196]: plt.plot(t, c, label='cos')
Out[196]: [<matplotlib.lines.Line2D at 0x7f590014aba8>]

In [197]: plt.legend()
Out[197]: <matplotlib.legend.Legend at 0x7f590012db00>

In [198]: plt.legend?

In [199]: plt.legend(loc='upper right')
Out[199]: <matplotlib.legend.Legend at 0x7f5900118320>

In [200]: plt.title('sin and cos vs. t')
Out[200]: Text(0.5, 1, 'sin and cos vs. t')

In [201]: plt.ylabel('Position')
Out[201]: Text(13.944444444444445, 0.5, 'Position')

In [202]: plt.xlabel('Time (s)')
Out[202]: Text(0.5, 13.94444444444443, 'Time (s)')

In [203]: np
Out[203]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [204]: plt
Out[204]: <module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>

In [205]: run?

In [206]: ls
 06_fileio_mpl.md             matplotlibrc             t.npy
 06_fileio_mpl.pdf            new_fig1.png             V2.npy
 anatomy.pdf                  plot_exercise.py         V.npy
 ASCII-Conversion-Chart.pdf  'sin and cos vs. t.png'   Vt2.mat
 exercise.npy                 test1D.csv               Vt.mat
 exercise.txt                 test1D_new.txt           Vt.npz
 Figure_1.png                 test2D.csv

In [207]: run plot_exercise.py
---------------------------------------------------------------------
NameError                           Traceback (most recent call last)
~/SciPyCourse2020/notes/06_fileio_mpl/plot_exercise.py in <module>
      2 #import matplotlib.pyplot as plt
      3
----> 4 t = np.arange(0, 4*np.pi+0.1, 0.1)
      5 s = np.sin(t)
      6 c = np.cos(t)

NameError: name 'np' is not defined
> /home/mspacek/SciPyCourse2020/notes/06_fileio_mpl/plot_exercise.py(4)<module>()
      2 #import matplotlib.pyplot as plt
      3
----> 4 t = np.arange(0, 4*np.pi+0.1, 0.1)
      5 s = np.sin(t)
      6 c = np.cos(t)

ipdb> c

In [208]: np
Out[208]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [209]: np
Out[209]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [210]: run -i plot_exercise.py

In [211]: np
Out[211]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [212]: plt
Out[212]: <module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>

In [213]: xyz = 'hello'

In [214]: run -i plot_exercise.py
xyz

In [215]: run -i plot_exercise.py
hello

In [216]: run plot_exercise.py

In [217]: ls
 06_fileio_mpl.md             matplotlibrc            t.npy
 06_fileio_mpl.pdf            new_fig1.png            V2.npy
 anatomy.pdf                  plot_exercise.py        V.npy
 ASCII-Conversion-Chart.pdf  'sin and cos vs t.png'   Vt2.mat
 exercise.npy                 test1D.csv              Vt.mat
 exercise.txt                 test1D_new.txt          Vt.npz
 Figure_1.png                 test2D.csv

In [218]: plt.close()

In [219]: run plot_exercise.py

In [220]: plt.show()

In [221]: run plot_exercise.py

In [222]: plt.close()

In [223]: run plot_exercise.py

In [224]: plt.close()

In [225]: run plot_exercise.py

In [226]: ls
 06_fileio_mpl.md             Figure_1.png            test2D.csv
 06_fileio_mpl.pdf            matplotlibrc            t.npy
 anatomy.pdf                  new_fig1.png            V2.npy
 ASCII-Conversion-Chart.pdf   plot_exercise.py        V.npy
 distribution.png            'sin and cos vs t.png'   Vt2.mat
 exercise.npy                 test1D.csv              Vt.mat
 exercise.txt                 test1D_new.txt          Vt.npz

In [227]:


mspacek@Godel:~/SciPyCourse2020/notes/homework3$ ipython
Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: pwd
Out[1]: '/home/mspacek/SciPyCourse2020/notes/homework3'

In [2]: ls
homework3.md   homework3.pdf         homework3_solutions.py  time_series.png
homework3.npz  homework3_samples.py  student_solutions/

In [3]: d = np.load('homework3.npz')

In [4]: d
Out[4]: <numpy.lib.npyio.NpzFile at 0x7f79b8031518>

In [5]: list(d)
Out[5]: ['t', 'x', 'y']

In [6]: d.files
Out[6]: ['t', 'x', 'y']

In [7]: pwd
Out[7]: '/home/mspacek/SciPyCourse2020/notes/homework3'

In [8]: run homework3_solutions.py

In [9]: x
Out[9]:
array([5.14118889, 4.75428044, 5.57640681, 5.31357379, 4.32715721,
       5.06839403, 5.16940309, 4.86328985, 4.87174037, 4.2911748 ,
       4.72878598, 4.48640719, 4.78791161, 5.10631886, 5.83180781,
       5.28017353, 4.33322931, 5.13782563, 4.82393141, 5.07328827,
       5.29130521, 4.70893915, 5.4454707 , 4.16443932, 5.72916079,
       4.72770165, 4.52985421, 5.35358212, 4.94992266, 4.74532506,
       5.30353596, 5.21641992, 4.53142033, 4.30044654, 4.88030013,
       5.37534785, 4.86041019, 4.50123697, 5.24167162, 4.70243914,
       4.48155515, 5.91370759, 5.07373888, 5.22668951, 5.18216227,
       4.51106103, 4.141395  , 5.10810122, 5.54538287, 5.06926991,
       5.08241325, 5.17739911, 5.02147147, 4.95628782, 5.45277283,
       4.36220798, 5.0398803 , 5.02788362, 5.4445224 , 4.59142154,
       5.48490026, 4.9730347 , 5.0878252 , 4.10955441, 5.43237063,
       4.86723533, 4.53708979, 4.68703528, 5.29106465, 4.55571812,
       5.00766868, 5.72294604, 4.28778682, 4.84307913, 5.25289309,
       4.94024731, 4.67014461, 5.17586193, 4.8278358 , 4.31885822,
       4.89353367, 4.30977493, 4.58779211, 5.08919214, 5.41028502,
       4.92780295, 4.58721918, 3.44193678, 4.95671447, 4.70499909,
       5.42189725, 5.4224133 , 4.54512521, 5.59954802, 4.66049308,
       5.01019869, 4.6515923 , 5.27785136, 5.62524307, 4.66673116,
       5.43268554, 5.50756305, 5.28155131, 5.17926658, 4.71562801,
       5.05349146, 4.56484123, 5.46650176, 5.25932534, 4.20691869,
       5.33499744, 5.25417371, 4.92502639, 5.60764113, 5.0440338 ,
       4.84264728, 6.24226898, 5.11914252, 4.60500311, 5.0233862 ,
       4.81651649, 4.54521443, 4.22337544, 5.28866622, 4.55639499,
       4.95648404, 4.78429149, 5.38613481, 5.50290367, 4.97273875,
       5.07098898, 4.55130238, 5.88010002, 4.58631043, 5.41565917,
       5.01107782, 5.2725234 , 5.24767873, 4.95492743, 4.62888222,
       5.10102197, 4.35391246, 4.30279846, 4.59731362, 4.71880888,
       4.39249529, 4.46080886, 4.75710749, 5.34309252, 5.6163428 ,
       5.33863088, 4.7133777 , 5.06867463, 5.03502173, 5.61825807,
       4.86281201, 5.16279169, 4.61190327, 4.85863436, 5.11568212,
       4.99670699, 5.77273123, 4.26182447, 4.64566533, 4.71602021,
       5.3406712 , 4.58695466, 4.51552931, 5.79948826, 5.31970303,
       5.41615193, 5.53887417, 5.45193289, 5.03659693, 5.55531921,
       4.88617882, 5.79165458, 4.58990613, 4.69431143, 4.54721923,
       4.72860634, 5.30400767, 4.71005569, 5.39257492, 4.86165141,
       4.9242173 , 5.53846087, 5.33301831, 5.38332753, 4.92785314,
       4.49176562, 4.37360871, 4.8620929 , 4.74014509, 5.70071983,
       5.0464676 , 4.53966872, 5.43839982, 4.60038382, 4.54624001,
       5.55511553, 5.32711111, 5.52451929, 5.66495397, 4.85830621,
       5.15482175, 5.35529023, 5.23112916, 5.05576782, 4.46538428,
       4.77652964, 4.66976279, 5.00097618, 5.12639496, 4.74319041,
       5.29193316, 4.58637448, 4.81684386, 5.60277558, 5.0548801 ,
       5.15549231, 4.54329402, 4.78475611, 4.9664764 , 4.19548117,
       5.15214725, 4.60546397, 5.1015504 , 4.25092474, 5.99330599,
       5.13709192, 4.84214709, 5.78686325, 5.56233992, 4.59850525,
       5.52519298, 5.85717934, 5.11634679, 4.77551269, 5.17979837,
       4.76751752, 5.6194705 , 5.12754374, 4.41445593, 5.17294748,
       5.86764751, 4.48112283, 5.14219911, 5.11455004, 5.43982498,
       5.18326256, 6.23958595, 4.70708263, 4.38286964, 6.23566651,
       5.08421132, 6.04912497, 5.62651266, 4.77518087, 4.87867398,
       5.45538647, 4.76550253, 5.55242023, 5.0555202 , 5.2228745 ,
       4.83136906, 4.94848222, 5.65287148, 6.09390792, 5.52919079,
       4.64274933, 4.49711113, 4.45372686, 5.20732115, 4.93733609,
       4.8096099 , 5.01243353, 4.63393763, 5.79594533, 4.28429802,
       4.88539819, 5.05987216, 5.44484668, 5.20634513, 4.15236997,
       5.24283939, 4.43853948, 5.12879528, 4.97034746, 5.55120172,
       4.74144149, 5.30536163, 4.72534439, 4.97527965, 3.88054848,
       5.09184045, 5.20433941, 5.58847543, 5.35929127, 3.97010728,
       4.69599604, 4.08412662, 5.18506471, 4.32056206, 5.22220743,
       4.50822301, 4.70884546, 5.0276102 , 6.12723628, 5.61650351,
       5.11473385, 5.86115121, 5.55995204, 5.33784419, 5.60387426,
       4.89539458, 5.28527883, 5.4168689 , 4.65340951, 4.90145126,
       5.32256157, 5.04447159, 5.13373785, 6.31318652, 5.22249762,
       5.48542274, 4.01277597, 4.71267805, 4.16974988, 4.19017015,
       4.39051868, 4.58013851, 4.91682662, 5.15913418, 4.51799213,
       4.72934639, 4.83991097, 4.63835709, 4.35478078, 5.40834307,
       4.57244264, 4.80929398, 4.96722681, 4.45870432, 4.70510325,
       4.49116166, 5.76735542, 5.67827937, 5.32258635, 5.27383993,
       3.58168371, 5.18259359, 5.92905554, 5.34156775, 4.65165199,
       4.33339631, 4.42859397, 4.84212263, 5.6171381 , 4.32355648,
       4.37059996, 5.24765747, 4.74237449, 6.48196349, 5.23373246,
       5.54790625, 4.81520179, 4.78475271, 5.05051427, 5.0218585 ,
       3.47550087, 5.23596324, 4.51130524, 5.29498423, 5.35347096,
       4.64153333, 4.88555698, 5.02449364, 5.47534683, 4.32353429,
       4.63854242, 4.97721787, 4.57640599, 4.79425971, 4.28404516,
       4.54259501, 5.1643807 , 4.5070048 , 5.09676325, 4.56577338,
       4.19484173, 5.44855899, 4.39333937, 4.41912457, 5.07166533,
       4.78848649, 4.54726717, 5.04758743, 4.96822458, 5.03992361,
       5.46698253, 5.65953204, 4.49322502, 5.68620362, 5.28915918,
       5.11994494, 4.4226522 , 4.83037419, 4.58769705, 5.15157377,
       4.87067461, 5.02469548, 5.07234282, 4.38747446, 5.75374385,
       5.80546081, 4.4270619 , 5.89572212, 4.82232462, 5.19479963,
       5.52036858, 5.4629797 , 4.3657006 , 4.56883008, 5.34242631,
       5.05219869, 4.80714949, 5.04411436, 4.82808378, 4.62019727,
       5.1478501 , 4.70813626, 5.59966527, 5.24191114, 6.34762379,
       5.68702542, 4.83345981, 5.38245439, 5.19844053, 4.62204817,
       4.77900589, 5.48433542, 5.59270595, 5.22008273, 4.95932432,
       5.14487065, 4.74768249, 4.62117481, 4.62979465, 5.21291431,
       5.6206583 , 5.08309573, 4.99478265, 4.73365157, 4.48834129,
       5.36834117, 4.39005772, 6.10863646, 5.1054285 , 5.00720964,
       5.00145407, 5.18433975, 5.61966172, 5.49153316, 5.12810361,
       4.49955531, 4.51708652, 4.90148351, 4.60616294, 5.60079429,
       5.00727552, 4.83990917, 5.26796666, 5.48343591, 3.63732482,
       5.04472993, 4.74423657, 5.07737178, 4.96869026, 5.50949944,
       5.06055201, 5.10832549, 5.10932642, 4.98374935, 4.40537763,
       5.06313435, 5.32922605, 5.33734521, 5.53444008, 4.74256071,
       4.4271563 , 5.43430637, 4.28830111, 5.30891723, 4.64851051,
       5.29109619, 6.16964451, 5.43273436, 5.5172751 , 6.11762777,
       4.88622933, 5.36299646, 4.61274789, 5.95674057, 5.74635703,
       4.82811067, 4.82058537, 4.66516548, 3.89827098, 4.81422933,
       5.47067283, 4.97310969, 5.10976689, 5.50900192, 4.35132994,
       4.58842111, 4.87054609, 5.23276915, 5.60288893, 5.24377157,
       5.14914246, 5.48119354, 5.37195194, 5.48329073, 5.13548914,
       4.99928823, 4.84018574, 5.95625125, 4.29933458, 5.46064135,
       5.22606107, 4.33727984, 5.50537726, 5.10544049, 5.39627348,
       4.45640897, 5.32045278, 4.07222316, 4.70215086, 5.17425983,
       4.48724144, 4.29070976, 5.88888616, 4.82253138, 5.91771135,
       5.62803088, 5.32450183, 5.1520865 , 4.70638332, 5.31135438,
       5.18256276, 4.87147156, 4.58271796, 5.95092823, 5.32356205,
       4.55367924, 5.21772025, 4.99995994, 4.69390813, 6.01988374,
       4.38565793, 4.337105  , 5.3976258 , 4.18941096, 4.97152202,
       5.2196455 , 4.5649311 , 4.68017933, 4.65530662, 5.19894096,
       4.43381525, 5.73611056, 5.03993805, 5.50114568, 5.44908134,
       5.23659911, 4.81161175, 5.30022603, 5.40374956, 4.299952  ,
       4.73849044, 5.11849435, 5.40135367, 5.00441217, 5.31808849,
       5.22621364, 4.92544109, 4.77733951, 4.25437789, 5.07666342,
       4.56442129, 4.44991414, 5.30225047, 4.34885291, 5.51887789,
       4.08258085, 5.10648251, 5.3935335 , 4.49077901, 4.55588581,
       4.86610425, 5.46491912, 4.47843557, 5.44991162, 5.28166172,
       5.32704659, 4.91801077, 5.31520825, 5.66041585, 4.4261036 ,
       4.24526074, 4.2485084 , 5.14585995, 4.49488114, 5.00347486,
       4.53995293, 5.24822871, 4.28689226, 5.1340048 , 3.94024113,
       4.66088212, 5.37038862, 4.97506786, 5.19435147, 5.24506043,
       5.33151309, 4.73894902, 5.87404172, 4.71120057, 4.13338645,
       5.50422926, 4.86389717, 4.53348449, 5.14894604, 5.32692493,
       4.78931036, 5.04964518, 5.50161248, 5.41510004, 4.39851406,
       4.84315233, 4.82648749, 5.91305446, 5.22341279, 4.81326777,
       4.78209562, 3.99511056, 5.09044497, 5.44553411, 5.08015509,
       4.65866738, 4.33748711, 5.02116706, 5.66152608, 5.72042983,
       5.42434925, 3.99084005, 5.01867977, 4.50832375, 4.33447902,
       4.72285677, 4.99169677, 4.09509121, 4.00341342, 4.09637815,
       4.47565139, 4.6228601 , 5.96753191, 6.11136117, 5.40542713,
       4.83145292, 5.53434597, 4.9701225 , 4.64267342, 5.0967164 ,
       4.93092341, 4.78145551, 5.18412909, 4.47419348, 4.61351202,
       4.27577704, 5.12428544, 4.6097318 , 4.99144964, 4.27563972,
       5.63878217, 5.51674261, 5.98035143, 5.52237953, 5.11721537,
       5.96205423, 5.20322608, 5.20748411, 4.89858422, 5.51699126,
       5.56290611, 4.74876098, 4.70444301, 5.30190255, 5.61676249,
       5.16066222, 4.94207435, 4.22262965, 5.09892723, 4.37796556,
       4.68645612, 4.23559536, 4.71108136, 4.14713485, 4.80390239,
       5.3285511 , 5.11048252, 4.94113198, 5.25240209, 4.2674613 ,
       5.8168138 , 4.32084253, 4.91928273, 4.93517484, 5.01083977,
       4.78148702, 4.88044956, 5.01873609, 5.60300264, 5.50088541,
       5.2678393 , 5.15814987, 5.1259454 , 5.65314654, 4.34870519,
       5.70635674, 4.52644956, 4.59119862, 6.19156514, 4.84486064,
       4.92385651, 4.04293867, 5.0318302 , 4.09312524, 4.9284973 ,
       5.40046928, 5.96219655, 5.51390361, 4.85786648, 4.86223627,
       5.21789381, 4.91873026, 5.28827013, 4.35760438, 4.15012308,
       4.75134793, 5.34227007, 5.31918075, 4.71756492, 5.13232922,
       4.78332921, 5.46561058, 5.35549538, 5.53555519, 4.54426459,
       4.60284722, 4.99774153, 4.7676175 , 5.35688245, 4.73663592,
       5.06165505, 4.31907777, 4.94221497, 4.27503976, 5.24992785,
       5.09395982, 5.30627556, 5.27101069, 5.50370313, 4.89331503,
       5.66640714, 4.85628854, 5.59172484, 4.89178372, 5.46560478,
       4.40886407, 3.96289961, 4.68429305, 5.3722549 , 4.53152776,
       4.64071206, 4.77370316, 4.76962875, 4.8970352 , 4.89174474,
       4.34706857, 4.73969007, 4.30502062, 4.68793031, 4.89997731,
       4.74248156, 5.63538962, 4.54468447, 5.15784398, 5.41319404,
       5.62512718, 4.35678712, 4.6633029 , 5.56681437, 4.62318913,
       4.96204023, 5.16046752, 4.62111968, 5.26453988, 4.7744448 ,
       4.1055561 , 6.16774823, 4.96339997, 5.05163671, 4.44477644,
       4.63851564, 5.44798334, 5.15242537, 4.03291676, 5.21686755,
       6.47343871, 4.74667094, 6.3240379 , 5.12325542, 4.81236022,
       4.61149068, 5.28545121, 3.65427512, 5.98592959, 4.62882318,
       4.88714072, 5.44546749, 5.78079937, 5.04025925, 5.31495361,
       5.49899824, 4.71511554, 4.57092705, 5.34534996, 4.62225684,
       5.31604786, 4.89624267, 4.95412027, 5.91130262, 4.97444398,
       5.20444585, 4.40582837, 5.28693485, 4.93451276, 5.69597598,
       5.7934577 , 4.91977303, 5.26548163, 4.32327221, 5.21642744,
       4.82622045, 5.34112108, 3.93554899, 4.96070987, 5.4595968 ,
       5.040903  , 6.30582104, 4.1266013 , 5.22679203, 4.79805101,
       4.52663106, 5.07178901, 3.98796503, 5.36763449, 5.95171446,
       5.71228498, 5.70513511, 5.22439688, 5.09438442, 5.07682439,
       5.63482387, 5.1903915 , 5.57925835, 4.9807708 , 5.46521947,
       5.53821742, 4.78797294, 4.35749279, 4.68644331, 4.9360032 ,
       5.79140391, 4.91837677, 4.41347669, 4.83638767, 5.4001652 ,
       4.53661355, 5.05520922, 4.92286099, 4.62929298, 6.14187378,
       5.67117128, 4.50508978, 5.61382329, 4.90148524, 4.35261705,
       5.10760425, 5.18954575, 6.12939352, 4.81542778, 4.95699747,
       5.48394678, 4.93379622, 5.19431537, 5.79127983, 4.39223908,
       5.15845668, 5.27911954, 5.6094032 , 4.51318068, 5.0211662 ,
       4.36287771, 4.57128787, 4.44551469, 4.8452911 , 5.09859521,
       5.34887314, 5.92491176, 5.82133554, 3.90604261, 6.41269915,
       5.51816889, 4.93654261, 4.97981072, 5.48090333, 4.59103198,
       4.35325928, 4.84968719, 5.55338707, 4.64229684, 5.64044233,
       5.77759259, 5.38272625, 4.44317979, 5.68102712, 5.09686877,
       4.39706748, 4.88300926, 4.22274342, 4.18881627, 5.7064603 ,
       4.49700811, 5.3619466 , 4.58654905, 4.73079032, 4.19502555,
       5.41156116, 4.61458572, 5.34352516, 5.05771825, 4.00032184,
       5.35820144, 4.85841232, 4.8999056 , 5.08085006, 4.4505999 ,
       4.68528025, 3.85174977, 4.93845527, 5.343922  , 4.50226324,
       4.67465999, 5.67188273, 4.91650135, 4.4299055 , 5.59443149,
       5.41348125, 5.5308431 , 3.84440427, 5.14959613, 4.07394351,
       5.48774058, 4.3576411 , 5.47665026, 4.96245391, 5.56101622,
       5.26056192, 4.46076154, 5.80956779, 4.28393287, 5.04671891,
       4.63685228, 4.85126075, 4.77600315, 4.96117426, 4.70825473,
       4.77247098, 4.18518669, 4.86341214, 5.33762501, 5.14740401,
       4.62617716, 5.3991761 , 4.13555912, 5.32453715, 5.51657822])

In [10]: x.dtype
Out[10]: dtype('float64')

In [11]: np.savez('t_absd.npz', t, absd)

In [12]: np.savez('t_absd.npz', t=t, absd=absd)

In [13]: np.savez?

In [14]: np.savez?

In [15]: pwd
Out[15]: '/home/mspacek/SciPyCourse2020/notes/homework3'

In [16]: cd ..
/home/mspacek/SciPyCourse2020/notes

In [17]: ls
00_intro/            03_collections/  06_fileio_mpl/    09_pandas/      12_clustering/  homework3/  README.md
01_Python_basics/    04_numpy/        07_mpl_matrices/  10_stats/       homework1/      homework4/
02_Python_basics_2/  05_numpy_dtype/  08_images/        11_organizing/  homework2/      old_notes/

In [18]: cd 07_mpl_matrices/
/home/mspacek/SciPyCourse2020/notes/07_mpl_matrices

In [19]: ls
07_mpl_matrices.md  07_mpl_matrices.pdf  surprise.npy  surprise.png

In [20]: import matplotlib.pyplot as plt

In [21]: plt.figure()
Out[21]: <Figure size 700x700 with 0 Axes>

In [22]: t = np.linspace(0, 4*np.pi, 100) # 100 evenly spaced timepoints, 2 cycles
    ...: s = np.sin(t) # calculate sine as a function of t
    ...: c = np.cos(t) # calculate cosine as a function of t
    ...: plt.plot(t, s) # plot points in t on x-axis vs. points in s on y-axis
    ...: plt.plot(t, c) # plot cosine as well
Out[22]: [<matplotlib.lines.Line2D at 0x7f79a00f1c18>]

In [23]: f = plt.gcf()

In [24]: f
Out[24]: <Figure size 700x700 with 1 Axes>

In [25]: ax = plt.gca()

In [26]: f, ax = plt.subplots()

In [27]: f
Out[27]: <Figure size 700x700 with 1 Axes>

In [28]: ax
Out[28]: <matplotlib.axes._subplots.AxesSubplot at 0x7f797cfb6278>

In [29]: f2, ax2 = plt.subplots()

In [30]: ax.plot(t, s)
Out[30]: [<matplotlib.lines.Line2D at 0x7f797cb20cc0>]

In [31]: ax.set_xlim(0, 1)
Out[31]: (0, 1)

In [32]: ax.set_ylim(0, 1)
Out[32]: (0, 1)

In [33]: ax.set_xlable('hello')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-33-41d5a7105ada> in <module>
----> 1 ax.set_xlable('hello')

AttributeError: 'AxesSubplot' object has no attribute 'set_xlable'
> <ipython-input-33-41d5a7105ada>(1)<module>()
----> 1 ax.set_xlable('hello')

ipdb> c

In [34]: ax.set_xlabel('hello')
Out[34]: Text(0.5, 13.94444444444443, 'hello')

In [35]: ax.set_ylabel('hello y')
Out[35]: Text(13.944444444444445, 0.5, 'hello y')

In [36]: ax.set_title('figure 1')
Out[36]: Text(0.5, 1, 'figure 1')

In [37]: ax.legend()
No handles with labels found to put in legend.
Out[37]: <matplotlib.legend.Legend at 0x7f797ca1a4e0>

In [38]: ax2.set_title('figure 2')
Out[38]: Text(0.5, 1, 'figure 2')

In [39]: f
Out[39]: <Figure size 700x700 with 1 Axes>

In [40]: plt.figure()
Out[40]: <Figure size 700x700 with 0 Axes>

In [41]: f, ax = plt.subplots()

In [42]: plt.subplots?

In [43]: f, axs = plt.subplots(nrows=2, ncols=2)

In [44]: type(axs)
Out[44]: numpy.ndarray

In [45]: axs
Out[45]:
array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f79ccf78828>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f797ca08780>],
       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f797f8e6898>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f797ccbd9b0>]],
      dtype=object)

In [46]: axs[0, 0].plot(t, s)
Out[46]: [<matplotlib.lines.Line2D at 0x7f797cdcf2b0>]

In [47]: axs[0, 1].plot(t, c)
Out[47]: [<matplotlib.lines.Line2D at 0x7f797caa2e10>]

In [48]: f, axs = plt.subplots(nrows=2, ncols=2, sharex=True,
    ...:  sharey=True)

In [49]: axs[0, 0].plot(t, s)
Out[49]: [<matplotlib.lines.Line2D at 0x7f797caf5550>]

In [50]: axs[0, 1].plot(t, c)
Out[50]: [<matplotlib.lines.Line2D at 0x7f797caf54e0>]

In [51]: axs[1, 0].plot(t, c)
Out[51]: [<matplotlib.lines.Line2D at 0x7f797cadc278>]

In [52]: axs[1, 1].plot(t, s)
Out[52]: [<matplotlib.lines.Line2D at 0x7f797f3c0e10>]

In [53]: axs[1, 1]
Out[53]: <matplotlib.axes._subplots.AxesSubplot at 0x7f797e0d0eb8>

In [54]: ax11 = axs[1, 1]

In [55]: f, ax = plt.subplots?

In [56]: f, ax = plt.subplots(figsize=(1, 1))

In [57]: f
Out[57]: <Figure size 100x100 with 1 Axes>

In [58]: plt.close()

In [59]: f, ax = plt.subplots()

In [60]: f.canvas
Out[60]: <matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg at 0x7f797f3d5828>

In [61]: f.canvas.set_window_title('my awesome figure')

In [62]: f, ax = plt.subplots()

In [63]: plt.hist?

In [64]: ax.hist?

In [65]: ax.scatter?

In [66]: ax.bar?

In [67]: ax.errorbar?

In [68]: axs
Out[68]:
array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f797f854e10>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f797f80a358>],
       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f797e10d0f0>,
        <matplotlib.axes._subplots.AxesSubplot object at 0x7f797e0d0eb8>]],
      dtype=object)

In [69]: np.array([[1, 2, 3], [4, 5, 6]])
Out[69]:
array([[1, 2, 3],
       [4, 5, 6]])

In [70]: a = np.array([[1, 2, 3], [4, 5, 6]])

In [71]: a
Out[71]:
array([[1, 2, 3],
       [4, 5, 6]])

In [72]: a.shape
Out[72]: (2, 3)

In [73]: a = np.arange(16)

In [74]: a
Out[74]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [75]: np.arange(16).reshape?
Object `reshape` not found.

In [76]: a = np.arange(16)

In [77]: a.reshape?
Docstring:
a.reshape(shape, order='C')

Returns an array containing the same data with a new shape.

Refer to `numpy.reshape` for full documentation.

See Also
--------
numpy.reshape : equivalent function

Notes
-----
Unlike the free function `numpy.reshape`, this method on `ndarray` allows
the elements of the shape parameter to be passed in as separate arguments.
For example, ``a.reshape(10, 11)`` is equivalent to
``a.reshape((10, 11))``.
Type:      builtin_function_or_method

In [78]: a = np.arange(16).reshape(8, 2)

In [79]: a
Out[79]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [80]: a = np.arange(16).reshape((8, 2))

In [81]: a
Out[81]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [82]: a.shape
Out[82]: (8, 2)

In [83]: a.size
Out[83]: 16

In [84]: a
Out[84]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [85]: a.reshape((8, 3))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-85-5470a68528da> in <module>
----> 1 a.reshape((8, 3))

ValueError: cannot reshape array of size 16 into shape (8,3)
> <ipython-input-85-5470a68528da>(1)<module>()
----> 1 a.reshape((8, 3))

ipdb> c

In [86]: a.reshape((4, 4))
Out[86]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [87]: a.reshape((1, 4))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-87-efed94df84bb> in <module>
----> 1 a.reshape((1, 4))

ValueError: cannot reshape array of size 16 into shape (1,4)
> <ipython-input-87-efed94df84bb>(1)<module>()
----> 1 a.reshape((1, 4))

ipdb> c

In [88]: a.shape
Out[88]: (8, 2)

In [89]: a
Out[89]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [90]: a.shape = 4, 4

In [91]: a
Out[91]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [92]: a.reshape((4, 4))
Out[92]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [93]: a = a.reshape((4, 4))

In [94]: a.shape = 4, 4

In [95]: a
Out[95]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [96]: np.zeros?

In [97]: np.zeros?

In [98]: np.zeros(10)
Out[98]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

In [99]: np.zeros((4, 4))
Out[99]:
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])

In [100]: np.ones((4, 4))
Out[100]:
array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])

In [101]: np.random.random((4, 4))
Out[101]:
array([[0.91506891, 0.17026956, 0.89706083, 0.01319477],
       [0.61669891, 0.87508052, 0.418395  , 0.75136389],
       [0.57879574, 0.41142151, 0.22427492, 0.44154996],
       [0.93281573, 0.59191553, 0.25561953, 0.31787889]])

In [102]: np.tile?

In [103]:

In [103]: np.tile?

In [104]: np.tile(1, 8)
Out[104]: array([1, 1, 1, 1, 1, 1, 1, 1])

In [105]: np.tile([1, 2], 8)
Out[105]: array([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])

In [106]: np.tile([1, 2], [2, 2])
Out[106]:
array([[1, 2, 1, 2],
       [1, 2, 1, 2]])

In [107]: a = np.zeros((4, 4))

In [108]: a
Out[108]:
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])

In [109]: a.fill(7)

In [110]: a
Out[110]:
array([[7., 7., 7., 7.],
       [7., 7., 7., 7.],
       [7., 7., 7., 7.],
       [7., 7., 7., 7.]])

In [111]: np.eye?

In [112]: np.eye(5)
Out[112]:
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

In [113]: np.eye?

In [114]: np.eye?

In [115]: a = np.arange(16).reshape((8, 2))

In [116]: a
Out[116]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [117]: a.shape
Out[117]: (8, 2)

In [118]: a.shape[0]
Out[118]: 8

In [119]: a.shape[1]
Out[119]: 2

In [120]: a.ndim
Out[120]: 2

In [121]: a.ndim
Out[121]: 2

In [122]: b = np.arange(10)

In [123]: b
Out[123]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [124]: len(b)
Out[124]: 10

In [125]: len(a)
Out[125]: 8

In [126]: a.size
Out[126]: 16

In [127]: len(a)
Out[127]: 8

In [128]: a = np.arange(16).reshape((8, 2))

In [129]: a
Out[129]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [130]: a.ravel()
Out[130]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [131]: a.ravel?
Docstring:
a.ravel([order])

Return a flattened array.

Refer to `numpy.ravel` for full documentation.

See Also
--------
numpy.ravel : equivalent function

ndarray.flat : a flat iterator on the array.
Type:      builtin_function_or_method

In [132]: a.ravel()
Out[132]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [133]: a
Out[133]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [134]: len(a.ravel())
Out[134]: 16

In [135]: a.size
Out[135]: 16

In [136]: f, ax = plt.subplots(figsize=(3, 3))

In [137]: a
Out[137]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [138]: a
Out[138]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [139]: ax
Out[139]: <matplotlib.axes._subplots.AxesSubplot at 0x7f797f2b0f28>

In [140]: im = ax.imshow(a)

In [141]: f.canvas.set_window_title('example')

In [142]: f.colorbar?

In [143]: f.colorbar(im)
Out[143]: <matplotlib.colorbar.Colorbar at 0x7f797fa85320>

In [144]: ax.set_xticks([])
Out[144]: []

In [145]: ax.set_yticks([])
Out[145]: []

In [146]: f.close()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-146-b5edb7b78a9a> in <module>
----> 1 f.close()

AttributeError: 'Figure' object has no attribute 'close'
> <ipython-input-146-b5edb7b78a9a>(1)<module>()
----> 1 f.close()

ipdb> c

In [147]: plt.close('all')

In [148]: f, ax = plt.subplots(figsize=(3, 3))

In [149]: ax.imshow?

In [150]: im = ax.imshow(a, cmap='jet')

In [151]: f.colorbar(im)
Out[151]: <matplotlib.colorbar.Colorbar at 0x7f797f227a58>

In [152]: import scipy

In [153]: import scipy.ndimage

In [154]: import skimage

In [155]: a
Out[155]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [156]: a
Out[156]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [157]: a[0, 0]
Out[157]: 0

In [158]: a[0, 1]
Out[158]: 1

In [159]: a[1, 0]
Out[159]: 2

In [160]: a[1, 2]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-160-cff7934c3c80> in <module>
----> 1 a[1, 2]

IndexError: index 2 is out of bounds for axis 1 with size 2
> <ipython-input-160-cff7934c3c80>(1)<module>()
----> 1 a[1, 2]

ipdb> c

In [161]: a[1, 1]
Out[161]: 3

In [162]: a[-1, -1]
Out[162]: 15

In [163]: a[2, 2]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-163-02ce8881f7de> in <module>
----> 1 a[2, 2]

IndexError: index 2 is out of bounds for axis 1 with size 2
> <ipython-input-163-02ce8881f7de>(1)<module>()
----> 1 a[2, 2]

ipdb> c

In [164]: a
Out[164]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [165]: a[0, :]
Out[165]: array([0, 1])

In [166]: a[1, :]
Out[166]: array([2, 3])

In [167]: a[-1, :]
Out[167]: array([14, 15])

In [168]: a[:, 0]
Out[168]: array([ 0,  2,  4,  6,  8, 10, 12, 14])

In [169]: b = a[:, 0]

In [170]: b
Out[170]: array([ 0,  2,  4,  6,  8, 10, 12, 14])

In [171]: b.shape
Out[171]: (8,)

In [172]: b.shape = 1, 8

In [173]: b
Out[173]: array([[ 0,  2,  4,  6,  8, 10, 12, 14]])

In [174]: b.ndim
Out[174]: 2

In [175]: b.shape
Out[175]: (1, 8)

In [176]: a
Out[176]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [177]: a[0]
Out[177]: array([0, 1])

In [178]: a[0, :]
Out[178]: array([0, 1])

In [179]: a[0, :]
Out[179]: array([0, 1])

In [180]: a[:, 0]
Out[180]: array([ 0,  2,  4,  6,  8, 10, 12, 14])

In [181]: a[0]
Out[181]: array([0, 1])

In [182]: a[:3, :]
Out[182]:
array([[0, 1],
       [2, 3],
       [4, 5]])

In [183]: a[:3]
Out[183]:
array([[0, 1],
       [2, 3],
       [4, 5]])

In [184]: a[::2]
Out[184]:
array([[ 0,  1],
       [ 4,  5],
       [ 8,  9],
       [12, 13]])

In [185]: a[:, :2]
Out[185]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [186]: a
Out[186]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [187]: a[:, ::2]
Out[187]:
array([[ 0],
       [ 2],
       [ 4],
       [ 6],
       [ 8],
       [10],
       [12],
       [14]])

In [188]: a[:, 0]
Out[188]: array([ 0,  2,  4,  6,  8, 10, 12, 14])

In [189]: a
Out[189]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [190]: a[::-1]
Out[190]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3],
       [ 0,  1]])

In [191]: a[:, ::-1]
Out[191]:
array([[ 1,  0],
       [ 3,  2],
       [ 5,  4],
       [ 7,  6],
       [ 9,  8],
       [11, 10],
       [13, 12],
       [15, 14]])

In [192]: np.rot90?

In [193]: np.rot90?

In [194]: np.rot90(a)
Out[194]:
array([[ 1,  3,  5,  7,  9, 11, 13, 15],
       [ 0,  2,  4,  6,  8, 10, 12, 14]])

In [195]: a
Out[195]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [196]: np.rot90(a)
Out[196]:
array([[ 1,  3,  5,  7,  9, 11, 13, 15],
       [ 0,  2,  4,  6,  8, 10, 12, 14]])

In [197]: np.rot90(a, 2)
Out[197]:
array([[15, 14],
       [13, 12],
       [11, 10],
       [ 9,  8],
       [ 7,  6],
       [ 5,  4],
       [ 3,  2],
       [ 1,  0]])

In [198]: np.rot90(a, -1)
Out[198]:
array([[14, 12, 10,  8,  6,  4,  2,  0],
       [15, 13, 11,  9,  7,  5,  3,  1]])

In [199]: a
Out[199]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [200]: np.rot90(a, -1)
Out[200]:
array([[14, 12, 10,  8,  6,  4,  2,  0],
       [15, 13, 11,  9,  7,  5,  3,  1]])

In [201]: a + 2
Out[201]:
array([[ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17]])

In [202]: a - 2
Out[202]:
array([[-2, -1],
       [ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13]])

In [203]: a * 2
Out[203]:
array([[ 0,  2],
       [ 4,  6],
       [ 8, 10],
       [12, 14],
       [16, 18],
       [20, 22],
       [24, 26],
       [28, 30]])

In [204]: a / 2
Out[204]:
array([[0. , 0.5],
       [1. , 1.5],
       [2. , 2.5],
       [3. , 3.5],
       [4. , 4.5],
       [5. , 5.5],
       [6. , 6.5],
       [7. , 7.5]])

In [205]: b = np.random.random(16).reshape((8, 2))

In [206]: a
Out[206]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [207]: b
Out[207]:
array([[0.72257209, 0.78734422],
       [0.99506454, 0.70427291],
       [0.89220448, 0.08227283],
       [0.41115765, 0.42141495],
       [0.32134304, 0.18699127],
       [0.45555954, 0.50940945],
       [0.45869822, 0.0476691 ],
       [0.6260721 , 0.44986396]])

In [208]: a.shape
Out[208]: (8, 2)

In [209]: b.shape
Out[209]: (8, 2)

In [210]: a + b
Out[210]:
array([[ 0.72257209,  1.78734422],
       [ 2.99506454,  3.70427291],
       [ 4.89220448,  5.08227283],
       [ 6.41115765,  7.42141495],
       [ 8.32134304,  9.18699127],
       [10.45555954, 11.50940945],
       [12.45869822, 13.0476691 ],
       [14.6260721 , 15.44986396]])

In [211]:  a- b
Out[211]:
array([[-0.72257209,  0.21265578],
       [ 1.00493546,  2.29572709],
       [ 3.10779552,  4.91772717],
       [ 5.58884235,  6.57858505],
       [ 7.67865696,  8.81300873],
       [ 9.54444046, 10.49059055],
       [11.54130178, 12.9523309 ],
       [13.3739279 , 14.55013604]])

In [212]: a * b
Out[212]:
array([[0.        , 0.78734422],
       [1.99012907, 2.11281873],
       [3.56881791, 0.41136415],
       [2.46694588, 2.94990465],
       [2.57074432, 1.6829214 ],
       [4.5555954 , 5.60350393],
       [5.5043786 , 0.61969834],
       [8.7650094 , 6.74795934]])

In [213]: a / 2
Out[213]:
array([[0. , 0.5],
       [1. , 1.5],
       [2. , 2.5],
       [3. , 3.5],
       [4. , 4.5],
       [5. , 5.5],
       [6. , 6.5],
       [7. , 7.5]])

In [214]: a.dtype
Out[214]: dtype('int64')

In [215]: b.dtype
Out[215]: dtype('float64')

In [216]: a + 2
Out[216]:
array([[ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17]])

In [217]: a + b
Out[217]:
array([[ 0.72257209,  1.78734422],
       [ 2.99506454,  3.70427291],
       [ 4.89220448,  5.08227283],
       [ 6.41115765,  7.42141495],
       [ 8.32134304,  9.18699127],
       [10.45555954, 11.50940945],
       [12.45869822, 13.0476691 ],
       [14.6260721 , 15.44986396]])

In [218]: a / b
Out[218]:
array([[  0.        ,   1.27009251],
       [  2.00991989,   4.25971233],
       [  4.48327721,  60.77340527],
       [ 14.59294278,  16.6107064 ],
       [ 24.89551354,  48.13059006],
       [ 21.95102751,  21.59363168],
       [ 26.16099117, 272.71333179],
       [ 22.36164173,  33.3434137 ]])

In [219]: b / a
/usr/local/bin/ipython:1: RuntimeWarning: divide by zero encountered in true_divide
  #!/usr/bin/python3
Out[219]:
array([[       inf, 0.78734422],
       [0.49753227, 0.23475764],
       [0.22305112, 0.01645457],
       [0.06852627, 0.06020214],
       [0.04016788, 0.02077681],
       [0.04555595, 0.04630995],
       [0.03822485, 0.00366685],
       [0.04471944, 0.02999093]])

In [220]: a
Out[220]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [221]: c = b / a
/usr/local/bin/ipython:1: RuntimeWarning: divide by zero encountered in true_divide
  #!/usr/bin/python3

In [222]: c[0, 0]
Out[222]: inf

In [223]: type(c[0, 0])
Out[223]: numpy.float64

In [224]: np.geterr?
Signature: np.geterr()
Docstring:
Get the current way of handling floating-point errors.

Returns
-------
res : dict
    A dictionary with keys "divide", "over", "under", and "invalid",
    whose values are from the strings "ignore", "print", "log", "warn",
    "raise", and "call". The keys represent possible floating-point
    exceptions, and the values define how these exceptions are handled.

See Also
--------
geterrcall, seterr, seterrcall

Notes
-----
For complete documentation of the types of floating-point exceptions and
treatment options, see `seterr`.

Examples
--------
>>> from collections import OrderedDict
>>> sorted(np.geterr().items())
[('divide', 'warn'), ('invalid', 'warn'), ('over', 'warn'), ('under', 'ignore')]
>>> np.arange(3.) / np.arange(3.)
array([nan,  1.,  1.])

>>> oldsettings = np.seterr(all='warn', over='raise')
>>> OrderedDict(sorted(np.geterr().items()))
OrderedDict([('divide', 'warn'), ('invalid', 'warn'), ('over', 'raise'), ('under', 'warn')])
>>> np.arange(3.) / np.arange(3.)
array([nan,  1.,  1.])
File:      /usr/local/lib/python3.6/dist-packages/numpy/core/_ufunc_config.py
Type:      function

In [225]: np.geterr()
Out[225]: {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}

In [226]: np.seterr('divide'='error')
  File "<ipython-input-226-18b2d50472a9>", line 1
    np.seterr('divide'='error')
             ^
SyntaxError: keyword can't be an expression


In [227]: np.seterr(divide='error')
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-227-bc3b2d7e0ceb> in <module>
----> 1 np.seterr(divide='error')

/usr/local/lib/python3.6/dist-packages/numpy/core/_ufunc_config.py in seterr(all, divide, over, under, invalid)
    129     maskvalue = ((_errdict[divide] << SHIFT_DIVIDEBYZERO) +
    130                  (_errdict[over] << SHIFT_OVERFLOW) +
--> 131                  (_errdict[under] << SHIFT_UNDERFLOW) +
    132                  (_errdict[invalid] << SHIFT_INVALID))
    133

KeyError: 'error'
> /usr/local/lib/python3.6/dist-packages/numpy/core/_ufunc_config.py(131)seterr()
    129     maskvalue = ((_errdict[divide] << SHIFT_DIVIDEBYZERO) +
    130                  (_errdict[over] << SHIFT_OVERFLOW) +
--> 131                  (_errdict[under] << SHIFT_UNDERFLOW) +
    132                  (_errdict[invalid] << SHIFT_INVALID))
    133

ipdb> c

In [228]: np.seterr(divide='raise')
Out[228]: {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}

In [229]: b / a
---------------------------------------------------------------------------
FloatingPointError                        Traceback (most recent call last)
<ipython-input-229-86f14ff2de04> in <module>
----> 1 b / a

FloatingPointError: divide by zero encountered in true_divide
> <ipython-input-229-86f14ff2de04>(1)<module>()
----> 1 b / a

ipdb> c

In [230]: np.seterr(divide='warn')
Out[230]: {'divide': 'raise', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}

In [231]: np.seterr(divide='ignore')
Out[231]: {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}

In [232]: b / a
Out[232]:
array([[       inf, 0.78734422],
       [0.49753227, 0.23475764],
       [0.22305112, 0.01645457],
       [0.06852627, 0.06020214],
       [0.04016788, 0.02077681],
       [0.04555595, 0.04630995],
       [0.03822485, 0.00366685],
       [0.04471944, 0.02999093]])

In [233]: x = np.arange(8)

In [234]: a
Out[234]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [235]: x.shape
Out[235]: (8,)

In [236]: a.shape
Out[236]: (8, 2)

In [237]: a * x
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-237-6ac118169318> in <module>
----> 1 a * x

ValueError: operands could not be broadcast together with shapes (8,2) (8,)
> <ipython-input-237-6ac118169318>(1)<module>()
----> 1 a * x

ipdb> c

In [238]: a.T
Out[238]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [239]: a
Out[239]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [240]: a.T
Out[240]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [241]: a.T.shape
Out[241]: (2, 8)

In [242]: a.T * x
Out[242]:
array([[  0,   2,   8,  18,  32,  50,  72,  98],
       [  0,   3,  10,  21,  36,  55,  78, 105]])

In [243]: a.T
Out[243]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [244]: x
Out[244]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [245]: a.T
Out[245]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [246]: a.T.shape
Out[246]: (2, 8)

In [247]: x.shape
Out[247]: (8,)

In [248]: a.max()
Out[248]: 15

In [249]: a
Out[249]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [250]: a.max()
Out[250]: 15

In [251]: a.min()
Out[251]: 0

In [252]: a.sum()
Out[252]: 120

In [253]: a.mean()
Out[253]: 7.5

In [254]: a.sum()
Out[254]: 120

In [255]: a.ravel().sum()
Out[255]: 120

In [256]: a.max?
Docstring:
a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)

Return the maximum along a given axis.

Refer to `numpy.amax` for full documentation.

See Also
--------
numpy.amax : equivalent function
Type:      builtin_function_or_method

In [257]: a
Out[257]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [258]: a.max(axis=0)
Out[258]: array([14, 15])

In [259]: a.max(axis=1)
Out[259]: array([ 1,  3,  5,  7,  9, 11, 13, 15])

In [260]: a.sum(axis=0)
Out[260]: array([56, 64])

In [261]: a
Out[261]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [262]: a.sum()
Out[262]: 120

In [263]: a.sum(axis=0)
Out[263]: array([56, 64])

In [264]: a.sum(axis=0).sum()
Out[264]: 120

In [265]: a
Out[265]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [266]: a.T
Out[266]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [267]: a.transpose()
Out[267]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [268]: a
Out[268]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [269]: c = np.arange(16).reshape((4, 4))

In [270]: c
Out[270]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [271]: np.diagonal(c)
Out[271]: array([ 0,  5, 10, 15])

In [272]: np.diagonal(c)
Out[272]: array([ 0,  5, 10, 15])

In [273]: np.diagonal(a)
Out[273]: array([0, 3])

In [274]: a
Out[274]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [275]: np.diagonal?

In [276]: np.diagonal(c)
Out[276]: array([ 0,  5, 10, 15])

In [277]: c.diagonal()
Out[277]: array([ 0,  5, 10, 15])

In [278]: c.diagonal?
Docstring:
a.diagonal(offset=0, axis1=0, axis2=1)

Return specified diagonals. In NumPy 1.9 the returned array is a
read-only view instead of a copy as in previous NumPy versions.  In
a future version the read-only restriction will be removed.

Refer to :func:`numpy.diagonal` for full documentation.

See Also
--------
numpy.diagonal : equivalent function
Type:      builtin_function_or_method

In [279]: c.diagonal(offset=1)
Out[279]: array([ 1,  6, 11])

In [280]: c
Out[280]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [281]: c.trace()
Out[281]: 30

In [282]: np.dot?

In [283]: a = np.arange(16).reshape((8, 2))

In [284]: b = np.random.random(16).reshape((8, 2))

In [285]: a
Out[285]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [286]: b
Out[286]:
array([[0.62873995, 0.3883023 ],
       [0.47741718, 0.93514377],
       [0.30771678, 0.44560372],
       [0.85541343, 0.28682325],
       [0.47518147, 0.35052531],
       [0.14721571, 0.08229019],
       [0.10254079, 0.98452955],
       [0.32076137, 0.21780697]])

In [287]: np.dot(a, b)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-287-c9cc415545b4> in <module>
----> 1 np.dot(a, b)

<__array_function__ internals> in dot(*args, **kwargs)

ValueError: shapes (8,2) and (8,2) not aligned: 2 (dim 1) != 8 (dim 0)
> <__array_function__ internals>(6)dot()

ipdb> c

In [288]: a
Out[288]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [289]: b
Out[289]:
array([[0.62873995, 0.3883023 ],
       [0.47741718, 0.93514377],
       [0.30771678, 0.44560372],
       [0.85541343, 0.28682325],
       [0.47518147, 0.35052531],
       [0.14721571, 0.08229019],
       [0.10254079, 0.98452955],
       [0.32076137, 0.21780697]])

In [290]: np.dot(a.T, b)
Out[290]:
array([[18.3129396 , 23.86439854],
       [21.62792629, 27.55542361]])

In [291]: np.dot(a, b.T)
Out[291]:
array([[ 0.3883023 ,  0.93514377,  0.44560372,  0.28682325,  0.35052531,
         0.08229019,  0.98452955,  0.21780697],
       [ 2.42238681,  3.76026567,  1.95224473,  2.57129661,  2.00193888,
         0.54130199,  3.15867024,  1.29494365],
       [ 4.45647132,  6.58538757,  3.45888573,  4.85576996,  3.65335245,
         1.00031379,  5.33281092,  2.37208034],
       [ 6.49055583,  9.41050947,  4.96552674,  7.14024332,  5.30476602,
         1.45932558,  7.50695161,  3.44921702],
       [ 8.52464034, 12.23563137,  6.47216775,  9.42471668,  6.95617959,
         1.91833738,  9.68109229,  4.5263537 ],
       [10.55872485, 15.06075327,  7.97880875, 11.70919004,  8.60759315,
         2.37734918, 11.85523298,  5.60349039],
       [12.59280936, 17.88587517,  9.48544976, 13.9936634 , 10.25900672,
         2.83636098, 14.02937366,  6.68062707],
       [14.62689387, 20.71099707, 10.99209077, 16.27813675, 11.91042029,
         3.29537278, 16.20351435,  7.75776375]])

In [292]: a.T @ b
Out[292]:
array([[18.3129396 , 23.86439854],
       [21.62792629, 27.55542361]])

In [293]: np.dot(a.T, b)
Out[293]:
array([[18.3129396 , 23.86439854],
       [21.62792629, 27.55542361]])

In [294]: x = np.arange(10)

In [295]: y = x.copy()

In [296]: x
Out[296]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [297]: y
Out[297]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [298]: np.outer(x, y)
Out[298]:
array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
       [ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27],
       [ 0,  4,  8, 12, 16, 20, 24, 28, 32, 36],
       [ 0,  5, 10, 15, 20, 25, 30, 35, 40, 45],
       [ 0,  6, 12, 18, 24, 30, 36, 42, 48, 54],
       [ 0,  7, 14, 21, 28, 35, 42, 49, 56, 63],
       [ 0,  8, 16, 24, 32, 40, 48, 56, 64, 72],
       [ 0,  9, 18, 27, 36, 45, 54, 63, 72, 81]])

In [299]: np.concatenate?

In [300]: np.concatenate([a, b], axis=0)
Out[300]:
array([[ 0.        ,  1.        ],
       [ 2.        ,  3.        ],
       [ 4.        ,  5.        ],
       [ 6.        ,  7.        ],
       [ 8.        ,  9.        ],
       [10.        , 11.        ],
       [12.        , 13.        ],
       [14.        , 15.        ],
       [ 0.62873995,  0.3883023 ],
       [ 0.47741718,  0.93514377],
       [ 0.30771678,  0.44560372],
       [ 0.85541343,  0.28682325],
       [ 0.47518147,  0.35052531],
       [ 0.14721571,  0.08229019],
       [ 0.10254079,  0.98452955],
       [ 0.32076137,  0.21780697]])

In [301]: np.concatenate([a, b], axis=1)
Out[301]:
array([[ 0.        ,  1.        ,  0.62873995,  0.3883023 ],
       [ 2.        ,  3.        ,  0.47741718,  0.93514377],
       [ 4.        ,  5.        ,  0.30771678,  0.44560372],
       [ 6.        ,  7.        ,  0.85541343,  0.28682325],
       [ 8.        ,  9.        ,  0.47518147,  0.35052531],
       [10.        , 11.        ,  0.14721571,  0.08229019],
       [12.        , 13.        ,  0.10254079,  0.98452955],
       [14.        , 15.        ,  0.32076137,  0.21780697]])

In [302]: np.vstack([a, b])
Out[302]:
array([[ 0.        ,  1.        ],
       [ 2.        ,  3.        ],
       [ 4.        ,  5.        ],
       [ 6.        ,  7.        ],
       [ 8.        ,  9.        ],
       [10.        , 11.        ],
       [12.        , 13.        ],
       [14.        , 15.        ],
       [ 0.62873995,  0.3883023 ],
       [ 0.47741718,  0.93514377],
       [ 0.30771678,  0.44560372],
       [ 0.85541343,  0.28682325],
       [ 0.47518147,  0.35052531],
       [ 0.14721571,  0.08229019],
       [ 0.10254079,  0.98452955],
       [ 0.32076137,  0.21780697]])

In [303]: np.hstack([a, b])
Out[303]:
array([[ 0.        ,  1.        ,  0.62873995,  0.3883023 ],
       [ 2.        ,  3.        ,  0.47741718,  0.93514377],
       [ 4.        ,  5.        ,  0.30771678,  0.44560372],
       [ 6.        ,  7.        ,  0.85541343,  0.28682325],
       [ 8.        ,  9.        ,  0.47518147,  0.35052531],
       [10.        , 11.        ,  0.14721571,  0.08229019],
       [12.        , 13.        ,  0.10254079,  0.98452955],
       [14.        , 15.        ,  0.32076137,  0.21780697]])

In [304]: np.hstack([b, a])
Out[304]:
array([[ 0.62873995,  0.3883023 ,  0.        ,  1.        ],
       [ 0.47741718,  0.93514377,  2.        ,  3.        ],
       [ 0.30771678,  0.44560372,  4.        ,  5.        ],
       [ 0.85541343,  0.28682325,  6.        ,  7.        ],
       [ 0.47518147,  0.35052531,  8.        ,  9.        ],
       [ 0.14721571,  0.08229019, 10.        , 11.        ],
       [ 0.10254079,  0.98452955, 12.        , 13.        ],
       [ 0.32076137,  0.21780697, 14.        , 15.        ]])

In [305]: np.stack?

In [306]: np.stack([a, b])
Out[306]:
array([[[ 0.        ,  1.        ],
        [ 2.        ,  3.        ],
        [ 4.        ,  5.        ],
        [ 6.        ,  7.        ],
        [ 8.        ,  9.        ],
        [10.        , 11.        ],
        [12.        , 13.        ],
        [14.        , 15.        ]],

       [[ 0.62873995,  0.3883023 ],
        [ 0.47741718,  0.93514377],
        [ 0.30771678,  0.44560372],
        [ 0.85541343,  0.28682325],
        [ 0.47518147,  0.35052531],
        [ 0.14721571,  0.08229019],
        [ 0.10254079,  0.98452955],
        [ 0.32076137,  0.21780697]]])

In [307]: c = np.stack([a, b])

In [308]: c.shape
Out[308]: (2, 8, 2)

In [309]: c.ndim
Out[309]: 3

In [310]: pwd
Out[310]: '/home/mspacek/SciPyCourse2020/notes/07_mpl_matrices'

In [311]: ls
07_mpl_matrices.md  07_mpl_matrices.pdf  surprise.npy  surprise.png

In [312]: np.load('surprise.npy')
Out[312]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [313]: np.load?

In [314]: a = np.load('surprise.npy')

In [315]: a
Out[315]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [316]: a = np.load('surprise.npy')

In [317]: a.shape
Out[317]: (1024, 1024)

In [318]: a
Out[318]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [319]: print(a)
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]

In [320]: a[::80, ::80]
Out[320]:
array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0, 182, 182,   0,   0,   0,   0,   0],
       [  0,   0,   0, 182, 182, 182, 182, 182, 182, 182,   0,   0,   0],
       [  0,   0, 182, 182, 182, 182, 182, 182, 182, 182, 182,   0,   0],
       [  0,   0, 182, 182,  99, 160, 182, 182, 182, 182, 182, 182,   0],
       [  0, 182, 182, 182,  99,  99, 182, 182,  99,  99, 182, 182, 182],
       [  0, 182, 182, 182,  99, 182, 182, 182, 182, 182, 182, 182, 182],
       [  0, 182, 182, 182, 182, 182, 182, 162, 162, 162, 182, 182, 182],
       [  0, 182, 182, 162, 162, 162, 162, 162, 162, 162, 162, 182, 182],
       [  0, 182, 182, 162, 162, 162, 162, 162, 162, 162, 162, 182, 182],
       [  0, 182, 182, 182, 182, 182, 182, 182, 162, 162, 182, 182, 182],
       [  0,   0, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]],
      dtype=uint8)

In [321]: print(a[::80, ::80])
[[  0   0   0   0   0   0   0   0   0   0   0   0   0]
 [  0   0   0   0   0   0 182 182   0   0   0   0   0]
 [  0   0   0 182 182 182 182 182 182 182   0   0   0]
 [  0   0 182 182 182 182 182 182 182 182 182   0   0]
 [  0   0 182 182  99 160 182 182 182 182 182 182   0]
 [  0 182 182 182  99  99 182 182  99  99 182 182 182]
 [  0 182 182 182  99 182 182 182 182 182 182 182 182]
 [  0 182 182 182 182 182 182 162 162 162 182 182 182]
 [  0 182 182 162 162 162 162 162 162 162 162 182 182]
 [  0 182 182 162 162 162 162 162 162 162 162 182 182]
 [  0 182 182 182 182 182 182 182 162 162 182 182 182]
 [  0   0 182 182 182 182 182 182 182 182 182 182   0]
 [  0   0   0   0   0   0   0   0   0   0   0   0   0]]

In [322]: f, ax = plt.subplots()

In [323]: im = ax.imshow(a)

In [324]: f.colorbar(im)
Out[324]: <matplotlib.colorbar.Colorbar at 0x7f797c04b828>

In [325]: im.set_cmap('gray')

In [326]: im.set_cmap('jet')

In [327]: im.set_cmap('spring')

In [328]: plt.close('all')

In [329]: f, axs = plt.subplot((1, 4))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-329-ed6c76e76461> in <module>
----> 1 f, axs = plt.subplot((1, 4))

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in subplot(*args, **kwargs)
   1074
   1075     fig = gcf()
-> 1076     a = fig.add_subplot(*args, **kwargs)
   1077     bbox = a.bbox
   1078     byebye = []

/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py in add_subplot(self, *args, **kwargs)
   1412                     self._axstack.remove(ax)
   1413
-> 1414             a = subplot_class_factory(projection_class)(self, *args, **kwargs)
   1415
   1416         return self._add_axes_internal(key, a)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_subplots.py in __init__(self, fig, *args, **kwargs)
     37             else:
     38                 try:
---> 39                     s = str(int(args[0]))
     40                     rows, cols, num = map(int, s)
     41                 except ValueError:

TypeError: int() argument must be a string, a bytes-like object or a number, not 'tuple'
> /usr/local/lib/python3.6/dist-packages/matplotlib/axes/_subplots.py(39)__init__()
     37             else:
     38                 try:
---> 39                     s = str(int(args[0]))
     40                     rows, cols, num = map(int, s)
     41                 except ValueError:

ipdb> c

In [330]: f, axs = plt.subplot(nrows=1, ncols=4)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-330-274c0e014d28> in <module>
----> 1 f, axs = plt.subplot(nrows=1, ncols=4)

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in subplot(*args, **kwargs)
   1074
   1075     fig = gcf()
-> 1076     a = fig.add_subplot(*args, **kwargs)
   1077     bbox = a.bbox
   1078     byebye = []

/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py in add_subplot(self, *args, **kwargs)
   1412                     self._axstack.remove(ax)
   1413
-> 1414             a = subplot_class_factory(projection_class)(self, *args, **kwargs)
   1415
   1416         return self._add_axes_internal(key, a)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_subplots.py in __init__(self, fig, *args, **kwargs)
     67
     68         # _axes_class is set in the subplot_class_factory
---> 69         self._axes_class.__init__(self, fig, self.figbox, **kwargs)
     70         # add a layout box to this, for both the full axis, and the poss
     71         # of the axis.  We need both because the axes may become smaller

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in __init__(self, fig, rect, facecolor, frameon, sharex, sharey, label, xscale, yscale, **kwargs)
    507             self.set_yscale(yscale)
    508
--> 509         self.update(kwargs)
    510
    511         if self.xaxis is not None:

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in update(self, props)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in <listcomp>(.0)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in _update_property(self, k, v)
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

AttributeError: 'AxesSubplot' object has no property 'nrows'
> /usr/local/lib/python3.6/dist-packages/matplotlib/artist.py(970)_update_property()
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

ipdb> c

In [331]: f, axs = plt.subplot(nrow=1, ncol=4)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-331-7bda9bfeaefc> in <module>
----> 1 f, axs = plt.subplot(nrow=1, ncol=4)

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in subplot(*args, **kwargs)
   1074
   1075     fig = gcf()
-> 1076     a = fig.add_subplot(*args, **kwargs)
   1077     bbox = a.bbox
   1078     byebye = []

/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py in add_subplot(self, *args, **kwargs)
   1412                     self._axstack.remove(ax)
   1413
-> 1414             a = subplot_class_factory(projection_class)(self, *args, **kwargs)
   1415
   1416         return self._add_axes_internal(key, a)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_subplots.py in __init__(self, fig, *args, **kwargs)
     67
     68         # _axes_class is set in the subplot_class_factory
---> 69         self._axes_class.__init__(self, fig, self.figbox, **kwargs)
     70         # add a layout box to this, for both the full axis, and the poss
     71         # of the axis.  We need both because the axes may become smaller

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in __init__(self, fig, rect, facecolor, frameon, sharex, sharey, label, xscale, yscale, **kwargs)
    507             self.set_yscale(yscale)
    508
--> 509         self.update(kwargs)
    510
    511         if self.xaxis is not None:

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in update(self, props)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in <listcomp>(.0)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in _update_property(self, k, v)
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

AttributeError: 'AxesSubplot' object has no property 'nrow'
> /usr/local/lib/python3.6/dist-packages/matplotlib/artist.py(970)_update_property()
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

ipdb> c

In [332]: plt.subplots?

In [333]: f, axs = plt.subplots(nrows=1, ncols=4)

In [334]: axs[0, 0]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-334-81842154f21f> in <module>
----> 1 axs[0, 0]

IndexError: too many indices for array
> <ipython-input-334-81842154f21f>(1)<module>()
----> 1 axs[0, 0]

ipdb> c

In [335]: type(axs)
Out[335]: numpy.ndarray

In [336]: axs.ndim
Out[336]: 1

In [337]: axs.shape
Out[337]: (4,)

In [338]: axs[0]
Out[338]: <matplotlib.axes._subplots.AxesSubplot at 0x7f796743f9b0>

In [339]: axs[0]
Out[339]: <matplotlib.axes._subplots.AxesSubplot at 0x7f796743f9b0>

In [340]: axs[0].imshow(a)
Out[340]: <matplotlib.image.AxesImage at 0x7f797ff8c0b8>

In [341]: axs[1].imshow(np.rot90(a, 1))
Out[341]: <matplotlib.image.AxesImage at 0x7f797f0baa58>

In [342]: axs[2].imshow(np.rot90(a, 2))
Out[342]: <matplotlib.image.AxesImage at 0x7f796493a748>

In [343]: axs[3].imshow(np.rot90(a, 3))
Out[343]: <matplotlib.image.AxesImage at 0x7f79a16546d8>

In [344]: f, ax = plt.subplots()

In [345]: ax.imshow(a.T)
Out[345]: <matplotlib.image.AxesImage at 0x7f797d020a20>

In [346]: np.tile?

In [347]: np.tile(a, (2, 2))
Out[347]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [348]: aa = np.tile(a, (2, 2))

In [349]: aa.shape
Out[349]: (2048, 2048)

In [350]: f, ax = plt.subplots()

In [351]: ax.imshow(aa)
Out[351]: <matplotlib.image.AxesImage at 0x7f797f35c208>

In [352]: plt.gca?
Signature: plt.gca(**kwargs)
Docstring:
Get the current :class:`~matplotlib.axes.Axes` instance on the
current figure matching the given keyword args, or create one.

Examples
--------
To get the current polar axes on the current figure::

    plt.gca(projection='polar')

If the current axes doesn't exist, or isn't a polar one, the appropriate
axes will be created and then returned.

See Also
--------
matplotlib.figure.Figure.gca : The figure's gca method.
File:      /usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py
Type:      function

In [353]:

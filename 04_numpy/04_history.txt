Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: def norm(vals):
   ...:     """Return values normalized by the sum of the values"""
   ...:     s = sum(vals)
   ...:     out = []
   ...:     for val in vals:
   ...:         out.append(val / s)
   ...:     return out
   ...:

In [2]: vals = [1, 6, 0, 3]

In [3]: norm(vals)
Out[3]: [0.1, 0.6, 0.0, 0.3]

In [4]: sum(norm(vals))
Out[4]: 1.0

In [5]: def norm(vals):
   ...:     """Return values normalized by the sum of the values"""
   ...:     s = sum(vals)
   ...:     return [ val/s for val in vals ]
   ...:

In [6]: norm(vals)
Out[6]: [0.1, 0.6, 0.0, 0.3]

In [7]: vals = (1, 6, 0, 3)

In [8]: norm(vals)
Out[8]: [0.1, 0.6, 0.0, 0.3]

In [9]: def norm(vals):
   ...:     """Return values normalized by the sum of the values"""
   ...:     s = sum(vals)
   ...:     return ( val/s for val in vals )
   ...:

In [10]: norm(vals)
Out[10]: <generator object norm.<locals>.<genexpr> at 0x7f5090528ca8>

In [11]: def norm(vals):
    ...:     """Return values normalized by the sum of the values"""
    ...:     s = sum(vals)
    ...:     return tuple[ val/s for val in vals ]
    ...:
    ...:
  File "<ipython-input-11-e6fb5f2afca2>", line 4
    return tuple[ val/s for val in vals ]
                          ^
SyntaxError: invalid syntax


In [12]: def norm(vals):
    ...:     """Return values normalized by the sum of the values"""
    ...:     s = sum(vals)
    ...:     return tuple([ val/s for val in vals ])
    ...:

In [13]: norm(vals)
Out[13]: (0.1, 0.6, 0.0, 0.3)

In [14]: def norm(vals):
    ...:     """Return values normalized by the sum of the values"""
    ...:     s = sum(vals)
    ...:     return tuple( val/s for val in vals )
    ...:
    ...:

In [15]: norm(vals)
Out[15]: (0.1, 0.6, 0.0, 0.3)

In [16]: def norm (x):
    ...:     """accepts a list of values of arbitrary length N,
    ...:     and returns a list of the normalized values """
    ...:     lst=[]
    ...:     for i in list(x):
    ...:         lst.append(i/sum(x))
    ...:     print (lst)
    ...:

In [17]: norm(vals)
[0.1, 0.6, 0.0, 0.3]

In [18]: data = [[9.1, 2.1, 0.9, 1.5, 1.1],
    ...:         [4.4, 2.2, 3.3, 5.5, 6.6],
    ...:         [0.1, 0.2, 0.3, 0.4, 0.5]]
    ...:
    ...: # append to a list with a for loop:
    ...: normdata = []
    ...: for row in data:
    ...:     normdata.append(norm(row))
    ...:
[0.6190476190476191, 0.14285714285714288, 0.06122448979591837, 0.10204081632653061, 0.07482993197278913]
[0.2, 0.1, 0.15, 0.25, 0.3]
[0.06666666666666667, 0.13333333333333333, 0.19999999999999998, 0.26666666666666666, 0.3333333333333333]

In [19]: normdata
Out[19]: [None, None, None]

In [20]: def norm(vals):
    ...:     """Return values normalized by the sum of the values"""
    ...:     s = sum(vals)
    ...:     out = []
    ...:     for val in vals:
    ...:         out.append(val / s)
    ...:     return out
    ...:

In [21]: data = [[9.1, 2.1, 0.9, 1.5, 1.1],
    ...:         [4.4, 2.2, 3.3, 5.5, 6.6],
    ...:         [0.1, 0.2, 0.3, 0.4, 0.5]]
    ...:
    ...: # append to a list with a for loop:
    ...: normdata = []
    ...: for row in data:
    ...:     normdata.append(norm(row))
    ...:

In [22]: data
Out[22]:
[[9.1, 2.1, 0.9, 1.5, 1.1],
 [4.4, 2.2, 3.3, 5.5, 6.6],
 [0.1, 0.2, 0.3, 0.4, 0.5]]

In [23]: normdata
Out[23]:
[[0.6190476190476191,
  0.14285714285714288,
  0.06122448979591837,
  0.10204081632653061,
  0.07482993197278913],
 [0.2, 0.1, 0.15, 0.25, 0.3],
 [0.06666666666666667,
  0.13333333333333333,
  0.19999999999999998,
  0.26666666666666666,
  0.3333333333333333]]

In [24]: for row in normdata:
    ...:     print(sum(row))
    ...:
1.0
1.0
1.0

In [25]: [ sum(row) for row in normdata ]
Out[25]: [1.0, 1.0, 1.0]

In [26]: [ norm(row) for row in data ]
Out[26]:
[[0.6190476190476191,
  0.14285714285714288,
  0.06122448979591837,
  0.10204081632653061,
  0.07482993197278913],
 [0.2, 0.1, 0.15, 0.25, 0.3],
 [0.06666666666666667,
  0.13333333333333333,
  0.19999999999999998,
  0.26666666666666666,
  0.3333333333333333]]

In [27]: x = [2, 3, 4, 5, 0, 0, 0, 2, 2, 0]
    ...: y = [0, 4, 2, 4, 5, 1, 0, 5, 3, 5]

In [28]:

In [28]: x
Out[28]: [2, 3, 4, 5, 0, 0, 0, 2, 2, 0]

In [29]: y
Out[29]: [0, 4, 2, 4, 5, 1, 0, 5, 3, 5]

In [30]: def vectorsum(x, y):
    ...:     """Return vector sum of x and y"""
    ...:     s = []
    ...:     for xx, yy in zip(x, y):
    ...:         s.append(xx + yy)
    ...:     return s
    ...:

In [31]: vectorsum(x, y)
Out[31]: [2, 7, 6, 9, 5, 1, 0, 7, 5, 5]

In [32]: def vectorsum(x, y):
    ...:     """Return vector sum of x and y"""
    ...:     return [ xx + yy for xx, yy in zip(x, y) ]
    ...:

In [33]: vectorsum(x, y)
Out[33]: [2, 7, 6, 9, 5, 1, 0, 7, 5, 5]

In [34]: y
Out[34]: [0, 4, 2, 4, 5, 1, 0, 5, 3, 5]

In [35]: z = [1, 2, 3]

In [36]: x
Out[36]: [2, 3, 4, 5, 0, 0, 0, 2, 2, 0]

In [37]: z
Out[37]: [1, 2, 3]

In [38]: vectorsum(x, z)
Out[38]: [3, 5, 7]

In [39]: def normd(keyvals):
    ...:     """Return dict of key:value pairs normalized by the sum
    ...:     of the values"""
    ...:     s = sum(keyvals.values())
    ...:     out = {}
    ...:     for key, val in keyvals.items():
    ...:         out[key] = val / s
    ...:     return out
    ...:

In [40]: normd({'a':1, 'b':6, 'c':0, 'd':3})
Out[40]: {'a': 0.1, 'b': 0.6, 'c': 0.0, 'd': 0.3}

In [41]: def normd(keyvals):
    ...:     """Return dict of key:value pairs normalized by
    ...:     the sum of the values"""
    ...:     s = sum(keyvals.values())
    ...:     return { key:val/s for key, val in keyvals.items() }
    ...:

In [42]: normd({'a':1, 'b':6, 'c':0, 'd':3})
Out[42]: {'a': 0.1, 'b': 0.6, 'c': 0.0, 'd': 0.3}

In [43]: import numpy as np

In [44]: mylist = [True, 'hello', 1, 5.6]

In [45]: mylist
Out[45]: [True, 'hello', 1, 5.6]

In [46]: a = np.array([1, 2, 3])

In [47]: a
Out[47]: array([1, 2, 3])

In [48]: a = np.array((1, 2, 3))

In [49]: np.arange?

In [50]: list(range(10))
Out[50]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [51]: np.arange(10)
Out[51]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [52]: np.zeros(10)
Out[52]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

In [53]: np.ones(10)
Out[53]: array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])

In [54]: np.random.random(10)
Out[54]:
array([0.42470224, 0.71475669, 0.44903274, 0.81963517, 0.2382266 ,
       0.95838689, 0.3353022 , 0.42603753, 0.5276712 , 0.40132908])

In [55]: np.random.random(10)
Out[55]:
array([0.67586729, 0.37087433, 0.86211649, 0.62892383, 0.35467166,
       0.38696863, 0.08304622, 0.24369336, 0.9229869 , 0.88245478])

In [56]: np.random.random(10)
Out[56]:
array([0.34721504, 0.71995467, 0.06095951, 0.48829646, 0.81849155,
       0.42036256, 0.34460273, 0.82805917, 0.1318523 , 0.24416942])

In [57]: np.random.random(10)
Out[57]:
array([0.49350668, 0.94244388, 0.22977089, 0.65321738, 0.96844919,
       0.13262136, 0.02412077, 0.57152076, 0.72282821, 0.91112354])

In [58]: np.tile?

In [59]: np.tile(5, 10)
Out[59]: array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5])

In [60]: np.tile(3.14159, 10)
Out[60]:
array([3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159, 3.14159,
       3.14159, 3.14159, 3.14159])

In [61]: np.tile([1, 2], 10)
Out[61]: array([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])

In [62]: a = np.zeros(10)

In [63]: a
Out[63]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

In [64]: a.fill(7)

In [65]: a
Out[65]: array([7., 7., 7., 7., 7., 7., 7., 7., 7., 7.])

In [66]: a
Out[66]: array([7., 7., 7., 7., 7., 7., 7., 7., 7., 7.])

In [67]: a = np.random.random(10)

In [68]: a.mean?
Docstring:
a.mean(axis=None, dtype=None, out=None, keepdims=False)

Returns the average of the array elements along given axis.

Refer to `numpy.mean` for full documentation.

See Also
--------
numpy.mean : equivalent function
Type:      builtin_function_or_method

In [69]: a
Out[69]:
array([0.11847339, 0.47031722, 0.93040956, 0.32213448, 0.04842708,
       0.01013189, 0.29119902, 0.56642906, 0.36359675, 0.39559293])

In [70]: a.mean()
Out[70]: 0.3516711378226803

In [71]: a = np.random.random(100)

In [72]: a.mean()
Out[72]: 0.46044272818951315

In [73]: a.max()
Out[73]: 0.9941103940900615

In [74]: a.min()
Out[74]: 0.002284955877363881

In [75]: a
Out[75]:
array([0.27235042, 0.61661766, 0.8260855 , 0.51986329, 0.3423677 ,
       0.89002298, 0.83179516, 0.05203812, 0.54566839, 0.77640113,
       0.20505712, 0.50358899, 0.7790167 , 0.11065   , 0.75362413,
       0.12414806, 0.45406531, 0.25167615, 0.28301685, 0.59205276,
       0.15875564, 0.78560124, 0.40070976, 0.73117184, 0.31042597,
       0.94114923, 0.41337894, 0.24625936, 0.59949479, 0.05852085,
       0.52242713, 0.36065982, 0.05470698, 0.99411039, 0.15446696,
       0.23492635, 0.48810043, 0.16131485, 0.23328553, 0.76545735,
       0.45889168, 0.84266873, 0.80973112, 0.26861052, 0.25854722,
       0.1947571 , 0.81880527, 0.78984503, 0.65912273, 0.26075632,
       0.52766824, 0.55261971, 0.90940946, 0.13701394, 0.96720383,
       0.37184007, 0.26573929, 0.00228496, 0.46320691, 0.93125974,
       0.10072833, 0.42136633, 0.98158919, 0.73149729, 0.56915889,
       0.26683978, 0.19222617, 0.60034047, 0.19567972, 0.60464941,
       0.38880048, 0.088306  , 0.92756301, 0.50673594, 0.90894205,
       0.61001658, 0.89468169, 0.59913284, 0.4197917 , 0.19684403,
       0.09674097, 0.41026731, 0.12624894, 0.27455778, 0.02061197,
       0.13857556, 0.59791829, 0.74507994, 0.13530173, 0.12822593,
       0.47820982, 0.02777628, 0.33914397, 0.66396867, 0.49157806,
       0.96487206, 0.2902861 , 0.32130034, 0.53457914, 0.21912833])

In [76]: a
Out[76]:
array([0.27235042, 0.61661766, 0.8260855 , 0.51986329, 0.3423677 ,
       0.89002298, 0.83179516, 0.05203812, 0.54566839, 0.77640113,
       0.20505712, 0.50358899, 0.7790167 , 0.11065   , 0.75362413,
       0.12414806, 0.45406531, 0.25167615, 0.28301685, 0.59205276,
       0.15875564, 0.78560124, 0.40070976, 0.73117184, 0.31042597,
       0.94114923, 0.41337894, 0.24625936, 0.59949479, 0.05852085,
       0.52242713, 0.36065982, 0.05470698, 0.99411039, 0.15446696,
       0.23492635, 0.48810043, 0.16131485, 0.23328553, 0.76545735,
       0.45889168, 0.84266873, 0.80973112, 0.26861052, 0.25854722,
       0.1947571 , 0.81880527, 0.78984503, 0.65912273, 0.26075632,
       0.52766824, 0.55261971, 0.90940946, 0.13701394, 0.96720383,
       0.37184007, 0.26573929, 0.00228496, 0.46320691, 0.93125974,
       0.10072833, 0.42136633, 0.98158919, 0.73149729, 0.56915889,
       0.26683978, 0.19222617, 0.60034047, 0.19567972, 0.60464941,
       0.38880048, 0.088306  , 0.92756301, 0.50673594, 0.90894205,
       0.61001658, 0.89468169, 0.59913284, 0.4197917 , 0.19684403,
       0.09674097, 0.41026731, 0.12624894, 0.27455778, 0.02061197,
       0.13857556, 0.59791829, 0.74507994, 0.13530173, 0.12822593,
       0.47820982, 0.02777628, 0.33914397, 0.66396867, 0.49157806,
       0.96487206, 0.2902861 , 0.32130034, 0.53457914, 0.21912833])

In [77]: a
Out[77]:
array([0.27235042, 0.61661766, 0.8260855 , 0.51986329, 0.3423677 ,
       0.89002298, 0.83179516, 0.05203812, 0.54566839, 0.77640113,
       0.20505712, 0.50358899, 0.7790167 , 0.11065   , 0.75362413,
       0.12414806, 0.45406531, 0.25167615, 0.28301685, 0.59205276,
       0.15875564, 0.78560124, 0.40070976, 0.73117184, 0.31042597,
       0.94114923, 0.41337894, 0.24625936, 0.59949479, 0.05852085,
       0.52242713, 0.36065982, 0.05470698, 0.99411039, 0.15446696,
       0.23492635, 0.48810043, 0.16131485, 0.23328553, 0.76545735,
       0.45889168, 0.84266873, 0.80973112, 0.26861052, 0.25854722,
       0.1947571 , 0.81880527, 0.78984503, 0.65912273, 0.26075632,
       0.52766824, 0.55261971, 0.90940946, 0.13701394, 0.96720383,
       0.37184007, 0.26573929, 0.00228496, 0.46320691, 0.93125974,
       0.10072833, 0.42136633, 0.98158919, 0.73149729, 0.56915889,
       0.26683978, 0.19222617, 0.60034047, 0.19567972, 0.60464941,
       0.38880048, 0.088306  , 0.92756301, 0.50673594, 0.90894205,
       0.61001658, 0.89468169, 0.59913284, 0.4197917 , 0.19684403,
       0.09674097, 0.41026731, 0.12624894, 0.27455778, 0.02061197,
       0.13857556, 0.59791829, 0.74507994, 0.13530173, 0.12822593,
       0.47820982, 0.02777628, 0.33914397, 0.66396867, 0.49157806,
       0.96487206, 0.2902861 , 0.32130034, 0.53457914, 0.21912833])

In [78]: a
Out[78]:
array([0.27235042, 0.61661766, 0.8260855 , 0.51986329, 0.3423677 ,
       0.89002298, 0.83179516, 0.05203812, 0.54566839, 0.77640113,
       0.20505712, 0.50358899, 0.7790167 , 0.11065   , 0.75362413,
       0.12414806, 0.45406531, 0.25167615, 0.28301685, 0.59205276,
       0.15875564, 0.78560124, 0.40070976, 0.73117184, 0.31042597,
       0.94114923, 0.41337894, 0.24625936, 0.59949479, 0.05852085,
       0.52242713, 0.36065982, 0.05470698, 0.99411039, 0.15446696,
       0.23492635, 0.48810043, 0.16131485, 0.23328553, 0.76545735,
       0.45889168, 0.84266873, 0.80973112, 0.26861052, 0.25854722,
       0.1947571 , 0.81880527, 0.78984503, 0.65912273, 0.26075632,
       0.52766824, 0.55261971, 0.90940946, 0.13701394, 0.96720383,
       0.37184007, 0.26573929, 0.00228496, 0.46320691, 0.93125974,
       0.10072833, 0.42136633, 0.98158919, 0.73149729, 0.56915889,
       0.26683978, 0.19222617, 0.60034047, 0.19567972, 0.60464941,
       0.38880048, 0.088306  , 0.92756301, 0.50673594, 0.90894205,
       0.61001658, 0.89468169, 0.59913284, 0.4197917 , 0.19684403,
       0.09674097, 0.41026731, 0.12624894, 0.27455778, 0.02061197,
       0.13857556, 0.59791829, 0.74507994, 0.13530173, 0.12822593,
       0.47820982, 0.02777628, 0.33914397, 0.66396867, 0.49157806,
       0.96487206, 0.2902861 , 0.32130034, 0.53457914, 0.21912833])

In [79]: a
Out[79]:
array([0.27235042, 0.61661766, 0.8260855 , 0.51986329, 0.3423677 ,
       0.89002298, 0.83179516, 0.05203812, 0.54566839, 0.77640113,
       0.20505712, 0.50358899, 0.7790167 , 0.11065   , 0.75362413,
       0.12414806, 0.45406531, 0.25167615, 0.28301685, 0.59205276,
       0.15875564, 0.78560124, 0.40070976, 0.73117184, 0.31042597,
       0.94114923, 0.41337894, 0.24625936, 0.59949479, 0.05852085,
       0.52242713, 0.36065982, 0.05470698, 0.99411039, 0.15446696,
       0.23492635, 0.48810043, 0.16131485, 0.23328553, 0.76545735,
       0.45889168, 0.84266873, 0.80973112, 0.26861052, 0.25854722,
       0.1947571 , 0.81880527, 0.78984503, 0.65912273, 0.26075632,
       0.52766824, 0.55261971, 0.90940946, 0.13701394, 0.96720383,
       0.37184007, 0.26573929, 0.00228496, 0.46320691, 0.93125974,
       0.10072833, 0.42136633, 0.98158919, 0.73149729, 0.56915889,
       0.26683978, 0.19222617, 0.60034047, 0.19567972, 0.60464941,
       0.38880048, 0.088306  , 0.92756301, 0.50673594, 0.90894205,
       0.61001658, 0.89468169, 0.59913284, 0.4197917 , 0.19684403,
       0.09674097, 0.41026731, 0.12624894, 0.27455778, 0.02061197,
       0.13857556, 0.59791829, 0.74507994, 0.13530173, 0.12822593,
       0.47820982, 0.02777628, 0.33914397, 0.66396867, 0.49157806,
       0.96487206, 0.2902861 , 0.32130034, 0.53457914, 0.21912833])

In [80]: a.mean()
Out[80]: 0.46044272818951315

In [81]: a.mean()
Out[81]: 0.46044272818951315

In [82]: a.mean()
Out[82]: 0.46044272818951315

In [83]: a.mean()
Out[83]: 0.46044272818951315

In [84]: a = np.random.random(100)

In [85]: a
Out[85]:
array([0.65348328, 0.53766826, 0.52188808, 0.31112131, 0.44004353,
       0.50534761, 0.80239794, 0.2297426 , 0.65622916, 0.09711643,
       0.89147574, 0.06684908, 0.81666334, 0.22871364, 0.5028697 ,
       0.740602  , 0.25985634, 0.55775315, 0.36017856, 0.59849941,
       0.00732274, 0.7861806 , 0.2934773 , 0.62617483, 0.06232405,
       0.52684565, 0.15320521, 0.47404479, 0.72789788, 0.42315852,
       0.70607633, 0.30842783, 0.61300055, 0.3270748 , 0.98280856,
       0.14760494, 0.90715293, 0.79663303, 0.80509349, 0.43402962,
       0.64587312, 0.83665768, 0.36469029, 0.91630411, 0.13023883,
       0.39065564, 0.47559603, 0.61157125, 0.73782981, 0.65880158,
       0.3080322 , 0.82810109, 0.87247509, 0.11906174, 0.3103522 ,
       0.56807683, 0.21230212, 0.38573926, 0.75167579, 0.89124342,
       0.84700665, 0.98795781, 0.91682425, 0.45254441, 0.01993608,
       0.0571538 , 0.9292289 , 0.27099738, 0.12856197, 0.44070663,
       0.17700529, 0.31622041, 0.77466103, 0.03858835, 0.15912303,
       0.2863614 , 0.27516039, 0.11340337, 0.58266819, 0.37592228,
       0.33782058, 0.17189184, 0.09454029, 0.15216951, 0.14652339,
       0.39333039, 0.83744263, 0.19355389, 0.74968423, 0.10358083,
       0.16433556, 0.24180315, 0.69315984, 0.61197918, 0.98463848,
       0.3538577 , 0.94644677, 0.11275256, 0.02874114, 0.48687036])

In [86]: a.mean()
Out[86]: 0.4685746482423184

In [87]: a.mean()
Out[87]: 0.4685746482423184

In [88]: a = np.random.random(10)

In [89]: a
Out[89]:
array([0.60703085, 0.6153819 , 0.71304621, 0.97650744, 0.43759541,
       0.17475533, 0.7143706 , 0.03272105, 0.75028502, 0.29855718])

In [90]: b = a.copy()

In [91]: a
Out[91]:
array([0.60703085, 0.6153819 , 0.71304621, 0.97650744, 0.43759541,
       0.17475533, 0.7143706 , 0.03272105, 0.75028502, 0.29855718])

In [92]: b
Out[92]:
array([0.60703085, 0.6153819 , 0.71304621, 0.97650744, 0.43759541,
       0.17475533, 0.7143706 , 0.03272105, 0.75028502, 0.29855718])

In [93]: a == b
Out[93]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True])

In [94]: a is b
Out[94]: False

In [95]: a
Out[95]:
array([0.60703085, 0.6153819 , 0.71304621, 0.97650744, 0.43759541,
       0.17475533, 0.7143706 , 0.03272105, 0.75028502, 0.29855718])

In [96]: a.sort?

In [97]: a.sort()

In [98]: a
Out[98]:
array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085,
       0.6153819 , 0.71304621, 0.7143706 , 0.75028502, 0.97650744])

In [99]: a
Out[99]:
array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085,
       0.6153819 , 0.71304621, 0.7143706 , 0.75028502, 0.97650744])

In [100]: b
Out[100]:
array([0.60703085, 0.6153819 , 0.71304621, 0.97650744, 0.43759541,
       0.17475533, 0.7143706 , 0.03272105, 0.75028502, 0.29855718])

In [101]: a == b
Out[101]:
array([False, False, False, False, False, False, False, False,  True,
       False])

In [102]: len(a)
Out[102]: 10

In [103]: a.shape
Out[103]: (10,)

In [104]: type(a.shape)
Out[104]: tuple

In [105]: a.shape
Out[105]: (10,)

In [106]: len(a)
Out[106]: 10

In [107]: a.ndim
Out[107]: 1

In [108]: len(a)
Out[108]: 10

In [109]: a
Out[109]:
array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085,
       0.6153819 , 0.71304621, 0.7143706 , 0.75028502, 0.97650744])

In [110]: a[0]
Out[110]: 0.032721052086083335

In [111]: a[1]
Out[111]: 0.17475533364345375

In [112]: a[-1]
Out[112]: 0.9765074358274928

In [113]: a[-2]
Out[113]: 0.7502850246326456

In [114]: a[0:5]
Out[114]: array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085])

In [115]: a[:5]
Out[115]: array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085])

In [116]: a[::2]
Out[116]: array([0.03272105, 0.29855718, 0.60703085, 0.71304621, 0.75028502])

In [117]: a[5:10]
Out[117]: array([0.6153819 , 0.71304621, 0.7143706 , 0.75028502, 0.97650744])

In [118]: a[5:10] = 7

In [119]: a
Out[119]:
array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085,
       7.        , 7.        , 7.        , 7.        , 7.        ])

In [120]: a[5:] = 7

In [121]: a
Out[121]:
array([0.03272105, 0.17475533, 0.29855718, 0.43759541, 0.60703085,
       7.        , 7.        , 7.        , 7.        , 7.        ])

In [122]: a.fill(8)

In [123]: a
Out[123]: array([8., 8., 8., 8., 8., 8., 8., 8., 8., 8.])

In [124]: a = np.random.random(10)

In [125]: a
Out[125]:
array([0.47739899, 0.28770605, 0.05821869, 0.72509197, 0.44487698,
       0.81576245, 0.32776249, 0.60649125, 0.9806095 , 0.82469547])

In [126]: a[:] = 8

In [127]: a
Out[127]: array([8., 8., 8., 8., 8., 8., 8., 8., 8., 8.])

In [128]: a = 8

In [129]: a
Out[129]: 8

In [130]: a = np.random.random(10)

In [131]: a[:] = 8

In [132]: a = 8

In [133]: whos
Variable    Type        Data/Info
---------------------------------
a           int         8
b           ndarray     10: 10 elems, type `float64`, 80 bytes
data        list        n=3
mylist      list        n=4
norm        function    <function norm at 0x7f50bc407378>
normd       function    <function normd at 0x7f50bc4b9400>
normdata    list        n=3
np          module      <module 'numpy' from '/us<...>kages/numpy/__init__.py'>
plt         module      <module 'matplotlib.pyplo<...>es/matplotlib/pyplot.py'>
row         list        n=5
vals        tuple       n=4
vectorsum   function    <function vectorsum at 0x7f50bd87a378>
x           list        n=10
y           list        n=10
z           list        n=3

In [134]: a = np.random.random(10)

In [135]: whos
Variable    Type        Data/Info
---------------------------------
a           ndarray     10: 10 elems, type `float64`, 80 bytes
b           ndarray     10: 10 elems, type `float64`, 80 bytes
data        list        n=3
mylist      list        n=4
norm        function    <function norm at 0x7f50bc407378>
normd       function    <function normd at 0x7f50bc4b9400>
normdata    list        n=3
np          module      <module 'numpy' from '/us<...>kages/numpy/__init__.py'>
plt         module      <module 'matplotlib.pyplo<...>es/matplotlib/pyplot.py'>
row         list        n=5
vals        tuple       n=4
vectorsum   function    <function vectorsum at 0x7f50bd87a378>
x           list        n=10
y           list        n=10
z           list        n=3

In [136]: a = 8

In [137]: whos
Variable    Type        Data/Info
---------------------------------
a           int         8
b           ndarray     10: 10 elems, type `float64`, 80 bytes
data        list        n=3
mylist      list        n=4
norm        function    <function norm at 0x7f50bc407378>
normd       function    <function normd at 0x7f50bc4b9400>
normdata    list        n=3
np          module      <module 'numpy' from '/us<...>kages/numpy/__init__.py'>
plt         module      <module 'matplotlib.pyplo<...>es/matplotlib/pyplot.py'>
row         list        n=5
vals        tuple       n=4
vectorsum   function    <function vectorsum at 0x7f50bd87a378>
x           list        n=10
y           list        n=10
z           list        n=3

In [138]: l = []

In [139]: l = list(range(10))

In [140]: l
Out[140]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [141]: l[:5] = 100
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-141-7ef21f512992> in <module>
----> 1 l[:5] = 100

TypeError: can only assign an iterable
> <ipython-input-141-7ef21f512992>(1)<module>()
----> 1 l[:5] = 100

ipdb> c

In [142]: l[-1] = 100

In [143]: l
Out[143]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 100]

In [144]: a = np.random.random(10)

In [145]: a
Out[145]:
array([0.76481441, 0.08900759, 0.75053337, 0.02347123, 0.75317058,
       0.66678545, 0.74657378, 0.4000122 , 0.9725807 , 0.10397438])

In [146]: a[0]
Out[146]: 0.7648144074491644

In [147]: a[::2]
Out[147]: array([0.76481441, 0.75053337, 0.75317058, 0.74657378, 0.9725807 ])

In [148]: a
Out[148]:
array([0.76481441, 0.08900759, 0.75053337, 0.02347123, 0.75317058,
       0.66678545, 0.74657378, 0.4000122 , 0.9725807 , 0.10397438])

In [149]: i = [3, 7, 5, 2, 7]

In [150]: a[i]
Out[150]: array([0.02347123, 0.4000122 , 0.66678545, 0.75053337, 0.4000122 ])

In [151]: a[0]
Out[151]: 0.7648144074491644

In [152]: a[i]
Out[152]: array([0.02347123, 0.4000122 , 0.66678545, 0.75053337, 0.4000122 ])

In [153]: l = list(range(10))

In [154]: l
Out[154]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [155]: l[i]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-155-021c72463b38> in <module>
----> 1 l[i]

TypeError: list indices must be integers or slices, not list
> <ipython-input-155-021c72463b38>(1)<module>()
----> 1 l[i]

ipdb> c

In [156]: l[0]
Out[156]: 0

In [157]: l[1]
Out[157]: 1

In [158]: l[:5]
Out[158]: [0, 1, 2, 3, 4]

In [159]: a[i]
Out[159]: array([0.02347123, 0.4000122 , 0.66678545, 0.75053337, 0.4000122 ])

In [160]: a
Out[160]:
array([0.76481441, 0.08900759, 0.75053337, 0.02347123, 0.75317058,
       0.66678545, 0.74657378, 0.4000122 , 0.9725807 , 0.10397438])

In [161]: a >= 0.5
Out[161]:
array([ True, False,  True, False,  True,  True,  True, False,  True,
       False])

In [162]: b = a >= 0.5

In [163]: type(b)
Out[163]: numpy.ndarray

In [164]: a
Out[164]:
array([0.76481441, 0.08900759, 0.75053337, 0.02347123, 0.75317058,
       0.66678545, 0.74657378, 0.4000122 , 0.9725807 , 0.10397438])

In [165]: b
Out[165]:
array([ True, False,  True, False,  True,  True,  True, False,  True,
       False])

In [166]: a[b]
Out[166]:
array([0.76481441, 0.75053337, 0.75317058, 0.66678545, 0.74657378,
       0.9725807 ])

In [167]: b = a >= 0.5

In [168]: b
Out[168]:
array([ True, False,  True, False,  True,  True,  True, False,  True,
       False])

In [169]: a[b]
Out[169]:
array([0.76481441, 0.75053337, 0.75317058, 0.66678545, 0.74657378,
       0.9725807 ])

In [170]: a[a >= 0.5]
Out[170]:
array([0.76481441, 0.75053337, 0.75317058, 0.66678545, 0.74657378,
       0.9725807 ])

In [171]: a = np.arange(10)

In [172]: a[8] = 100

In [173]: a
Out[173]: array([  0,   1,   2,   3,   4,   5,   6,   7, 100,   9])

In [174]: a == 100
Out[174]:
array([False, False, False, False, False, False, False, False,  True,
       False])

In [175]: a[a == 100]
Out[175]: array([100])

In [176]: a = np.random.random(10)

In [177]: i = [3, 7, 5, 2, 7]

In [178]: a[i]
Out[178]: array([0.95013727, 0.26743549, 0.13740781, 0.22330498, 0.26743549])

In [179]: b = a >= 0.5

In [180]: b
Out[180]:
array([False, False, False,  True,  True, False,  True, False, False,
       False])

In [181]: a[b]
Out[181]: array([0.95013727, 0.63595934, 0.876457  ])

In [182]: len(b)
Out[182]: 10

In [183]: len(a)
Out[183]: 10

In [184]: newb = b[:3]

In [185]: newb
Out[185]: array([False, False, False])

In [186]: len(newb)
Out[186]: 3

In [187]: len(a)
Out[187]: 10

In [188]: a[newb]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-188-228f9c64e0fe> in <module>
----> 1 a[newb]

IndexError: boolean index did not match indexed array along dimension 0; dimension is 10 but corresponding boolean dimension is 3
> <ipython-input-188-228f9c64e0fe>(1)<module>()
----> 1 a[newb]

ipdb> a
ipdb> c

In [189]: a
Out[189]:
array([0.15988895, 0.3715415 , 0.22330498, 0.95013727, 0.63595934,
       0.13740781, 0.876457  , 0.26743549, 0.10180253, 0.38283367])

In [190]: b
Out[190]:
array([False, False, False,  True,  True, False,  True, False, False,
       False])

In [191]: a[b]
Out[191]: array([0.95013727, 0.63595934, 0.876457  ])

In [192]: a[i]
Out[192]: array([0.95013727, 0.26743549, 0.13740781, 0.22330498, 0.26743549])

In [193]: i
Out[193]: [3, 7, 5, 2, 7]

In [194]: a
Out[194]:
array([0.15988895, 0.3715415 , 0.22330498, 0.95013727, 0.63595934,
       0.13740781, 0.876457  , 0.26743549, 0.10180253, 0.38283367])

In [195]: a + 10
Out[195]:
array([10.15988895, 10.3715415 , 10.22330498, 10.95013727, 10.63595934,
       10.13740781, 10.876457  , 10.26743549, 10.10180253, 10.38283367])

In [196]: a - 10
Out[196]:
array([-9.84011105, -9.6284585 , -9.77669502, -9.04986273, -9.36404066,
       -9.86259219, -9.123543  , -9.73256451, -9.89819747, -9.61716633])

In [197]: a
Out[197]:
array([0.15988895, 0.3715415 , 0.22330498, 0.95013727, 0.63595934,
       0.13740781, 0.876457  , 0.26743549, 0.10180253, 0.38283367])

In [198]: a += 10

In [199]: a
Out[199]:
array([10.15988895, 10.3715415 , 10.22330498, 10.95013727, 10.63595934,
       10.13740781, 10.876457  , 10.26743549, 10.10180253, 10.38283367])

In [200]: a -= 20

In [201]: a
Out[201]:
array([-9.84011105, -9.6284585 , -9.77669502, -9.04986273, -9.36404066,
       -9.86259219, -9.123543  , -9.73256451, -9.89819747, -9.61716633])

In [202]: a = np.array([1, 2, 3])

In [203]: b = np.array([4, 5, 6])

In [204]: a + b
Out[204]: array([5, 7, 9])

In [205]: c = [1, 2, 3]

In [206]: d = [4, 5, 6]

In [207]: c + d
Out[207]: [1, 2, 3, 4, 5, 6]

In [208]: a + b
Out[208]: array([5, 7, 9])

In [209]: 'sdfsdf' + '123121231'
Out[209]: 'sdfsdf123121231'

In [210]: a
Out[210]: array([1, 2, 3])

In [211]: b
Out[211]: array([4, 5, 6])

In [212]: np.concatenate([a, b])
Out[212]: array([1, 2, 3, 4, 5, 6])

In [213]: np.concatenate([a, b, c, d])
Out[213]: array([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])

In [214]: a
Out[214]: array([1, 2, 3])

In [215]: b = np.array([4, 5, 6, 7])

In [216]: a
Out[216]: array([1, 2, 3])

In [217]: b
Out[217]: array([4, 5, 6, 7])

In [218]: a + b
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-218-bd58363a63fc> in <module>
----> 1 a + b

ValueError: operands could not be broadcast together with shapes (3,) (4,)
> <ipython-input-218-bd58363a63fc>(1)<module>()
----> 1 a + b

ipdb> c

In [219]: a - b
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-219-09bd029d0285> in <module>
----> 1 a - b

ValueError: operands could not be broadcast together with shapes (3,) (4,)
> <ipython-input-219-09bd029d0285>(1)<module>()
----> 1 a - b

ipdb> c

In [220]: a * b
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-220-9bc1a869709f> in <module>
----> 1 a * b

ValueError: operands could not be broadcast together with shapes (3,) (4,)
> <ipython-input-220-9bc1a869709f>(1)<module>()
----> 1 a * b

ipdb> c

In [221]: b = np.array([4, 5, 6])

In [222]: a * b
Out[222]: array([ 4, 10, 18])

In [223]: a
Out[223]: array([1, 2, 3])

In [224]: b
Out[224]: array([4, 5, 6])

In [225]: np.zeros(5)
Out[225]: array([0., 0., 0., 0., 0.])

In [226]: np.zeros(5)
Out[226]: array([0., 0., 0., 0., 0.])

In [227]: l = []

In [228]: for i in range(3):
     ...:     l.append(np.zeros(5))
     ...:

In [229]: l
Out[229]:
[array([0., 0., 0., 0., 0.]),
 array([0., 0., 0., 0., 0.]),
 array([0., 0., 0., 0., 0.])]

In [230]: l = [ np.zeros(5) for i in range(3) ]

In [231]: l
Out[231]:
[array([0., 0., 0., 0., 0.]),
 array([0., 0., 0., 0., 0.]),
 array([0., 0., 0., 0., 0.])]

In [232]: a = np.array([10, 20, 30, 40, 50])
     ...: b = np.array([5, 12, 18, 31, 45])

In [233]: a
Out[233]: array([10, 20, 30, 40, 50])

In [234]: b
Out[234]: array([ 5, 12, 18, 31, 45])

In [235]: d = a - b

In [236]: d
Out[236]: array([ 5,  8, 12,  9,  5])

In [237]: d = b - a

In [238]: d
Out[238]: array([ -5,  -8, -12,  -9,  -5])

In [239]: d = a - b

In [240]: d
Out[240]: array([ 5,  8, 12,  9,  5])

In [241]: d.mean()
Out[241]: 7.8

In [242]: np.mean(d)
Out[242]: 7.8

In [243]: np.sqrt?

In [244]: 2 ^ 2
Out[244]: 0

In [245]: a = np.arange(10)

In [246]: a
Out[246]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [247]: a ** 2
Out[247]: array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])

In [248]: def rms(x):
     ...:     np.sqrt((x ** 2).mean())
     ...:

In [249]: 10
Out[249]: 10

In [250]: a
Out[250]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [251]: rms(a)

In [252]: def rms(x):
     ...:     return np.sqrt((x ** 2).mean())
     ...:

In [253]: rms(a)
Out[253]: 5.338539126015656

In [254]: def rms(x):
     ...:     return np.sqrt(np.mean(x ** 2))
     ...:
     ...:

In [255]: rms(a)
Out[255]: 5.338539126015656

In [256]: d
Out[256]: array([ 5,  8, 12,  9,  5])

In [257]: d = a - b
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-257-77f9d4b791ae> in <module>
----> 1 d = a - b

ValueError: operands could not be broadcast together with shapes (10,) (5,)
> <ipython-input-257-77f9d4b791ae>(1)<module>()
----> 1 d = a - b

ipdb> c

In [258]: a = np.array([10, 20, 30, 40, 50])
     ...: b = np.array([5, 12, 18, 31, 45])

In [259]: d = a - b

In [260]: d
Out[260]: array([ 5,  8, 12,  9,  5])

In [261]: rms(d)
Out[261]: 8.23407554009556

In [262]: a
Out[262]: array([10, 20, 30, 40, 50])

In [263]: b
Out[263]: array([ 5, 12, 18, 31, 45])

In [264]: a + b
Out[264]: array([15, 32, 48, 71, 95])

In [265]: c = np.concatenate([a, b])

In [266]: c
Out[266]: array([10, 20, 30, 40, 50,  5, 12, 18, 31, 45])

In [267]: a
Out[267]: array([10, 20, 30, 40, 50])

In [268]: b
Out[268]: array([ 5, 12, 18, 31, 45])

In [269]: c
Out[269]: array([10, 20, 30, 40, 50,  5, 12, 18, 31, 45])

In [270]: np.sort(c)
Out[270]: array([ 5, 10, 12, 18, 20, 30, 31, 40, 45, 50])

In [271]: c.sort()

In [272]: c
Out[272]: array([ 5, 10, 12, 18, 20, 30, 31, 40, 45, 50])

In [273]: c
Out[273]: array([ 5, 10, 12, 18, 20, 30, 31, 40, 45, 50])

In [274]: c >= 10
Out[274]:
array([False,  True,  True,  True,  True,  True,  True,  True,  True,
        True])

In [275]: c <= 20
Out[275]:
array([ True,  True,  True,  True,  True, False, False, False, False,
       False])

In [276]: (c >= 10) * (c <= 20)
Out[276]:
array([False,  True,  True,  True,  True, False, False, False, False,
       False])

In [277]: i = (c >= 10) * (c <= 20)

In [278]: i
Out[278]:
array([False,  True,  True,  True,  True, False, False, False, False,
       False])

In [279]: i = (c >= 10) & (c <= 20)

In [280]: i
Out[280]:
array([False,  True,  True,  True,  True, False, False, False, False,
       False])

In [281]: i
Out[281]:
array([False,  True,  True,  True,  True, False, False, False, False,
       False])

In [282]: len(i)
Out[282]: 10

In [283]: len(c)
Out[283]: 10

In [284]: c[i]
Out[284]: array([10, 12, 18, 20])

In [285]: c[ (c >= 10) * (c <= 20) ]
Out[285]: array([10, 12, 18, 20])

In [286]: c[ c >= 10 * c <= 20 ]
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-286-4f9910332b77> in <module>
----> 1 c[ c >= 10 * c <= 20 ]

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
> <ipython-input-286-4f9910332b77>(1)<module>()
----> 1 c[ c >= 10 * c <= 20 ]

ipdb> c

In [287]: c >= 10 * c <= 20
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-287-a4c6d02dc0eb> in <module>
----> 1 c >= 10 * c <= 20

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
> <ipython-input-287-a4c6d02dc0eb>(1)<module>()
----> 1 c >= 10 * c <= 20

ipdb> c

In [288]: (c >= 10) * (c <= 20)
Out[288]:
array([False,  True,  True,  True,  True, False, False, False, False,
       False])

In [289]: c
Out[289]: array([ 5, 10, 12, 18, 20, 30, 31, 40, 45, 50])

In [290]: c[0, 2, 3]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-290-4d15e2f4077c> in <module>
----> 1 c[0, 2, 3]

IndexError: too many indices for array
> <ipython-input-290-4d15e2f4077c>(1)<module>()
----> 1 c[0, 2, 3]

ipdb> c

In [291]: c[(0, 2, 3)]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-291-566b04770a18> in <module>
----> 1 c[(0, 2, 3)]

IndexError: too many indices for array
> <ipython-input-291-566b04770a18>(1)<module>()
----> 1 c[(0, 2, 3)]

ipdb> c

In [292]: c[[0, 2, 3]]
Out[292]: array([ 5, 12, 18])

In [293]: i = [0, 2, 3]

In [294]: c[i]
Out[294]: array([ 5, 12, 18])

In [295]: c
Out[295]: array([ 5, 10, 12, 18, 20, 30, 31, 40, 45, 50])

In [296]: c[i]
Out[296]: array([ 5, 12, 18])

In [297]: c[i] = 0

In [298]: c
Out[298]: array([ 0, 10,  0,  0, 20, 30, 31, 40, 45, 50])

In [299]: a
Out[299]: array([10, 20, 30, 40, 50])

In [300]: array([True, False, False, False, True])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-300-e0df8616fedf> in <module>
----> 1 array([True, False, False, False, True])

NameError: name 'array' is not defined
> <ipython-input-300-e0df8616fedf>(1)<module>()
----> 1 array([True, False, False, False, True])

ipdb> c

In [301]: np.array([True, False, False, False, True])
Out[301]: array([ True, False, False, False,  True])

In [302]: b = np.array([True, False, False, False, True])

In [303]: a[b]
Out[303]: array([10, 50])

In [304]: a[b] = -1

In [305]: a
Out[305]: array([-1, 20, 30, 40, -1])

In [306]: a = np.array([10, 20, 30, 40, 50])
     ...: b = np.array([5, 12, 18, 31, 45])

In [307]: a
Out[307]: array([10, 20, 30, 40, 50])

In [308]: a[[0, -1]]
Out[308]: array([10, 50])

In [309]: a[[0, -1]] = -1

In [310]: a
Out[310]: array([-1, 20, 30, 40, -1])

In [311]:

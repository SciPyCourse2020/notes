
mspacek@Godel:~/SciPyCourse2020/notes/08_images$ ipython
Python 3.6.9 (default, Apr 18 2020, 01:56:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import skimage

In [2]: import scikit-image
  File "<ipython-input-2-7f732ddeb172>", line 1
    import scikit-image
                 ^
SyntaxError: invalid syntax


In [3]: import scipy

In [4]: from scipy import ndimage

In [5]: import numpy as np

In [6]: import matplotlib.pyplot as plt

In [7]: ls
08_images.md   face_alpha.png  face.png   ohki2005.png
08_images.pdf  face_gray.png   movie.avi  Untitled.ipynb

In [8]: from skimage import io

In [9]: io.imread?

In [10]: faceg = io.imread('face_gray.png')

In [11]: faceg
Out[11]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [12]: faceg.shape
Out[12]: (782, 782)

In [13]: f, ax = plt.subplots()

In [14]: im = ax.imshow(faceg)

In [15]: im.get_cmap().name
Out[15]: 'viridis'

In [16]: im.set_cmap('gray')

In [17]: faceg.shape
Out[17]: (782, 782)

In [18]: f.colorbar()
-------------------------------------------------------------
TypeError                   Traceback (most recent call last)
<ipython-input-18-9ab260b4cefa> in <module>
----> 1 f.colorbar()

TypeError: colorbar() missing 1 required positional argument: 'mappable'
> <ipython-input-18-9ab260b4cefa>(1)<module>()
----> 1 f.colorbar()

ipdb> c

In [19]: f.colorbar(im)
Out[19]: <matplotlib.colorbar.Colorbar at 0x7fe622928438>

In [20]: plt.close('all')

In [21]: f, ax = plt.subplots()

In [22]: im = ax.imshow(faceg, cmap='gray')

In [23]: faceg
Out[23]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [24]: faceg[:, ::-1]
Out[24]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [25]: im.show(faceg[:, ::-1])
-------------------------------------------------------------
AttributeError              Traceback (most recent call last)
<ipython-input-25-23664d2a9a28> in <module>
----> 1 im.show(faceg[:, ::-1])

AttributeError: 'AxesImage' object has no attribute 'show'
> <ipython-input-25-23664d2a9a28>(1)<module>()
----> 1 im.show(faceg[:, ::-1])

ipdb> c

In [26]: ax.imshow(faceg[:, ::-1])
Out[26]: <matplotlib.image.AxesImage at 0x7fe645cef0b8>

In [27]: ax.imshow(faceg)
Out[27]: <matplotlib.image.AxesImage at 0x7fe645cef6a0>

In [28]: ax.imshow(faceg[:, ::-1])
Out[28]: <matplotlib.image.AxesImage at 0x7fe645d592e8>

In [29]: ax.imshow(faceg)
Out[29]: <matplotlib.image.AxesImage at 0x7fe645d59240>

In [30]: ax.imshow(faceg[::-1, :])
Out[30]: <matplotlib.image.AxesImage at 0x7fe645cee320>

In [31]: ax.imshow(faceg)
Out[31]: <matplotlib.image.AxesImage at 0x7fe645d0aa58>

In [32]: np.flipud?

In [33]: np.fliplr?

In [34]: faceg[0, 0]
Out[34]: 255

In [35]: faceg[0:10, 0:10]
Out[35]:
array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], dtype=uint8)

In [36]: faceg[0:10, 0:10].shape
Out[36]: (10, 10)

In [37]: faceg[0:10:-1, 0:10:-1].shape
Out[37]: (0, 0)

In [38]: faceg[10:0:-1, 10:0:-1].shape
Out[38]: (10, 10)

In [39]: np.rot90?

In [40]: ax.imshow(faceg)
Out[40]: <matplotlib.image.AxesImage at 0x7fe645cbc208>

In [41]: ax.imshow(np.rot90(faceg))
Out[41]: <matplotlib.image.AxesImage at 0x7fe645cf6080>

In [42]: from scipy import ndimage

In [43]: ndimage.rotate?

In [44]: face45 = ndimage.rotate(faceg, 45)

In [45]: face45.ndim
Out[45]: 2

In [46]: face45.shape
Out[46]: (1106, 1106)

In [47]: faceg.shape
Out[47]: (782, 782)

In [48]: ax.imshow(face45, cmap='gray')
Out[48]: <matplotlib.image.AxesImage at 0x7fe645f7a0b8>

In [49]: io.imsave('face45.png', face45)

In [50]: ls
08_images.md   face_alpha.png  movie.avi
08_images.pdf  face_gray.png   ohki2005.png
face45.png     face.png        Untitled.ipynb

In [51]: plt.close('all')

In [52]: f, ax = plt.subplots()

In [53]: faceg.shape
Out[53]: (782, 782)

In [54]: faceg
Out[54]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [55]: faceg[::10, ::10]
Out[55]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [56]: faceg[::10, ::10].shape
Out[56]: (79, 79)

In [57]: lowres = faceg[::10, ::10]

In [58]: lowres.shape
Out[58]: (79, 79)

In [59]: ax.imshow(lowres, cmap='gray')
Out[59]: <matplotlib.image.AxesImage at 0x7fe645c647b8>

In [60]: ax.imshow(lowres, cmap='gray', interpolation='gaussi
    ...: an')
Out[60]: <matplotlib.image.AxesImage at 0x7fe645a08a58>

In [61]: ax.imshow?

In [62]: lowres
Out[62]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [63]: ax.imshow(lowres, cmap='gray')
Out[63]: <matplotlib.image.AxesImage at 0x7fe645a15cf8>

In [64]: ax.imshow(lowres, cmap='gray', interpolation='gaussi
    ...: an')
Out[64]: <matplotlib.image.AxesImage at 0x7fe645a15860>

In [65]: lowres
Out[65]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [66]: from skimage import filters

In [67]: filters.gaussian
Out[67]: <function skimage.filters._gaussian.gaussian(image, sigma=1, output=None, mode='nearest', cval=0, multichannel=None, preserve_range=False, truncate=4.0)>

In [68]: filters.gaussian?

In [69]: lowresgauss = filters.gaussian(lowres, sigma=2)

In [70]: lowresgauss.shape
Out[70]: (79, 79)

In [71]: ax.imshow(lowres, cmap='gray')
Out[71]: <matplotlib.image.AxesImage at 0x7fe5d613d6a0>

In [72]: ax.imshow(lowresgauss, cmap='gray')
Out[72]: <matplotlib.image.AxesImage at 0x7fe5d6178ac8>

In [73]: ax.imshow(lowres, cmap='gray')
Out[73]: <matplotlib.image.AxesImage at 0x7fe5d6178b70>

In [74]: lowresgauss = filters.gaussian(lowres, sigma=1)

In [75]: ax.imshow(lowresgauss, cmap='gray')
Out[75]: <matplotlib.image.AxesImage at 0x7fe5d60e4b00>

In [76]: np.repeat?

In [77]: ax.imshow(lowres, cmap='gray')
Out[77]: <matplotlib.image.AxesImage at 0x7fe5d60de8d0>

In [78]: ax.imshow(np.repeat(lowres, 2), cmap='gray')
-------------------------------------------------------------
TypeError                   Traceback (most recent call last)
<ipython-input-78-dca8373c7ddb> in <module>
----> 1 ax.imshow(np.repeat(lowres, 2), cmap='gray')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5669                               resample=resample, **kwargs)
   5670
-> 5671         im.set_data(X)
   5672         im.set_alpha(alpha)
   5673         if im.get_clip_path() is None:

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_data(self, A)
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

TypeError: Invalid shape (12482,) for image data
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(690)set_data()
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

ipdb> c

In [79]: np.repeat?

In [80]: ndimage.zoom?

In [81]: lowres
Out[81]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [82]: ax.imshow(lowresgauss, cmap='gray')
Out[82]: <matplotlib.image.AxesImage at 0x7fe5cfdb1ac8>

In [83]: biglowresgauss = ndimage.zoom(lowresguass, 10)
-------------------------------------------------------------
NameError                   Traceback (most recent call last)
<ipython-input-83-a2a3fb5eaa53> in <module>
----> 1 biglowresgauss = ndimage.zoom(lowresguass, 10)

NameError: name 'lowresguass' is not defined
> <ipython-input-83-a2a3fb5eaa53>(1)<module>()
----> 1 biglowresgauss = ndimage.zoom(lowresguass, 10)

ipdb> c

In [84]: lowresgauss
Out[84]:
array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       ...,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]])

In [85]: biglowresgauss = ndimage.zoom(lowresgauss, 10)

In [86]: biglowresguass.shape
-------------------------------------------------------------
NameError                   Traceback (most recent call last)
<ipython-input-86-6d2a443b2324> in <module>
----> 1 biglowresguass.shape

NameError: name 'biglowresguass' is not defined
> <ipython-input-86-6d2a443b2324>(1)<module>()
----> 1 biglowresguass.shape

ipdb> c

In [87]: biglowresgauss.shape
Out[87]: (790, 790)

In [88]: biglowresgauss
Out[88]:
array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       ...,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]])

In [89]: faceg.shape
Out[89]: (782, 782)

In [90]: ax.imshow(biglowresgauss, cmap='gray')
Out[90]: <matplotlib.image.AxesImage at 0x7fe5cad39128>

In [91]: ax.imshow(faceg, cmap='gray')
Out[91]: <matplotlib.image.AxesImage at 0x7fe5d6178128>

In [92]: f, ax = plt.subplots()

In [93]: ax.hist(faceg.ravel(), bins=np.arange(256+1))
Out[93]:
(array([2.47000e+03, 2.88000e+02, 2.87000e+02, 3.14000e+02, 3.16000e+02,
        3.35000e+02, 3.17000e+02, 3.31000e+02, 3.59000e+02, 3.26000e+02,
        3.51000e+02, 3.74000e+02, 3.53000e+02, 3.60000e+02, 3.94000e+02,
        3.63000e+02, 3.84000e+02, 3.92000e+02, 4.33000e+02, 4.62000e+02,
        4.45000e+02, 4.33000e+02, 4.46000e+02, 4.38000e+02, 4.15000e+02,
        3.37000e+02, 3.22000e+02, 3.02000e+02, 2.91000e+02, 2.88000e+02,
        2.86000e+02, 2.60000e+02, 2.92000e+02, 2.63000e+02, 2.32000e+02,
        2.12000e+02, 1.50000e+02, 1.37000e+02, 1.34000e+02, 1.77000e+02,
        1.70000e+02, 1.36000e+02, 1.36000e+02, 1.04000e+02, 9.20000e+01,
        6.50000e+01, 6.40000e+01, 2.80000e+01, 2.90000e+01, 2.80000e+01,
        3.30000e+01, 3.10000e+01, 2.50000e+01, 3.10000e+01, 3.00000e+01,
        3.20000e+01, 2.70000e+01, 2.80000e+01, 2.40000e+01, 2.20000e+01,
        3.40000e+01, 2.10000e+01, 3.20000e+01, 2.50000e+01, 3.20000e+01,
        2.60000e+01, 2.80000e+01, 3.20000e+01, 2.20000e+01, 3.80000e+01,
        3.00000e+01, 3.60000e+01, 2.70000e+01, 3.30000e+01, 2.30000e+01,
        3.90000e+01, 2.90000e+01, 3.20000e+01, 3.60000e+01, 3.10000e+01,
        2.70000e+01, 3.00000e+01, 3.40000e+01, 2.90000e+01, 3.90000e+01,
        2.50000e+01, 4.00000e+01, 2.50000e+01, 4.00000e+01, 2.80000e+01,
        3.60000e+01, 2.30000e+01, 3.70000e+01, 2.50000e+01, 4.00000e+01,
        2.60000e+01, 3.40000e+01, 3.30000e+01, 3.70000e+01, 2.50000e+01,
        3.50000e+01, 3.00000e+01, 3.20000e+01, 2.90000e+01, 3.20000e+01,
        3.00000e+01, 3.30000e+01, 2.80000e+01, 3.70000e+01, 3.50000e+01,
        3.40000e+01, 2.80000e+01, 4.10000e+01, 2.60000e+01, 4.40000e+01,
        2.50000e+01, 3.90000e+01, 2.60000e+01, 3.80000e+01, 2.70000e+01,
        3.40000e+01, 2.50000e+01, 3.70000e+01, 3.70000e+01, 3.00000e+01,
        3.40000e+01, 3.80000e+01, 3.40000e+01, 3.40000e+01, 3.10000e+01,
        2.90000e+01, 3.10000e+01, 2.70000e+01, 2.70000e+01, 2.70000e+01,
        2.60000e+01, 2.60000e+01, 1.90000e+01, 2.30000e+01, 2.10000e+01,
        1.90000e+01, 1.40000e+01, 1.50000e+01, 1.60000e+01, 9.00000e+00,
        2.00000e+00, 3.00000e+00, 4.00000e+00, 3.00000e+00, 6.00000e+00,
        4.00000e+00, 5.00000e+00, 1.00000e+00, 2.00000e+00, 4.00000e+00,
        7.80000e+01, 4.49500e+04, 3.30000e+02, 2.38000e+02, 2.36000e+02,
        1.57000e+02, 1.47000e+02, 1.33000e+02, 1.32000e+02, 1.16000e+02,
        1.12000e+02, 1.13000e+02, 9.40000e+01, 1.02000e+02, 1.04000e+02,
        8.60000e+01, 9.80000e+01, 1.06000e+02, 8.00000e+01, 8.30000e+01,
        8.80000e+01, 6.50000e+01, 7.30000e+01, 6.60000e+01, 8.10000e+01,
        8.30000e+01, 6.50000e+01, 6.90000e+01, 6.90000e+01, 8.00000e+01,
        7.30000e+01, 8.20000e+01, 6.10000e+01, 7.60000e+01, 7.30000e+01,
        5.00000e+01, 7.50000e+01, 6.90000e+01, 6.30000e+01, 6.70000e+01,
        7.50000e+01, 8.00000e+01, 7.80000e+01, 8.20000e+01, 8.40000e+01,
        7.70000e+01, 1.01000e+02, 3.10900e+03, 1.76000e+03, 1.47300e+03,
        2.12100e+03, 6.67000e+02, 2.45800e+03, 2.12700e+03, 2.60300e+03,
        2.75900e+03, 2.61000e+03, 2.64600e+03, 3.27600e+03, 8.92000e+02,
        3.17700e+03, 1.94400e+03, 2.96200e+03, 3.04600e+03, 3.05500e+03,
        2.79800e+03, 3.19700e+03, 1.86300e+03, 4.12600e+03, 2.60300e+03,
        4.83700e+03, 9.29300e+03, 1.41300e+04, 8.22700e+03, 1.80650e+04,
        1.49450e+04, 1.28400e+04, 7.68700e+03, 1.08000e+04, 1.31300e+04,
        1.57810e+04, 1.04240e+04, 1.03440e+04, 1.41900e+04, 1.79450e+04,
        9.14100e+03, 9.94000e+03, 1.21600e+04, 1.22370e+04, 8.00000e+03,
        9.38000e+03, 1.27690e+04, 1.52740e+04, 1.09450e+04, 8.82400e+03,
        1.10300e+04, 1.64970e+04, 1.57240e+04, 1.02360e+04, 1.01250e+04,
        1.31043e+05]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [94]: plt.close('all')

In [95]: from skimage import data

In [96]: moon = data.moon()

In [97]: f, ax = plt.subplots(1, 2)

In [98]: ax[0].imshow(moon, cmap='gray', vmin=0, vmax=255)
Out[98]: <matplotlib.image.AxesImage at 0x7fe622a84470>

In [99]: ax[1].hist(moon.ravel(), bins=np.arange(256+1))
Out[99]:
(array([2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        6.4000e+01, 5.6000e+01, 0.0000e+00, 1.1200e+02, 7.2000e+01,
        7.6000e+01, 0.0000e+00, 9.6000e+01, 5.2000e+01, 0.0000e+00,
        0.0000e+00, 3.2000e+01, 4.4000e+01, 0.0000e+00, 4.8000e+01,
        0.0000e+00, 7.6000e+01, 2.8000e+01, 0.0000e+00, 3.6000e+01,
        3.6000e+01, 0.0000e+00, 4.4000e+01, 0.0000e+00, 2.8000e+01,
        0.0000e+00, 2.0000e+01, 5.2000e+01, 0.0000e+00, 2.0000e+01,
        0.0000e+00, 3.2000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        2.0000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00, 1.2000e+01,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 2.8000e+01, 0.0000e+00, 8.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e+01,
        0.0000e+00, 8.0000e+00, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        2.8000e+01, 0.0000e+00, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 0.0000e+00, 3.6000e+01, 0.0000e+00,
        4.8000e+01, 0.0000e+00, 0.0000e+00, 2.4000e+01, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 3.6000e+01, 0.0000e+00, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.0000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [100]: moon
Out[100]:
array([[116, 116, 122, ...,  93,  96,  96],
       [116, 116, 122, ...,  93,  96,  96],
       [116, 116, 122, ...,  93,  96,  96],
       ...,
       [109, 109, 112, ..., 117, 116, 116],
       [114, 114, 113, ..., 118, 118, 118],
       [114, 114, 113, ..., 118, 118, 118]], dtype=uint8)

In [101]: moon + 10
Out[101]:
array([[126, 126, 132, ..., 103, 106, 106],
       [126, 126, 132, ..., 103, 106, 106],
       [126, 126, 132, ..., 103, 106, 106],
       ...,
       [119, 119, 122, ..., 127, 126, 126],
       [124, 124, 123, ..., 128, 128, 128],
       [124, 124, 123, ..., 128, 128, 128]], dtype=uint8)

In [102]: np.float64(moon) + 10
Out[102]:
array([[126., 126., 132., ..., 103., 106., 106.],
       [126., 126., 132., ..., 103., 106., 106.],
       [126., 126., 132., ..., 103., 106., 106.],
       ...,
       [119., 119., 122., ..., 127., 126., 126.],
       [124., 124., 123., ..., 128., 128., 128.],
       [124., 124., 123., ..., 128., 128., 128.]])

In [103]: (np.float64(moon) + 10).max()
Out[103]: 265.0

In [104]: over = (np.float64(moon) + 10)

In [105]: over > 255
Out[105]:
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])

In [106]: (over > 255).sum()
Out[106]: 24

In [107]: over[over > 255] = 255

In [108]: (over > 255).sum()
Out[108]: 0

In [109]: np.uint8(over)
Out[109]:
array([[126, 126, 132, ..., 103, 106, 106],
       [126, 126, 132, ..., 103, 106, 106],
       [126, 126, 132, ..., 103, 106, 106],
       ...,
       [119, 119, 122, ..., 127, 126, 126],
       [124, 124, 123, ..., 128, 128, 128],
       [124, 124, 123, ..., 128, 128, 128]], dtype=uint8)

In [110]: ax[0].imshow(np.uint8(over), cmap='gray')
Out[110]: <matplotlib.image.AxesImage at 0x7fe5d5e9c198>

In [111]: import skimage.exposure

In [112]: skimage.exposure?
Type:        module
String form: <module 'skimage.exposure' from '/usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py'>
File:        /usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py
Docstring:   <no docstring>

In [113]: facec = io.imread('face.png')

In [114]: facec.shape
Out[114]: (782, 782, 3)

In [115]: facec
Out[115]:
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)

In [116]: facec.shape
Out[116]: (782, 782, 3)

In [117]: f, ax = plt.subplots(1, 2)

In [118]: f, ax = plt.subplots()

In [119]: im = ax.imshow(facec)

In [120]: import skimage

In [121]: from skimage import io

In [122]: np.__version__
Out[122]: '1.17.4'

In [123]: np.__version__
Out[123]: '1.17.4'

In [124]: skimage.__version__
Out[124]: '0.16.2'

In [125]: ls
08_images.md   face_alpha.png  movie.avi
08_images.pdf  face_gray.png   ohki2005.png
face45.png     face.png        Untitled.ipynb

In [126]: ohki = io.imread('ohki2005.png')

In [127]: ohki.shape
Out[127]: (512, 491)

In [128]: plt.close('all')

In [129]: f, ax = plt.subplots()

In [130]: np.rot90?

In [131]: ax.imshow(ohki)
Out[131]: <matplotlib.image.AxesImage at 0x7fe5cf873278>

In [132]: ax.imshow(np.rot90(ohki, -1))
Out[132]: <matplotlib.image.AxesImage at 0x7fe5cf878390>

In [133]: ax.imshow(ohki)
Out[133]: <matplotlib.image.AxesImage at 0x7fe5cfb14908>

In [134]: im = ax.imshow(ohki)

In [135]: im.set_cmap('gray')

In [136]: im = ax.imshow(ohki)

In [137]: im.set_cmap('Spectral')

In [138]: f.colorbar(im)
Out[138]: <matplotlib.colorbar.Colorbar at 0x7fe5cbbad860>

In [139]: im.set_cmap('coolwarm')

In [140]: im.set_cmap('Dark2')

In [141]: im.set_cmap('Pastel1')

In [142]: im.set_cmap('gray')

In [143]: f2, ax2 = plt.subplots()

In [144]: ax2.hist(ohki.ravel(), bins=np.arange(256+1))
Out[144]:
(array([1.300e+01, 3.700e+01, 1.400e+02, 1.470e+02, 1.660e+02, 3.420e+02,
        3.080e+02, 6.280e+02, 7.920e+02, 1.606e+03, 1.186e+03, 2.071e+03,
        1.939e+03, 3.274e+03, 2.057e+03, 2.194e+03, 2.859e+03, 2.635e+03,
        2.709e+03, 2.414e+03, 2.316e+03, 1.948e+03, 1.932e+03, 2.083e+03,
        2.121e+03, 2.783e+03, 2.792e+03, 2.860e+03, 2.919e+03, 2.812e+03,
        2.795e+03, 2.848e+03, 2.605e+03, 2.762e+03, 2.479e+03, 2.411e+03,
        2.569e+03, 2.470e+03, 2.367e+03, 2.252e+03, 2.480e+03, 2.522e+03,
        2.428e+03, 2.552e+03, 2.609e+03, 2.567e+03, 2.470e+03, 2.312e+03,
        2.606e+03, 2.439e+03, 2.413e+03, 2.463e+03, 2.252e+03, 2.357e+03,
        2.426e+03, 2.245e+03, 2.385e+03, 2.279e+03, 2.236e+03, 2.322e+03,
        2.174e+03, 2.192e+03, 2.111e+03, 2.191e+03, 2.115e+03, 2.149e+03,
        2.258e+03, 2.128e+03, 2.141e+03, 2.193e+03, 2.161e+03, 2.310e+03,
        2.281e+03, 2.266e+03, 2.233e+03, 2.158e+03, 2.189e+03, 2.139e+03,
        2.136e+03, 2.101e+03, 2.114e+03, 2.066e+03, 2.001e+03, 1.935e+03,
        1.959e+03, 1.864e+03, 1.829e+03, 1.793e+03, 1.768e+03, 1.835e+03,
        1.670e+03, 1.776e+03, 1.716e+03, 1.680e+03, 1.685e+03, 1.629e+03,
        1.649e+03, 1.633e+03, 1.625e+03, 1.513e+03, 1.442e+03, 1.523e+03,
        1.437e+03, 1.426e+03, 1.438e+03, 1.360e+03, 1.254e+03, 1.307e+03,
        1.363e+03, 1.225e+03, 1.219e+03, 1.234e+03, 1.101e+03, 1.071e+03,
        1.120e+03, 1.030e+03, 9.530e+02, 1.015e+03, 9.610e+02, 9.270e+02,
        8.650e+02, 7.930e+02, 7.930e+02, 6.920e+02, 6.930e+02, 6.800e+02,
        5.780e+02, 6.090e+02, 5.490e+02, 5.260e+02, 5.140e+02, 4.960e+02,
        4.810e+02, 4.610e+02, 4.710e+02, 4.220e+02, 4.220e+02, 4.720e+02,
        4.190e+02, 3.630e+02, 3.340e+02, 3.150e+02, 3.050e+02, 3.240e+02,
        2.740e+02, 2.690e+02, 2.560e+02, 2.210e+02, 2.620e+02, 1.960e+02,
        2.000e+02, 1.920e+02, 2.120e+02, 1.710e+02, 2.050e+02, 2.050e+02,
        2.220e+02, 2.100e+02, 1.790e+02, 1.860e+02, 1.670e+02, 1.820e+02,
        1.470e+02, 1.600e+02, 1.260e+02, 1.600e+02, 1.470e+02, 1.260e+02,
        1.410e+02, 1.340e+02, 1.400e+02, 1.240e+02, 1.040e+02, 1.210e+02,
        1.030e+02, 1.080e+02, 9.500e+01, 9.300e+01, 1.140e+02, 8.400e+01,
        9.900e+01, 7.700e+01, 8.500e+01, 7.300e+01, 4.800e+01, 7.900e+01,
        6.800e+01, 5.700e+01, 7.300e+01, 5.500e+01, 7.700e+01, 6.300e+01,
        6.200e+01, 6.600e+01, 5.100e+01, 5.400e+01, 5.100e+01, 4.400e+01,
        4.600e+01, 4.100e+01, 4.300e+01, 5.300e+01, 4.100e+01, 5.900e+01,
        3.800e+01, 4.200e+01, 4.900e+01, 4.100e+01, 4.000e+01, 4.100e+01,
        3.500e+01, 5.000e+01, 4.900e+01, 4.000e+01, 4.600e+01, 4.800e+01,
        5.700e+01, 6.000e+01, 5.200e+01, 7.900e+01, 5.800e+01, 4.800e+01,
        3.600e+01, 6.000e+01, 3.600e+01, 5.000e+01, 4.600e+01, 3.900e+01,
        3.500e+01, 3.000e+01, 3.100e+01, 3.400e+01, 2.700e+01, 3.600e+01,
        2.000e+01, 1.100e+01, 1.100e+01, 5.000e+00, 0.000e+00, 5.000e+00,
        2.000e+00, 5.000e+00, 4.000e+00, 8.000e+00, 6.000e+00, 3.000e+00,
        7.000e+00, 4.000e+00, 1.000e+01, 1.000e+01, 1.000e+01, 2.200e+01,
        1.700e+01, 1.600e+01, 2.600e+01, 3.000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [145]: ohki.max()
Out[145]: 255

In [146]: ohki.shape
Out[146]: (512, 491)

In [147]: new = np.float64(ohki) + 50

In [148]: new.max()
Out[148]: 305.0

In [149]: new > 255
Out[149]:
array([[False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       ...,
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False],
       [False, False, False, ..., False, False, False]])

In [150]: new[new > 255] = 255

In [151]: ax.imshow(new, cmap='gray')
Out[151]: <matplotlib.image.AxesImage at 0x7fe5cbb9ae80>

In [152]: ax2.hist(new.ravel(), bins=np.arange(256+1))
Out[152]:
(array([   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,   13.,   37.,  140.,  147.,
         166.,  342.,  308.,  628.,  792., 1606., 1186., 2071., 1939.,
        3274., 2057., 2194., 2859., 2635., 2709., 2414., 2316., 1948.,
        1932., 2083., 2121., 2783., 2792., 2860., 2919., 2812., 2795.,
        2848., 2605., 2762., 2479., 2411., 2569., 2470., 2367., 2252.,
        2480., 2522., 2428., 2552., 2609., 2567., 2470., 2312., 2606.,
        2439., 2413., 2463., 2252., 2357., 2426., 2245., 2385., 2279.,
        2236., 2322., 2174., 2192., 2111., 2191., 2115., 2149., 2258.,
        2128., 2141., 2193., 2161., 2310., 2281., 2266., 2233., 2158.,
        2189., 2139., 2136., 2101., 2114., 2066., 2001., 1935., 1959.,
        1864., 1829., 1793., 1768., 1835., 1670., 1776., 1716., 1680.,
        1685., 1629., 1649., 1633., 1625., 1513., 1442., 1523., 1437.,
        1426., 1438., 1360., 1254., 1307., 1363., 1225., 1219., 1234.,
        1101., 1071., 1120., 1030.,  953., 1015.,  961.,  927.,  865.,
         793.,  793.,  692.,  693.,  680.,  578.,  609.,  549.,  526.,
         514.,  496.,  481.,  461.,  471.,  422.,  422.,  472.,  419.,
         363.,  334.,  315.,  305.,  324.,  274.,  269.,  256.,  221.,
         262.,  196.,  200.,  192.,  212.,  171.,  205.,  205.,  222.,
         210.,  179.,  186.,  167.,  182.,  147.,  160.,  126.,  160.,
         147.,  126.,  141.,  134.,  140.,  124.,  104.,  121.,  103.,
         108.,   95.,   93.,  114.,   84.,   99.,   77.,   85.,   73.,
          48.,   79.,   68.,   57.,   73.,   55.,   77.,   63.,   62.,
          66.,   51.,   54.,   51.,   44.,   46.,   41.,   43.,   53.,
          41.,   59.,   38., 1500.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [153]: new
Out[153]:
array([[51., 53., 56., ..., 56., 54., 52.],
       [51., 53., 56., ..., 56., 54., 52.],
       [51., 53., 56., ..., 56., 54., 52.],
       ...,
       [51., 53., 55., ..., 57., 54., 52.],
       [51., 53., 55., ..., 55., 52., 51.],
       [51., 53., 55., ..., 53., 50., 50.]])

In [154]: new.dtype
Out[154]: dtype('float64')

In [155]: new.max()
Out[155]: 255.0

In [156]: new.min()
Out[156]: 50.0

In [157]: new = np.uint8(new)

In [158]: new
Out[158]:
array([[51, 53, 56, ..., 56, 54, 52],
       [51, 53, 56, ..., 56, 54, 52],
       [51, 53, 56, ..., 56, 54, 52],
       ...,
       [51, 53, 55, ..., 57, 54, 52],
       [51, 53, 55, ..., 55, 52, 51],
       [51, 53, 55, ..., 53, 50, 50]], dtype=uint8)

In [159]: from skimage import exposure

In [160]: exposure.rescale_intensity?

In [161]: ohki.min()
Out[161]: 0

In [162]: ohki.max()
Out[162]: 255

In [163]: exposure.rescale_intensity?

In [164]: ohki3 = exposure.rescale_intensity(ohki, (100, 150)
     ...: )

In [165]: ohki3.max()
Out[165]: 255

In [166]: ohki3.min()
Out[166]: 0

In [167]: ax.imshow(ohki3, cmap='gray')
Out[167]: <matplotlib.image.AxesImage at 0x7fe5d5ab8f98>

In [168]: ax2.clear()

In [169]: ax2.hist(ohki3.ravel(), bins=np.arange(256+1))
Out[169]:
(array([2.06812e+05, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.52300e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.43700e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.42600e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.43800e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.36000e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.25400e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.30700e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.36300e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        1.22500e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.21900e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.23400e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.10100e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.07100e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.12000e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.03000e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 9.53000e+02, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 1.01500e+03, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 9.61000e+02, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 9.27000e+02, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 8.65000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 7.93000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 7.93000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 6.92000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 6.93000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 6.80000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 5.78000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 6.09000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 5.49000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 5.26000e+02, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 5.14000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.96000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.81000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.61000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.71000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.22000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.22000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.72000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 4.19000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 3.63000e+02, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 3.34000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 3.15000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 3.05000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 3.24000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 2.74000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 2.69000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 2.56000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 2.21000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 2.62000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 1.96000e+02,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        7.56100e+03]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [170]: ax.imshow(ohki, cmap='gray')
Out[170]: <matplotlib.image.AxesImage at 0x7fe5cebeedd8>

In [171]: ax.shape
-------------------------------------------------------------
AttributeError              Traceback (most recent call last)
<ipython-input-171-edd1e175a575> in <module>
----> 1 ax.shape

AttributeError: 'AxesSubplot' object has no attribute 'shape'
> <ipython-input-171-edd1e175a575>(1)<module>()
----> 1 ax.shape

ipdb> c

In [172]: ohki.shape
Out[172]: (512, 491)

In [173]: ohki[150:300, 150:300]
Out[173]:
array([[106, 119, 130, ...,  61,  61,  59],
       [109, 123, 134, ...,  61,  60,  57],
       [109, 123, 134, ...,  61,  60,  57],
       ...,
       [122, 125, 129, ..., 125, 121, 117],
       [125, 127, 132, ..., 117, 113, 112],
       [127, 130, 135, ..., 108, 105, 105]], dtype=uint8)

In [174]: subset = ohki[150:300, 150:300]

In [175]: subset.shape
Out[175]: (150, 150)

In [176]: f2, ax2 = plt.subplots()

In [177]: ax2.imshow(subset, cmap='gray')
Out[177]: <matplotlib.image.AxesImage at 0x7fe5ceb76a58>

In [178]: plt.close('all')

In [179]: f, ax = plt.subplots()

In [180]: ax.hist(ohki, bins=np.arange(256+1))
^C
Program interrupted. (Use 'cont' to resume).
--Return--
array([[1., 0...[0., 0., 1.]])
> <__array_function__ internals>(6)dot()

ipdb> c
^C
Program interrupted. (Use 'cont' to resume).
> /usr/lib/python3.6/contextlib.py(80)__enter__()
     78
     79     def __enter__(self):
---> 80         try:
     81             return next(self.gen)
     82         except StopIteration:

ipdb> q
-------------------------------------------------------------
BdbQuit                     Traceback (most recent call last)
<ipython-input-180-05b4937d7d2b> in <module>
----> 1 ax.hist(ohki, bins=np.arange(256+1))

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in hist(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, normed, **kwargs)
   6841                 patch = _barfunc(bins[:-1]+boffset, height, width,
   6842                                  align='center', log=log,
-> 6843                                  color=c, **{bottom_kwarg: bottom})
   6844                 patches.append(patch)
   6845                 if stacked:

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in bar(self, x, height, width, bottom, align, **kwargs)
   2428                 edgecolor=e,
   2429                 linewidth=lw,
-> 2430                 label='_nolegend_',
   2431                 )
   2432             r.update(kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/patches.py in __init__(self, xy, width, height, angle, **kwargs)
    705         """
    706
--> 707         Patch.__init__(self, **kwargs)
    708
    709         self._x0 = xy[0]

/usr/local/lib/python3.6/dist-packages/matplotlib/patches.py in __init__(self, edgecolor, facecolor, color, linewidth, linestyle, antialiased, hatch, fill, capstyle, joinstyle, **kwargs)
     94
     95         if len(kwargs):
---> 96             self.update(kwargs)
     97
     98     def get_verts(self):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in update(self, props)
    971                 return func(v)
    972
--> 973         with cbook._setattr_cm(self, eventson=False):
    974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975

/usr/lib/python3.6/contextlib.py in __enter__(self)
     78
     79     def __enter__(self):
---> 80         try:
     81             return next(self.gen)
     82         except StopIteration:

/usr/lib/python3.6/contextlib.py in __enter__(self)
     78
     79     def __enter__(self):
---> 80         try:
     81             return next(self.gen)
     82         except StopIteration:

/usr/lib/python3.6/bdb.py in trace_dispatch(self, frame, event, arg)
     49             return # None
     50         if event == 'line':
---> 51             return self.dispatch_line(frame)
     52         if event == 'call':
     53             return self.dispatch_call(frame, arg)

/usr/lib/python3.6/bdb.py in dispatch_line(self, frame)
     68         if self.stop_here(frame) or self.break_here(frame):
     69             self.user_line(frame)
---> 70             if self.quitting: raise BdbQuit
     71         return self.trace_dispatch
     72

BdbQuit:
> /usr/lib/python3.6/bdb.py(70)dispatch_line()
     68         if self.stop_here(frame) or self.break_here(frame):
     69             self.user_line(frame)
---> 70             if self.quitting: raise BdbQuit
     71         return self.trace_dispatch
     72

ipdb> q

In [181]: ax.hist(ohki.ravel(), bins=np.arange(256+1))
Out[181]:
(array([1.300e+01, 3.700e+01, 1.400e+02, 1.470e+02, 1.660e+02, 3.420e+02,
        3.080e+02, 6.280e+02, 7.920e+02, 1.606e+03, 1.186e+03, 2.071e+03,
        1.939e+03, 3.274e+03, 2.057e+03, 2.194e+03, 2.859e+03, 2.635e+03,
        2.709e+03, 2.414e+03, 2.316e+03, 1.948e+03, 1.932e+03, 2.083e+03,
        2.121e+03, 2.783e+03, 2.792e+03, 2.860e+03, 2.919e+03, 2.812e+03,
        2.795e+03, 2.848e+03, 2.605e+03, 2.762e+03, 2.479e+03, 2.411e+03,
        2.569e+03, 2.470e+03, 2.367e+03, 2.252e+03, 2.480e+03, 2.522e+03,
        2.428e+03, 2.552e+03, 2.609e+03, 2.567e+03, 2.470e+03, 2.312e+03,
        2.606e+03, 2.439e+03, 2.413e+03, 2.463e+03, 2.252e+03, 2.357e+03,
        2.426e+03, 2.245e+03, 2.385e+03, 2.279e+03, 2.236e+03, 2.322e+03,
        2.174e+03, 2.192e+03, 2.111e+03, 2.191e+03, 2.115e+03, 2.149e+03,
        2.258e+03, 2.128e+03, 2.141e+03, 2.193e+03, 2.161e+03, 2.310e+03,
        2.281e+03, 2.266e+03, 2.233e+03, 2.158e+03, 2.189e+03, 2.139e+03,
        2.136e+03, 2.101e+03, 2.114e+03, 2.066e+03, 2.001e+03, 1.935e+03,
        1.959e+03, 1.864e+03, 1.829e+03, 1.793e+03, 1.768e+03, 1.835e+03,
        1.670e+03, 1.776e+03, 1.716e+03, 1.680e+03, 1.685e+03, 1.629e+03,
        1.649e+03, 1.633e+03, 1.625e+03, 1.513e+03, 1.442e+03, 1.523e+03,
        1.437e+03, 1.426e+03, 1.438e+03, 1.360e+03, 1.254e+03, 1.307e+03,
        1.363e+03, 1.225e+03, 1.219e+03, 1.234e+03, 1.101e+03, 1.071e+03,
        1.120e+03, 1.030e+03, 9.530e+02, 1.015e+03, 9.610e+02, 9.270e+02,
        8.650e+02, 7.930e+02, 7.930e+02, 6.920e+02, 6.930e+02, 6.800e+02,
        5.780e+02, 6.090e+02, 5.490e+02, 5.260e+02, 5.140e+02, 4.960e+02,
        4.810e+02, 4.610e+02, 4.710e+02, 4.220e+02, 4.220e+02, 4.720e+02,
        4.190e+02, 3.630e+02, 3.340e+02, 3.150e+02, 3.050e+02, 3.240e+02,
        2.740e+02, 2.690e+02, 2.560e+02, 2.210e+02, 2.620e+02, 1.960e+02,
        2.000e+02, 1.920e+02, 2.120e+02, 1.710e+02, 2.050e+02, 2.050e+02,
        2.220e+02, 2.100e+02, 1.790e+02, 1.860e+02, 1.670e+02, 1.820e+02,
        1.470e+02, 1.600e+02, 1.260e+02, 1.600e+02, 1.470e+02, 1.260e+02,
        1.410e+02, 1.340e+02, 1.400e+02, 1.240e+02, 1.040e+02, 1.210e+02,
        1.030e+02, 1.080e+02, 9.500e+01, 9.300e+01, 1.140e+02, 8.400e+01,
        9.900e+01, 7.700e+01, 8.500e+01, 7.300e+01, 4.800e+01, 7.900e+01,
        6.800e+01, 5.700e+01, 7.300e+01, 5.500e+01, 7.700e+01, 6.300e+01,
        6.200e+01, 6.600e+01, 5.100e+01, 5.400e+01, 5.100e+01, 4.400e+01,
        4.600e+01, 4.100e+01, 4.300e+01, 5.300e+01, 4.100e+01, 5.900e+01,
        3.800e+01, 4.200e+01, 4.900e+01, 4.100e+01, 4.000e+01, 4.100e+01,
        3.500e+01, 5.000e+01, 4.900e+01, 4.000e+01, 4.600e+01, 4.800e+01,
        5.700e+01, 6.000e+01, 5.200e+01, 7.900e+01, 5.800e+01, 4.800e+01,
        3.600e+01, 6.000e+01, 3.600e+01, 5.000e+01, 4.600e+01, 3.900e+01,
        3.500e+01, 3.000e+01, 3.100e+01, 3.400e+01, 2.700e+01, 3.600e+01,
        2.000e+01, 1.100e+01, 1.100e+01, 5.000e+00, 0.000e+00, 5.000e+00,
        2.000e+00, 5.000e+00, 4.000e+00, 8.000e+00, 6.000e+00, 3.000e+00,
        7.000e+00, 4.000e+00, 1.000e+01, 1.000e+01, 1.000e+01, 2.200e+01,
        1.700e+01, 1.600e+01, 2.600e+01, 3.000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [182]:

In [182]:

In [182]:

In [182]: plt.close('all')

In [183]: f, ax = plt.subplots()

In [184]: ax.hist(ohki.ravel(), bins=np.arange(256+1))
Out[184]:
(array([1.300e+01, 3.700e+01, 1.400e+02, 1.470e+02, 1.660e+02, 3.420e+02,
        3.080e+02, 6.280e+02, 7.920e+02, 1.606e+03, 1.186e+03, 2.071e+03,
        1.939e+03, 3.274e+03, 2.057e+03, 2.194e+03, 2.859e+03, 2.635e+03,
        2.709e+03, 2.414e+03, 2.316e+03, 1.948e+03, 1.932e+03, 2.083e+03,
        2.121e+03, 2.783e+03, 2.792e+03, 2.860e+03, 2.919e+03, 2.812e+03,
        2.795e+03, 2.848e+03, 2.605e+03, 2.762e+03, 2.479e+03, 2.411e+03,
        2.569e+03, 2.470e+03, 2.367e+03, 2.252e+03, 2.480e+03, 2.522e+03,
        2.428e+03, 2.552e+03, 2.609e+03, 2.567e+03, 2.470e+03, 2.312e+03,
        2.606e+03, 2.439e+03, 2.413e+03, 2.463e+03, 2.252e+03, 2.357e+03,
        2.426e+03, 2.245e+03, 2.385e+03, 2.279e+03, 2.236e+03, 2.322e+03,
        2.174e+03, 2.192e+03, 2.111e+03, 2.191e+03, 2.115e+03, 2.149e+03,
        2.258e+03, 2.128e+03, 2.141e+03, 2.193e+03, 2.161e+03, 2.310e+03,
        2.281e+03, 2.266e+03, 2.233e+03, 2.158e+03, 2.189e+03, 2.139e+03,
        2.136e+03, 2.101e+03, 2.114e+03, 2.066e+03, 2.001e+03, 1.935e+03,
        1.959e+03, 1.864e+03, 1.829e+03, 1.793e+03, 1.768e+03, 1.835e+03,
        1.670e+03, 1.776e+03, 1.716e+03, 1.680e+03, 1.685e+03, 1.629e+03,
        1.649e+03, 1.633e+03, 1.625e+03, 1.513e+03, 1.442e+03, 1.523e+03,
        1.437e+03, 1.426e+03, 1.438e+03, 1.360e+03, 1.254e+03, 1.307e+03,
        1.363e+03, 1.225e+03, 1.219e+03, 1.234e+03, 1.101e+03, 1.071e+03,
        1.120e+03, 1.030e+03, 9.530e+02, 1.015e+03, 9.610e+02, 9.270e+02,
        8.650e+02, 7.930e+02, 7.930e+02, 6.920e+02, 6.930e+02, 6.800e+02,
        5.780e+02, 6.090e+02, 5.490e+02, 5.260e+02, 5.140e+02, 4.960e+02,
        4.810e+02, 4.610e+02, 4.710e+02, 4.220e+02, 4.220e+02, 4.720e+02,
        4.190e+02, 3.630e+02, 3.340e+02, 3.150e+02, 3.050e+02, 3.240e+02,
        2.740e+02, 2.690e+02, 2.560e+02, 2.210e+02, 2.620e+02, 1.960e+02,
        2.000e+02, 1.920e+02, 2.120e+02, 1.710e+02, 2.050e+02, 2.050e+02,
        2.220e+02, 2.100e+02, 1.790e+02, 1.860e+02, 1.670e+02, 1.820e+02,
        1.470e+02, 1.600e+02, 1.260e+02, 1.600e+02, 1.470e+02, 1.260e+02,
        1.410e+02, 1.340e+02, 1.400e+02, 1.240e+02, 1.040e+02, 1.210e+02,
        1.030e+02, 1.080e+02, 9.500e+01, 9.300e+01, 1.140e+02, 8.400e+01,
        9.900e+01, 7.700e+01, 8.500e+01, 7.300e+01, 4.800e+01, 7.900e+01,
        6.800e+01, 5.700e+01, 7.300e+01, 5.500e+01, 7.700e+01, 6.300e+01,
        6.200e+01, 6.600e+01, 5.100e+01, 5.400e+01, 5.100e+01, 4.400e+01,
        4.600e+01, 4.100e+01, 4.300e+01, 5.300e+01, 4.100e+01, 5.900e+01,
        3.800e+01, 4.200e+01, 4.900e+01, 4.100e+01, 4.000e+01, 4.100e+01,
        3.500e+01, 5.000e+01, 4.900e+01, 4.000e+01, 4.600e+01, 4.800e+01,
        5.700e+01, 6.000e+01, 5.200e+01, 7.900e+01, 5.800e+01, 4.800e+01,
        3.600e+01, 6.000e+01, 3.600e+01, 5.000e+01, 4.600e+01, 3.900e+01,
        3.500e+01, 3.000e+01, 3.100e+01, 3.400e+01, 2.700e+01, 3.600e+01,
        2.000e+01, 1.100e+01, 1.100e+01, 5.000e+00, 0.000e+00, 5.000e+00,
        2.000e+00, 5.000e+00, 4.000e+00, 8.000e+00, 6.000e+00, 3.000e+00,
        7.000e+00, 4.000e+00, 1.000e+01, 1.000e+01, 1.000e+01, 2.200e+01,
        1.700e+01, 1.600e+01, 2.600e+01, 3.000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [185]: f2, ax2 = plt.subplots()

In [186]: ax2.hist(subset.ravel(), bins=np.arange(256+1))
Out[186]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   7.,   4.,   9.,  10.,  12.,
          9.,   4.,   2.,  10.,   6.,   3.,   6.,   4.,   4.,   3.,   6.,
          5.,   6.,   5.,   4.,   6.,  11.,  16.,  22.,  20.,  15.,  24.,
         19.,  26.,  47.,  51.,  72.,  59.,  83.,  96., 134., 123., 128.,
        151., 163., 239., 245., 271., 316., 308., 306., 311., 305., 338.,
        302., 314., 285., 285., 283., 291., 279., 283., 336., 307., 298.,
        317., 317., 308., 303., 279., 262., 282., 329., 279., 277., 292.,
        273., 244., 308., 260., 293., 276., 272., 281., 266., 261., 302.,
        255., 357., 291., 293., 318., 305., 293., 298., 276., 258., 245.,
        222., 245., 206., 218., 168., 160., 160., 154., 140., 126., 146.,
        120., 106., 105.,  79.,  90.,  90.,  92.,  94.,  62.,  65.,  74.,
         82.,  78.,  64.,  66.,  54.,  51.,  59.,  56.,  52.,  64.,  44.,
         56.,  58.,  56.,  69.,  43.,  46.,  44.,  56.,  36.,  37.,  36.,
         40.,  28.,  34.,  31.,  27.,  28.,  30.,  19.,  33.,  29.,  24.,
         26.,  23.,  42.,  24.,  29.,  27.,  22.,  21.,  16.,  23.,  21.,
         12.,  26.,  15.,  26.,  12.,  22.,  27.,  12.,  18.,  18.,  21.,
         20.,  11.,  16.,  14.,  16.,  19.,  10.,  17.,  10.,   9.,   7.,
         12.,  11.,  15.,   9.,   7.,  14.,  18.,  13.,  18.,  15.,  16.,
         15.,  20.,  18.,  23.,  18.,  19.,  20.,  23.,  20.,  23.,  28.,
         32.,  23.,  35.,  18.,  10.,   6.,   4.,   0.,   3.,   2.,   5.,
          4.,   8.,   6.,   3.,   7.,   4.,  10.,  10.,  10.,  22.,  17.,
         16.,  26.,   3.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [187]: subset2x = ndimage.zoom(subset, 2)

In [188]: subset.shape
Out[188]: (150, 150)

In [189]: subset2x
Out[189]:
array([[106, 111, 119, ...,  61,  60,  59],
       [107, 112, 121, ...,  61,  59,  58],
       [109, 114, 123, ...,  60,  58,  57],
       ...,
       [125, 125, 127, ..., 113, 112, 112],
       [126, 127, 129, ..., 108, 107, 107],
       [127, 128, 130, ..., 105, 105, 105]], dtype=uint8)

In [190]: subset2x.shape
Out[190]: (300, 300)

In [191]: ax.imshow(subset2x, cmap='gray')
Out[191]: <matplotlib.image.AxesImage at 0x7fe5ba0d2748>

In [192]: ax.clear()

In [193]: ax.imshow(subset2x, cmap='gray')
Out[193]: <matplotlib.image.AxesImage at 0x7fe5ba08e320>

In [194]: f3, ax2 = plt.subplots()

In [195]: ax2.hist(subset2x.ravel(), bins=np.arange(256+1))
Out[195]:
(array([   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,   28.,   22.,   29.,   38.,   52.,   28.,   28.,   20.,
          23.,   22.,   18.,   16.,   20.,   21.,   14.,   20.,   22.,
          19.,   18.,   21.,   19.,   55.,   83.,   67.,   60.,   80.,
          78.,   92.,  126.,  171.,  218.,  256.,  235.,  339.,  382.,
         500.,  507.,  551.,  555.,  690.,  892., 1012., 1117., 1261.,
        1180., 1189., 1300., 1284., 1248., 1271., 1190., 1150., 1160.,
        1171., 1138., 1106., 1165., 1322., 1215., 1177., 1269., 1291.,
        1195., 1190., 1134., 1152., 1105., 1256., 1163., 1139., 1131.,
        1068., 1062., 1099., 1107., 1150., 1072., 1078., 1124., 1109.,
        1143., 1056., 1183., 1288., 1172., 1238., 1274., 1200., 1191.,
        1136., 1052., 1057.,  976.,  955.,  929.,  849.,  847.,  728.,
         643.,  649.,  596.,  588.,  509.,  495.,  423.,  437.,  470.,
         354.,  358.,  351.,  343.,  360.,  320.,  282.,  268.,  288.,
         266.,  286.,  281.,  221.,  232.,  211.,  213.,  238.,  221.,
         230.,  229.,  209.,  226.,  236.,  194.,  185.,  180.,  183.,
         172.,  165.,  151.,  161.,  119.,  121.,   99.,  107.,  114.,
         103.,  105.,  110.,  117.,  113.,  120.,  120.,  122.,  110.,
         139.,   91.,   78.,   88.,   73.,   81.,   84.,   76.,   76.,
          78.,   72.,   81.,   77.,  112.,   78.,   66.,   88.,   54.,
          57.,   59.,   54.,   60.,   62.,   67.,   58.,   45.,   44.,
          43.,   46.,   44.,   50.,   43.,   44.,   52.,   58.,   58.,
          50.,   66.,   65.,   62.,   71.,   75.,   72.,   76.,   69.,
          89.,   85.,   89.,   89.,  103.,  112.,  110.,  122.,  113.,
          64.,   38.,   18.,   16.,   14.,   13.,   23.,   19.,   15.,
          19.,   22.,   25.,   22.,   23.,   35.,   27.,   62.,   78.,
          68.,   75.,   92.,   15.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [196]: plt.close('all')

In [197]: from skimage import data

In [198]: immun = data.immunohistochemistry()

In [199]: immun.shape
Out[199]: (512, 512, 3)

In [200]: f, ax = plt.subplots()

In [201]: ax.imshow(immun)
Out[201]: <matplotlib.image.AxesImage at 0x7fe5b8c374a8>

In [202]: immun[:, :, 0]
Out[202]:
array([[156, 163, 156, ..., 152, 169, 189],
       [141, 144, 141, ..., 164, 167, 175],
       [125, 132, 138, ..., 172, 164, 164],
       ...,
       [221, 226, 234, ..., 212, 214, 217],
       [217, 222, 230, ..., 214, 211, 215],
       [222, 222, 224, ..., 210, 210, 215]], dtype=uint8)

In [203]: immun[:, :, 0].shape
Out[203]: (512, 512)

In [204]: f2, ax2 = plt.subplots()

In [205]: red = immun[:, :, 0]

In [206]: ax2.imshow(red, cmap='gray')
Out[206]: <matplotlib.image.AxesImage at 0x7fe5b8961c18>

In [207]: blue = immun[:, :, 1]

In [208]: green = immun[:, :, 2]

In [209]: green = immun[:, :, 1]

In [210]: blue = immun[:, :, 2]

In [211]: f, ax = plt.subplots()

In [212]: ax.imshow(green, cmap='gray')
Out[212]: <matplotlib.image.AxesImage at 0x7fe5b869f5c0>

In [213]: f, ax = plt.subplots()

In [214]: ax.imshow(blue, cmap='gray')
Out[214]: <matplotlib.image.AxesImage at 0x7fe5b866fcc0>

In [215]: temp = immun.copy()

In [216]: temp[:, :, 0]
Out[216]:
array([[156, 163, 156, ..., 152, 169, 189],
       [141, 144, 141, ..., 164, 167, 175],
       [125, 132, 138, ..., 172, 164, 164],
       ...,
       [221, 226, 234, ..., 212, 214, 217],
       [217, 222, 230, ..., 214, 211, 215],
       [222, 222, 224, ..., 210, 210, 215]], dtype=uint8)

In [217]: temp[:, :, 0] = 0

In [218]: plt.close('all')

In [219]: f, ax = plt.subplots()

In [220]: ax.imshow(immun)
Out[220]: <matplotlib.image.AxesImage at 0x7fe5adafbf98>

In [221]: f2, ax2 = plt.subplots()

In [222]: ax2.imshow(temp)
Out[222]: <matplotlib.image.AxesImage at 0x7fe5ada65908>

In [223]: temp
Out[223]:
array([[[  0, 118,  81],
        [  0, 125,  88],
        [  0, 116,  81],
        ...,
        [  0, 160, 196],
        [  0, 175, 207],
        [  0, 196, 225]],

       [[  0, 105,  69],
        [  0, 108,  72],
        [  0, 102,  69],
        ...,
        [  0, 172, 208],
        [  0, 173, 205],
        [  0, 182, 210]],

       [[  0,  92,  59],
        [  0,  99,  66],
        [  0, 103,  71],
        ...,
        [  0, 181, 214],
        [  0, 171, 200],
        [  0, 171, 197]],

       ...,

       [[  0, 218, 209],
        [  0, 223, 214],
        [  0, 231, 222],
        ...,
        [  0, 211, 207],
        [  0, 210, 207],
        [  0, 213, 210]],

       [[  0, 214, 207],
        [  0, 219, 212],
        [  0, 227, 220],
        ...,
        [  0, 213, 211],
        [  0, 207, 204],
        [  0, 210, 207]],

       [[  0, 219, 212],
        [  0, 219, 212],
        [  0, 221, 214],
        ...,
        [  0, 209, 207],
        [  0, 205, 202],
        [  0, 210, 207]]], dtype=uint8)

In [224]: temp.shape
Out[224]: (512, 512, 3)

In [225]: temp[:, :, 1]
Out[225]:
array([[118, 125, 116, ..., 160, 175, 196],
       [105, 108, 102, ..., 172, 173, 182],
       [ 92,  99, 103, ..., 181, 171, 171],
       ...,
       [218, 223, 231, ..., 211, 210, 213],
       [214, 219, 227, ..., 213, 207, 210],
       [219, 219, 221, ..., 209, 205, 210]], dtype=uint8)

In [226]: temp[:, :, 1] = 0

In [227]: temp[:, :, 1]
Out[227]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [228]: f3, ax3 = plt.subplots()

In [229]: ax3.imshow(temp)
Out[229]: <matplotlib.image.AxesImage at 0x7fe5abd29438>

In [230]: from skimage import color

In [231]: color.rgb2gray?

In [232]: immung = color.rgb2gray(immun)

In [233]: immung.shape
Out[233]: (512, 512)

In [234]: immung.ndim
Out[234]: 2

In [235]: ax.imshow(immung, cmap='gray')
Out[235]: <matplotlib.image.AxesImage at 0x7fe5ae5d4128>

In [236]: facea = io.imread('face_alpha.png')

In [237]: facea.shape
Out[237]: (782, 782, 4)

In [238]: facea[:, :, 3]
Out[238]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [239]: (facea[:, :, 3] == 0).all()
Out[239]: False

In [240]: facea[:, :, 3]
Out[240]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [241]: plt.close('all')

In [242]: f, ax = plt.subplots()

In [243]: ax.imshow(facea)
Out[243]: <matplotlib.image.AxesImage at 0x7fe5ab7242b0>

In [244]: alpha = facea[:, :, 3]

In [245]: alpha.shape
Out[245]: (782, 782)

In [246]: ax.imshow(alpha, cmap='gray')
Out[246]: <matplotlib.image.AxesImage at 0x7fe5ae9c3470>

In [247]: im = _

In [248]: f.colorbar(im)
Out[248]: <matplotlib.colorbar.Colorbar at 0x7fe5ae671cf8>

In [249]: facea.shape
Out[249]: (782, 782, 4)

In [250]: f, ax = plt.subplots()

In [251]: bg = np.zeros_like(facea)

In [252]: bg.shape
Out[252]: (782, 782, 4)

In [253]: facea
Out[253]:
array([[[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       ...,

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]]], dtype=uint8)

In [254]: bg.shape
Out[254]: (782, 782, 4)

In [255]: facea.shape
Out[255]: (782, 782, 4)

In [256]: bg[:, :] = 255, 0, 0, 255

In [257]: ax.imshow(bg)
Out[257]: <matplotlib.image.AxesImage at 0x7fe5ae6237f0>

In [258]: ax.imshow(facea)
Out[258]: <matplotlib.image.AxesImage at 0x7fe5ab7249e8>

In [259]: color.rgba2rgb
Out[259]: <function skimage.color.colorconv.rgba2rgb(rgba, background=(1, 1, 1))>

In [260]: ohki = io.imread('ohki2005.png')

In [261]: f, ax = plt.subplots()
     ...: ax.imshow(ohki, cmap='gray')
     ...: f, ax = plt.subplots()
     ...: ax.hist(ohki.ravel(), bins=np.arange(256))
     ...: edges = filters.sobel(ohki)
     ...: f, ax = plt.subplots()
     ...: ax.imshow(edges, cmap='gray')
Out[261]: <matplotlib.image.AxesImage at 0x7fe5bbdae6a0>

In [262]: from skimage.feature import canny
     ...: edges = canny(ohki, sigma=1.5)
     ...: from scipy import ndimage
     ...: mask = ndimage.binary_fill_holes(edges)
     ...: f, ax = plt.subplots()
     ...: ax.imshow(mask, cmap='gray')
Out[262]: <matplotlib.image.AxesImage at 0x7fe5bbab4fd0>

In [263]: import skvideo.io

In [264]: scikit-video
-------------------------------------------------------------
NameError                   Traceback (most recent call last)
<ipython-input-264-c9aa224b2df3> in <module>
----> 1 scikit-video

NameError: name 'scikit' is not defined
> <ipython-input-264-c9aa224b2df3>(1)<module>()
----> 1 scikit-video

ipdb> c

In [265]: mvi = skvideo.io.vread('movie.avi')

In [266]: mvi.shape
Out[266]: (300, 240, 320, 3)

In [267]: mvi[0]
Out[267]:
array([[[148, 148, 148],
        [151, 151, 151],
        [155, 155, 155],
        ...,
        [ 90,  90,  90],
        [ 92,  92,  92],
        [ 78,  78,  78]],

       [[151, 151, 151],
        [154, 154, 154],
        [157, 157, 157],
        ...,
        [111, 111, 111],
        [ 92,  92,  92],
        [ 64,  64,  64]],

       [[135, 135, 135],
        [137, 137, 137],
        [140, 140, 140],
        ...,
        [ 85,  85,  85],
        [ 71,  71,  71],
        [ 49,  49,  49]],

       ...,

       [[ 69,  69,  69],
        [ 80,  80,  80],
        [107, 107, 107],
        ...,
        [ 92,  92,  92],
        [106, 106, 106],
        [103, 103, 103]],

       [[ 85,  85,  85],
        [118, 118, 118],
        [154, 154, 154],
        ...,
        [ 73,  73,  73],
        [ 91,  91,  91],
        [ 93,  93,  93]],

       [[150, 150, 150],
        [159, 159, 159],
        [158, 158, 158],
        ...,
        [ 57,  57,  57],
        [ 62,  62,  62],
        [ 56,  56,  56]]], dtype=uint8)

In [268]: mvi[0].shape
Out[268]: (240, 320, 3)

In [269]: plt.close('all')

In [270]: f, ax = plt.subplots()
     ...: ax.imshow(ohki, cmap='gray')
     ...: f, ax = plt.subplots()
     ...: ax.hist(ohki.ravel(), bins=np.arange(256))
     ...: edges = filters.sobel(ohki)
     ...: f, ax = plt.subplots()
     ...: ax.imshow(edges, cmap='gray')
Out[270]: <matplotlib.image.AxesImage at 0x7fe5abeb9518>

In [271]: plt.close('all')

In [272]: f, ax = imshow(mvi[0])
-------------------------------------------------------------
NameError                   Traceback (most recent call last)
<ipython-input-272-41bb52ac3646> in <module>
----> 1 f, ax = imshow(mvi[0])

NameError: name 'imshow' is not defined
> <ipython-input-272-41bb52ac3646>(1)<module>()
----> 1 f, ax = imshow(mvi[0])

ipdb> c

In [273]: f, ax = plt.subplots()

In [274]: ax.imshow(mvi[0])
Out[274]: <matplotlib.image.AxesImage at 0x7fe5c847fe80>

In [275]: miv[0].shape
-------------------------------------------------------------
NameError                   Traceback (most recent call last)
<ipython-input-275-df89ef9f0289> in <module>
----> 1 miv[0].shape

NameError: name 'miv' is not defined
> <ipython-input-275-df89ef9f0289>(1)<module>()
----> 1 miv[0].shape

ipdb> c

In [276]: mvi[0].shape
Out[276]: (240, 320, 3)

In [277]: ax.imshow(mvi[-1])
Out[277]: <matplotlib.image.AxesImage at 0x7fe5ca9cd2b0>

In [278]: immun = data.immunohistochemistry()

In [279]: from skimage import data

In [280]: immun = data.immunohistochemistry()

In [281]: immun.shape
Out[281]: (512, 512, 3)

In [282]: f, ax = plt.subplots(immun)
-------------------------------------------------------------
TypeError                   Traceback (most recent call last)
<ipython-input-282-68fc52b36cdd> in <module>
----> 1 f, ax = plt.subplots(immun)

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in subplots(nrows, ncols, sharex, sharey, squeeze, subplot_kw, gridspec_kw, **fig_kw)
   1210     axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,
   1211                        squeeze=squeeze, subplot_kw=subplot_kw,
-> 1212                        gridspec_kw=gridspec_kw)
   1213     return fig, axs
   1214

/usr/local/lib/python3.6/dist-packages/matplotlib/figure.py in subplots(self, nrows, ncols, sharex, sharey, squeeze, subplot_kw, gridspec_kw)
   1566
   1567         # Create array to hold all axes.
-> 1568         axarr = np.empty((nrows, ncols), dtype=object)
   1569         for row in range(nrows):
   1570             for col in range(ncols):

TypeError: only integer scalar arrays can be converted to a scalar index
> /usr/local/lib/python3.6/dist-packages/matplotlib/figure.py(1568)subplots()
   1566
   1567         # Create array to hold all axes.
-> 1568         axarr = np.empty((nrows, ncols), dtype=object)
   1569         for row in range(nrows):
   1570             for col in range(ncols):

ipdb> c

In [283]: f, ax = plt.subplots()

In [284]: ax.imshow(immun)
Out[284]: <matplotlib.image.AxesImage at 0x7fe5c821df60>

In [285]: import skimage.color

In [286]: immung = skimage.color.rgb2gray(immun)

In [287]: immung.shape
Out[287]: (512, 512)

In [288]: ax.imshow(immung)
Out[288]: <matplotlib.image.AxesImage at 0x7fe5c7f04940>

In [289]: ax.imshow(immung, cmap='gray')
Out[289]: <matplotlib.image.AxesImage at 0x7fe5c7ece940>

In [290]: immun
Out[290]:
array([[[156, 118,  81],
        [163, 125,  88],
        [156, 116,  81],
        ...,
        [152, 160, 196],
        [169, 175, 207],
        [189, 196, 225]],

       [[141, 105,  69],
        [144, 108,  72],
        [141, 102,  69],
        ...,
        [164, 172, 208],
        [167, 173, 205],
        [175, 182, 210]],

       [[125,  92,  59],
        [132,  99,  66],
        [138, 103,  71],
        ...,
        [172, 181, 214],
        [164, 171, 200],
        [164, 171, 197]],

       ...,

       [[221, 218, 209],
        [226, 223, 214],
        [234, 231, 222],
        ...,
        [212, 211, 207],
        [214, 210, 207],
        [217, 213, 210]],

       [[217, 214, 207],
        [222, 219, 212],
        [230, 227, 220],
        ...,
        [214, 213, 211],
        [211, 207, 204],
        [215, 210, 207]],

       [[222, 219, 212],
        [222, 219, 212],
        [224, 221, 214],
        ...,
        [210, 209, 207],
        [210, 205, 202],
        [215, 210, 207]]], dtype=uint8)

In [291]: immun.shape
Out[291]: (512, 512, 3)

In [292]: immun[:, :, -1] = 0

In [293]: ax.imshow(immun)
Out[293]: <matplotlib.image.AxesImage at 0x7fe5c7ec2fd0>

In [294]: immun[:, :, -1]
Out[294]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [295]: (immun[:, :, -1] == 0).all()
Out[295]: True

In [296]:
